{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"capybara4--安装cucumber","slug":"capybara4","date":"2016-08-30T07:54:19.000Z","updated":"2016-08-31T15:00:04.000Z","comments":true,"path":"2016/08/30/capybara4/","link":"","permalink":"http://yoursite.com/2016/08/30/capybara4/","excerpt":"","keywords":null,"text":"capybara是一个简单的API,它提供了抽象层在你真实自动化库之上。如果它帮助,认为capybara是你的翻译,你告诉它做一些事情，它将优雅的将命令转换为你应用驱动的API。 所以当我们使用capybara进行翻译时，我们需要告诉capybara做什么并且需要一个API自动化库去进行翻译。capybara是一个非常灵活的库,通过这本书我们将看到它在各种场景中应用。然而。目前为止最常见的情景是应用cucumber作为capybara测试驱动，去驱动selenium webdriver 开展浏览器自动化。当cucumber被调用来解析这些简单易懂的英语场景时，它将使用正则表达式去将这些匹配 cucumber介绍cucumber是一种可以使用文本描述语言来执行自动测试用例的工具，使用的语言叫做Gherkin. Gherkin用于描述软件的行为而不需要了解具体的实现，使用Gherkin主要有两个目的文档和自动测试用例（我们希望能够和手工测试用例也统一）。 Gherkin支持超过40种语言，包括英文、中文。 Gherkin可以在任何地方新增注释，注释以#开头，每一个文件都是已.feature结尾，在feature文件中输入功能描述、场景、步骤，当执行这个功能时每一个步骤都需要编写ruby代码块来实现具体的功能，当前cucumber支持多种语言，除了ruby还可以使用java、javascript来编写具体定义层的实现。 以下是一个cucumber 场景的例子 Feature: Search for Videos on Baidu Scenario: Search for Videos Given I am on the baidu home page When I search for &quot;capybara&quot; Then search result are returned 我们设置可以采用中文实现场景中文的话最前面必须增加# language: zh-CN 12345678910111213# language: zh-CN功能:第一个中文程序中文实现场景:中文实现场景假如当前是中文当输入是测试那么能看到中文测试 下面的流程图说明了从cucumber到底层驱动如何实现，capybara在整个流程里面充当是中间价的作用。 安装1gem install cucumber 如果你使用的是 bundler，只是需要添加以下代码到Gemfile: 123group :test do gem 'cucumber'end 初始化features目录：1cucumber --init 查看完帮助列表：1cucumber --help 运行所有features：1cucumber Cucumber-Rails如果你使用capybara 来测试rails应用，你应该安装cucumber－rails gem 而不是标准的rails gem。这个gem需要capybara和cucumber作为依赖。所以当你安装cucumber－rails gem时，会自动安装这些依赖，我们只需要运行以下命令1gem install cucumber-rails 如果你使用bundle，只需要将以下代码添加进gemfile:12345group :test, :development do gem 'cucumber-rails', :require =&gt; false # database_cleaner is not required, but highly recommended gem 'database_cleaner'end 然后运行1bundle install 运行生成器帮助我们生成目录1rails generate cucumber:install","raw":null,"content":null,"categories":[],"tags":[{"name":"capybara","slug":"capybara","permalink":"http://yoursite.com/tags/capybara/"}]},{"title":"capybara3--rspec配置","slug":"capybara3","date":"2016-08-30T04:42:49.000Z","updated":"2016-08-30T04:57:07.000Z","comments":true,"path":"2016/08/30/capybara3/","link":"","permalink":"http://yoursite.com/2016/08/30/capybara3/","excerpt":"","keywords":null,"text":"rspec配置我们知道Capybara 只是是一个用来以模拟用户对web应用的操作来测试web应用的工具包，不能真正的称之为测试框架，它需要其他的测试驱动框架来帮助我们完成测试工作。所以我们需要一个测试驱动框架. RSpec由Steven Baker开发并在2005年发布，全面支持Ruby程序的BDD开发测试方式，并且对于Rails程序有着良好的支持，针对View，Controller和Model每一层都有良好的支持。RSpec目前的最新版本是：3.5。 它在 BDD 流程的开发中被用来写高可读性的测试，引导并验证你开发的应用程序。 minitest与rspec都是ruby和rails比较流行的框架。这里我们选择rspec。 安装rspec很简单,打开command line运行一下操作：1gem install rspec 或者将rspec 添加到gemfile里1gem 'rspec' 执行bundle install 来安装如果你的项目采用的时rails,那么rspec-rails 或许更适合你 在gemfile里添加123group :development, :test do gem 'rspec-rails', '~&gt; 3.4'end 执行 bundle install 初始化测试目录 1rails generate rspec:install 这增加了以下文件用于配置:123.rspecspec/spec_helper.rbspec/rails_helper.rb","raw":null,"content":null,"categories":[],"tags":[{"name":"capybara","slug":"capybara","permalink":"http://yoursite.com/tags/capybara/"}]},{"title":"capybara2--准备环境","slug":"capybara2","date":"2016-08-26T14:48:50.000Z","updated":"2016-08-30T05:09:13.000Z","comments":true,"path":"2016/08/26/capybara2/","link":"","permalink":"http://yoursite.com/2016/08/26/capybara2/","excerpt":"","keywords":null,"text":"ruby环境配置capycaraCapybara 需要 Ruby 1.9.3或之后的版本. 所以首先我们需要在我们的操作系统中，配置ruby运行环境 windows 下载 &amp; 安装 Ruby从http://rubyinstaller.org/或者 http://railsinstaller.org/ 下载已经打包好的安装程序。1.1安装 ruby版本 安装 DevKit从 http://rubyinstaller.org/downloads/下载安装DevKit2.1 RubyInstaller Development Kit (DevKit)的安装在使用RubyGems安装Ruby on Rails的同时，还有几个一起被安装的类库。这些类库中，有一些是保持C语言编写的代码的形式来发布的，它们需要通过使用“gcc”编译器等结合环境一起来编译，但在Windows上是不能用gcc来编译的。安装了本次所介绍的“RubyInstaller Development Kit (DevKit)”后，编译器就可以很容易地安装使用所需的类库。 Ruby环境配置 在windows中配置环境变量 RUBY_HOME=rubyinstaller_dir （实际的ruby所在路径） 在path中添加 %RUBY_HOME%\\bin 在命令行下运行 ruby –version，如果显示ruby版本信息说明安装正常。 多版本ruby环境配置 利用uru，这个工具可以帮助我们在windows系统上 管理多个ruby版本下载安装uru 安装uru解压uru到某一目录例如C:\\tools下运行以下命令安装 1C:\\tools&gt; uru_rt admin install 安装ruby版本，可以安装任意个ruby版本 在uru中注册ruby版本 1234567C:\\&gt; uru admin add c:\\ruby\\jruby-1.7.18\\bin\\---&gt; Registered jruby at `c:\\ruby\\jruby-1.7.18\\bin` as `1718`C:\\&gt; uru ls 1718 : jruby 1.7.18 (1.9.3p551) 2014-12-22 625381c on Java HotSpot(TM) ... 193 : ruby 1.9.3p551 (2014-11-13) [i386-mingw32] 215 : ruby 2.1.5p273 (2014-11-13 revision 48405) [x64-mingw32] 详细操作命令查看http://www.neverletdown.net/2015/08/managing-multiple-ruby-versions-with-uru.html 强烈不建议用windows来开发,原因请查看https://bitbucket.org/jonforums/uru linux（Ubuntu）或者mac os更适合你用来开发。详细请看 https://ruby-china.org/topics/1020 linux-ubuntuInstalling Ruby 第一步安装配置ruby环境所需要的一些基础库12sudo apt-get updatesudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev 利用工具来管理的ruby版本，rbenv 就是一个很好的工具1234567891011121314cdgit clone https://github.com/rbenv/rbenv.git ~/.rbenvecho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' &gt;&gt; ~/.bashrcecho 'eval \"$(rbenv init -)\"' &gt;&gt; ~/.bashrcexec $SHELLgit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-buildecho 'export PATH=\"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"' &gt;&gt; ~/.bashrcexec $SHELLrbenv install 2.3.1rbenv global 2.3.1ruby -vhttps://gorails.com/setup/ubuntu/16.10 mac os利用homebrew 来安装管理mac的应用安装 Homebrew 首先，我们需要安装homebrew。homebrew 允许我们方便从源码安装和编译软件包当homebrew需要安装xcode 命令行工具，输入yes.打开命令行并且运行以下命令：1ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" Installing Ruby 1brew install rbenv ruby-build Add rbenv to bash so that it loads every time you open a terminal 12echo 'if which rbenv &gt; /dev/null; then eval \"$(rbenv init -)\"; fi' &gt;&gt; ~/.bash_profilesource ~/.bash_profile Install Ruby 123rbenv install 2.3.1rbenv global 2.3.1ruby -v 安装capybara安装系统依赖库在某些操作系统中ruby环境可能需要一些第三方库的支持，通常是出于性能方面的原因，ruby是一种解释性语言所以在处理某些任务时，例如解析XML会非常慢，这时把这些任务交给第三方库处理，效率就会成倍增加。对于windows平台，你不用担心第三依赖库的问题，不过你要确保您已经安装了Ruby DevKit;详细说明如何做到这一点，请参阅http://rubyinstaller.org/add-ons/ devkit capybara依赖于nokogirl，一个流行的基于ruby的XML的解析器，该库可能需要以下第三方库的支持：• libxml2• libxml2-dev • libxslt• libxslt-dev对于不同的操作系统安装这些库的方式可能略有不同，对于linux 例如Ubuntu 可以使用apt-get ，对于redhat 请使用yum install 对于mac os x 那么brew 是你最好的选择。完成这些第三方依赖后 我们就可以安装capybara了 添加以下的代码到你的Gemfile里，并且运行bundle install。1gem 'capybara' 什么是Bundle相当于多个RubyGems批处理运行。在配置文件gemfilel里说明你的应用依赖哪些第三方包，他自动帮你下载安装多个包，并且会下载这些包依赖的包.http://bundler.io/","raw":null,"content":null,"categories":[],"tags":[{"name":"capybara","slug":"capybara","permalink":"http://yoursite.com/tags/capybara/"}]},{"title":"capybara1-capybara简介","slug":"capybara1","date":"2016-08-26T06:17:36.000Z","updated":"2016-08-29T03:46:49.000Z","comments":true,"path":"2016/08/26/capybara1/","link":"","permalink":"http://yoursite.com/2016/08/26/capybara1/","excerpt":"","keywords":null,"text":"capybara简介capybara是一个ruby的gem,它是一个用来测试web应用的工具包，使用它可以模拟用户对web应用的操作。它可以通过CSS或xpath选择器选中页面上的元素，然后对这些元素应用一些操作，从而实现模拟用户行为。 底层driver的实现基于底层driver的基础上，提供一套统一的 界面交互api，如visit, right_click，hover等。它内置 Rack::Test 和 Selenium 支持，也支持其他驱动。WebKit 通过外部 gem 的形式支持。 底层的driver有很多，可以是完全打开浏览器方式的driver(如：RackTest，selenium-webdriver)，也可以是基于headless webkit 的 driver(如：capybara-webkit, poltergeist). capybara 优点 ● 无需配置 对于 Rails 和 Rack 应用而言，开箱即用。 ● 符合直觉的 API 模拟真实用户行为。 ● 可替换后端 可以替换测试后端，例如从快速的 headless 模式切换到实际的浏览器，无需更改测试。 ● 强力同步 你不用手动等待异步过程结束。 因为capyybara提供了以下好处： ● 这是一个更高层次的API，这意味着当你使用不同driver时，例如（headless或者browser）可以使用同样的API处理动态页面或静态HTML. ● 它是专门为U自动化测试web应用而设计的程序, ● 因此它拥有十分有用的断言的方法判断页面是否正确。 ● 当我们测试真实的浏览器时，他会自动帮助我们处理许多棘手的异步问题 ● 它被设计用于测试机架的应用，因此它会开机并为您管理后台服务器 ● 它为设计为rack应用的测试框架,所以它将引导和管理后台服务。","raw":null,"content":null,"categories":[],"tags":[{"name":"ui_automation, capybara1","slug":"ui-automation-capybara1","permalink":"http://yoursite.com/tags/ui-automation-capybara1/"}]},{"title":"gatling官方文档翻译5","slug":"gatling5","date":"2016-06-29T09:45:25.000Z","updated":"2016-06-29T12:57:39.000Z","comments":true,"path":"2016/06/29/gatling5/","link":"","permalink":"http://yoursite.com/2016/06/29/gatling5/","excerpt":"","keywords":null,"text":"第五篇 http://gatling.io/docs/2.2.2/migration_guides/2.0-to-2.1.html Migrating from 2.0 to 2.1Global changesScala 2.11Gatling is now built with Scala 2.11. If you’re using Scala IDE, make sure you’re using a version compatible with Scala 2.11. Compiler runs standaloneGatling itself doesn’t compile the Simulations anymore and expects that the simulations are already compiled. This means that gatling.sh/gatling.bat and the Maven plugin runs the compiler prior to running Gatling. Consequently, a few options in gatling.conf have been removed: gatling.core.disableCompilergatling.core.zinc.jvmArgsPlease note that, as this change implied that the Maven Plugin was heavily modified so that it compiles the simulations separately prior to running Gatling, you’ll need to upgrade the Maven Plugin to its version 2.1.0 too. PercentilesGatling now publishes 4 percentiles instead of 2. These percentiles are published in the reports and in the Graphite integration module. Beware that keys in gatling.conf file have been translated: Gatling 2.0:percentile1 = 95percentile2 = 99Gatling 2.1+:percentile1 = 50percentile2 = 75percentile3 = 95percentile4 = 99CoreMute modeThe “mute mode” option, which was previously restricted to the SBT Plugin, is now also usable by the bundle scripts and the Maven Archetype. AssertionsValidating assertions in combination with the reports-only / ro option does not require to pass the simulation (using -s) for which the assertions will be validated anymore. ThrottlingThrottling now automatically adds a maxDuration of either the simulation throttling duration, or the minimum of the scenarios throttling durations. HTTPParametersForm parameters are no longer specific to POST method, you can use them with all methods. Request Bodies DirectoryThe directory name was changed from request-bodies to bodies as it now can host both request bodies and response bodies. The latter one are now captured by the recorder, and can be used as template for checking the response body. CLI option was renamed from rbf to bdf. ChecksDeprecated dontValidate was dropped in 2.1 as previously announced. Please use optional instead. ProtocolDeprecated baseHeaders was dropped in 2.1 as previously announced. Please use headers instead. Maven ArchetypeDue to some necessary changes to allow Gatling to use Scala 2.11, you’ll have to update IDEPathHelper.scala, Engine.scala and Recorder.scala if you’re using the Maven archetype. Either generate a new project with the 2.1.1 archetype (there was a bug in 2.1), or override your classes with the ones here. If you choose the latter, don’t forget to fix the simulationPackage in Recorder.scala. SBT PluginThe SBT Plugin’s test framework has been moved to the core project in 2.1. As a consequence, the test framework name has be modified to follow the naming conventions of all core modules and share its versionning. The SBT Plugin will also share the same versionning schema as all other Gatling modules, and has been renamed to ‘gatling-sbt’. The new coordinates are therefore : “io.gatling” % “gatling-sbt” % “2.1.0” for the SBT Plugin“io.gatling” % “gatling-test-framework” % “2.1.0” for the testing framework. 从2.0 合并到2.1全局变化Scala 2.11gatling 现在用2.11 构建，如果你使用Scala IDE, 确认你是使用的版本能够兼容scala2.11. Compiler runs standalone编译器独立的运行 gatling本身不再编译模拟器和预测模拟已经编译。 这就意味着 gatling.sh/gatling.bat 和maven插件编译在运行gatling之前。因此,一些选项在gatling.conf 已经被移除 请注意，这种变化意味着Maven插件大量修改，单独编译仿真运行gatling之前，你需要升级版本2.1.0的Maven插件。 Percentilesgatling 发布4位百分数来代替2位。这些百分位数发布在生成的报告和图表的集成模块注意键在gatling.conf 文件已经被翻译。 Gatling 2.0:percentile1 = 95percentile2 = 99Gatling 2.1+:percentile1 = 50percentile2 = 75percentile3 = 95percentile4 = 99Core Mute mode “静音模式”选项,该选项以前局限于SBT插件,现在也可用bundle的脚本和Maven Archetype。Assertions 验证断言结合the reports-only / ro option不需要通过仿真(using- s)的断言将被验证了。 Throttling节流现在自动添加一个maxDuration仿真节流的持续时间、节流时间或最低的场景。HTTPParameters形式参数不再是特定于POST方法,您可以使用它们在全部的方法。Request Bodies Directory目录更名从请求体的body,因为它现在可以主机请求body和响应。后者现在被记录,并可以用作模板检查响应的body。 CLI option被重新命名从 rbf 到 bdf. Checks此前宣布弃用dontValidate下降2.1。请使用optional。 Protocol此前宣布弃用baseHeaders下降2.1。请使用headers。 Maven Archetype 由于一些必要的改变,允许gatling使用Scala 2.11中,你将不得不更新IDEPathHelper.scala, Engine.scala and Recorder.scala。如果你使用Maven archetype 。 SBT PluginSBT插件的测试框架已经被转移到2.1的核心项目。因此,测试框架的名称已被修改遵循所有核心模块的命名约定和分享它的版本。 SBT插件还将共享相同的版本模式和其他gatling模块,并重新命名为“gatling-sbt”。因此,新坐标:“io.gatling” % “gatling-sbt” % “2.1.0” 关于 the SBT 插件“io.gatling” % “gatling-test-framework” % “2.1.0” 关于测试框架.","raw":null,"content":null,"categories":[],"tags":[{"name":"gatling","slug":"gatling","permalink":"http://yoursite.com/tags/gatling/"}]},{"title":"gatling官方文档翻译4","slug":"gatling3-1","date":"2016-06-15T09:54:52.000Z","updated":"2016-06-16T02:15:39.000Z","comments":true,"path":"2016/06/15/gatling3-1/","link":"","permalink":"http://yoursite.com/2016/06/15/gatling3-1/","excerpt":"","keywords":null,"text":"第四篇 http://gatling.io/docs/2.2.1/migration_guides/2.0.0-M3a-to-2.0.htmlMigrating from 2.0.0-M3a to 2.0Global changesGatling requires at least JDK7u6As targeting newer JDKs provides bug fixes, speed improvements and opens opportunities for optimization, Gatling now requires at least a JDK7u6 (released almost two years ago already). Gatling is now available on Maven CentralGatling releases are now available on Maven Central, and snapshots are deployed on each successful build by Travis CI to Sonatype’s snapshots repository. If you were using Gatling with its Maven plugin, you no longer need to add the Excilys repository in your pom.xml. SimulationNecessary importsimport bootstrap. and import assertions. are now unnecessary and have to be removed.import io.gatling.http.Headers.Names. is now unnecessary, headers names are now directly available from HeaderNames.import io.gatling.http.Headers.Values. is now unnecessary, headers values are now directly available from HeaderValues.Injection DSLramp(10 users) becomes rampUsers(10)heaviside(10 users) becomes heavideUsers(10)atOnce(10 users) becomes atOnceUsers(10)constantRate(10 usersPerSec) becomes constantUsersPerSec(10)rampRate(10 usersPerSec) becomes rampUsersPerSec(10)split(10 users) becomes splitUsers(10)CoreStructure ElementsIn asLongAs, exitASAP now defaults to true. For more information on the change of behaviour it introduces, see asLongAs documentation. Checkswhatever has been renamed to optional.transform now no longer takes and returns an Option[T] and takes and returns plain types, but transformOption provides the same functionality as transform did.HTTPForm parameters (for POST requests)Renamed Methods for adding form parameters to the request have been renamed: param =&gt; formParammultiValuedParam =&gt; multiValuedFormParamMiscrequestInfoExtractor and responseInfoExtractor have been merged into a single extraInfoExtractor, which takes a ExtraInfo =&gt; List[Any] function.gatling.http.ahc.useRawUrl configuration parameter was removed, please use disableUrlEncoding instead, as described here.For more information on extraInfoExtractor, please refer to its documentation. Logssimulation.log has been redesigned. If you wrote your own specific simulation.log parser, you’ll need to migrate it to the new structure. RecorderUntil now, when setting up the Recorder, you had to setup two ports for the Recorder’s local proxy: one for HTTP, one for HTTPS. This is not needed anymore, as the Recorder handles itself the switch to an HTTPS connection if necessary, and only a single port needs to be specified. Maven PluginThe … and … configuration options have been removed. Should you want to select a specific simulation to run, you can use the … config option to do so. For more information, see the Maven plugin documentation. Migrating from 2.0.0-M3a to 2.0从2.0.0-M3a 合并到2.0 全局改变Gatling 需要至少JDK7u6版本 因为心得JDKs修复一些问题，速度得到改善，优化了处理，gatling 现在需要至少JDK7u6(2年前已经发布) gatling 现在同样在maven cetral 适用 gatling 现在同样在maven cetral 适用，并且快照都会部署到 Sonatype’s snapshots repository 当每次 Travis ci 构建成功后。如果你使用maven插件版gatling，你不需要添加the Excilys repository 在你的pom.xml中。 模拟器Necessary importsimport bootstrap. and import assertions. 现在已经不需要并且被移除import io.gatling.http.Headers.Names. 已经不需要， headers names被 HeaderNames代替.import io.gatling.http.Headers.Values. 已经不需要, headers values 被 HeaderValues代替. Injection DSLramp(10 users) 变为 rampUsers(10)heaviside(10 users) 变为 heavideUsers(10)atOnce(10 users)变为 atOnceUsers(10)constantRate(10 usersPerSec) 变为 constantUsersPerSec(10)rampRate(10 usersPerSec)变为 rampUsersPerSec(10)split(10 users) 变为 splitUsers(10)Core Structure Elements结构化组件 在 asLongAs, exitASAP 默认为trule。有关的行为改变的更多信息介绍,请看asLongAs文档。 Checks whatever 已经被重新命名为 optional.transform now no longer takes and returns an Option[T] and takes and returns plain types, but transformOption provides the same functionality as transform did.transform现在不再需要现在返回一个Option[T],并返回plain类型,但transformOption和transform提供了相同的功能。HTTPForm parameters (关于 POST 请求)重命名 adding form parameters 方法请求已经被重命名: param =&gt; formParammultiValuedParam =&gt; multiValuedFormParam MiscrequestInfoExtractor 和 responseInfoExtractor 已经合并为 extraInfoExtractor, which takes a ExtraInfo =&gt; List[Any] function.gatling.http.ahc.useRawUrl 配置参数已经被移除, 请用 disableUrlEncoding 代替, 描述如下.更多关于 extraInfoExtractor信息, 请参照这个文档. Logs simulation.log 已经被重新设计. 如果你写自己的simulation.log解析器,您需要它迁移到新结构 Recorder Until now, 当你设置 Recorder时, 你必须设置两个端口记录器的当地代理:一个用于HTTP,HTTPS。 这再也不需要了, 因为record处理本身转向一个HTTPS连接如果必要,并且只需要指定一个单独的端口。 Maven Plugin The &lt;includes&gt;...&lt;/includes&gt; 和 &lt;excludes&gt;...&lt;/excludes&gt; 配置项 已经被移除. 如果你需要选择一个特殊的模拟运行, 你可以使用 &lt;simulationClass&gt;...&lt;/simulationClass&gt; 去配置. 更多的信息, 查阅 Maven plugin 文档.","raw":null,"content":null,"categories":[],"tags":[{"name":"gatling","slug":"gatling","permalink":"http://yoursite.com/tags/gatling/"}]},{"title":"gatling官方文档翻译3","slug":"gatling3","date":"2016-06-08T15:22:40.000Z","updated":"2016-06-14T02:53:29.000Z","comments":true,"path":"2016/06/08/gatling3/","link":"","permalink":"http://yoursite.com/2016/06/08/gatling3/","excerpt":"","keywords":null,"text":"第三篇http://gatling.io/docs/2.2.1/migration_guides/1.5.x-to-2.0.html Migrating from 1.5.x to 2.0Global changesGatling requires at least JDK7u6As targeting newer JDKs provides bug fixes, speed improvements and opens opportunities for optimization, Gatling now requires at least a JDK7u6 (released almost two years ago already). Scala 2.10Gatling is built with Scala 2.10. If you’re using Scala IDE, make sure you’re using a version compatible with Scala 2.10. Gatling is now available on Maven CentralGatling releases are now available on Maven Central, and snapshots are deployed on each successful build by Travis CI to Sonatype’s snapshots repository. If you were using Gatling with its Maven plugin, you no longer need to add the Excilys repository in your pom.xml. Package and GroupId changesGatling’s artifacts groupId and package are now io.gatling. You’ll have to : Update your build scripts to change the groupId of Gatling’s dependencies from com.excilys.ebi.gatling to io.gatlingUpdate your simulations to replace the com.excilys.ebi.gatling part in the imports by io.gatlingSimulationNecessary importsakka.util.duration classes have been ported to the scala.concurrent.duration package. Simply replace import akka.util.duration. by import scala.concurrent.duration..import bootstrap. and import assertions. are now unnecessary and have to be removed.import com.excilys.ebi.gatling.http.Headers.Names. is now unnecessary, headers names are now directly available from HeaderNames.import com.excilys.ebi.gatling.http.Headers.Values. is now unnecessary, headers values are now directly available from HeaderValues.Protocols setupProtocols are no longer configured by scenario and are now configured by simulation, using the protocols method. A 1.4.x-1.5.x setUp like this one: setUp(scn.(…).protocolConfig(httpConfig))would now be with Gatling 2.0: setUp(scn.(…)).protocols(httpConfig)Assertions setupThe assertThat method has been removed, assertions are now configured using assertions in the same fashion as protocols are, e.g. setup(scn.(…).protocolConfig(httpConfig)) assertThat(global.responseTime.max.lessThan(1000))becomes: setup(scn.(…)) .protocols(httpConfig) .assertions(global.responseTime.max.lessThan(1000)New Injection DSLThe users, ramp and delay methods to configure the injection profile for your scenario have been removed in favor of a full-blown dedicated DSL. Injection steps are now configured using the inject method available on your configured scenario. Migrating users // With Gatling 1.5.XsetUp(scn.users(10)…) // With Gatling 2.0setUp(scn.inject(atOnceUsers(10))…Migrating ramp // With Gatling 1.5.XsetUp(scn.users(10).ramp(30)…) // With Gatling 2.0setUp(scn.inject(rampUsers(10) over (30 seconds))…Migrating delay // With Gatling 1.5.XsetUp(scn.users(10).delay(5)…) // With Gatling 2.0setUp(scn.inject(nothingFor(5 seconds), atOnceUsers(10))…For more information on the new Injection DSL, please consult the Injection DSL reference documentation. CoreCheckswhatever has been renamed to optional. Structure ElementsThe first parameter of foreach is now an Expression (e.g. a Gatling EL string), not the name of the attribute to loop over.For example, if you have a list attribute in the user’s session holding a list of values: .foreach(“list”, “elem”) { …}becomes: .foreach(“${list}”, “elem”) { …}In asLongAs, exitASAP now defaults to true. For more information on the change of behaviour it introduces, see asLongAs documentation.SessionSession has been under major refactoring: session.get(“foobar”) becomes session(“foobar”)session.getTypedAttributeT becomes session(“foobar”).as[T]session.getAttributeAsOptionT becomes session(“foobar”).asOption[T]session.setAttribute(“foobar”, 1234) becomes session.set(“foobar”, 1234)session.setAttributes(Map(“foo” -&gt; 1, “bar” -&gt; 2) becomes session.setAll(“foo” -&gt; 1, “bar” -&gt; 2)session.removeAttribute(“foobar”) becomes session.remove(“foobar”)session.isAttributeDefined(“foobar”) becomes session.contains(“foobar”)HTTPProtocolHTTP protocol bootstrapper, httpProtocol, has been renamed to http. Query parametersRemoved Versions of queryParam and multivaluedQueryParam that took no other parameters than the key (resolving the value from the session, using the key’s name to find the attribute with the same name) have been removed. Modified multivaluedQueryParam can now resolve the values directly from the session, using Gatling’s EL. Form parameters (for POST requests)Renamed Methods for adding form parameters to the request have been renamed: param =&gt; formParammultiValuedParam =&gt; multivaluedFormParamRemoved Versions of queryParam and multivaluedQueryParam that took no other parameters than the key (resolving the value from the session, using the key’s name to find the attribute with the same name) have been removed. Modified multivaluedFormParam can now resolve the values directly from the session, using Gatling’s EL. Request bodiesScalate templates support has been dropped. ElFileBody (see below) is the best suited to replace your existing Scalate templates.The API for setting request bodies on request has changed. Instead of having several methods like body, fileBody and byteArrayBody, there is a now a single method, body(…) in which you set the type of body to send.Migrating .body(body) .body(body) has been replaced by .body(StringBody(body)). http(“my post request”) .post(“http://www.example.org“) .body(“Look Ma, I’m a request body !”)becomes: http(“my post request”) .post(“http://www.example.org“) .body(StringBody(“Look Ma, I’m a request body !”))Migrating .fileBody(filePath) .fileBody(filePath) has been replaced by .body(RawFileBody(filePath)). http(“my post request”) .post(“http://www.example.org“) .fileBody(“my_upload.xslx”)becomes: http(“my post request”) .post(“http://www.example.org“) .body(FileBody(“my_upload.xslx”))Migrating .fileBody(filePath, values) .fileBody(filePath, values) has been replaced by .body(ElFileBody(filePath)). values are now directly resolved from the virtual user’s session’s content. http(“my post request”) .post(“http://www.example.org“) .fileBody(“my_template.txt”, Map(“userName” -&gt; “user123”)becomes: http(“my post request”) .post(“http://www.example.org“) .body(ElFileBody(“my template.txt”))If my template.txt contains: Hi, my name is ${userName}and the virtual user’s session has an attribute userName set to user123, Then the effectively sent request body would be: Hi, my name is user123Migrating .byteArrayBody(byteArray) .byteArrayBody(byteArray) has been replaced by .body(ByteArrayBody(bytes)). http(“my post request”) .post(“http://www.example.org“) .byteArrayBody(Array(1, 2, 3, 4))becomes: http(“my post request”) .post(“http://www.example.org“) .body(ByteArrayBody(Array(1, 2, 3, 4)))For more information, see the Request bodies reference section. MiscExtendedResponse has been renamed into Response.requestInfoExtractor and responseInfoExtractor have been merged into a single extraInfoExtractor, which takes a ExtraInfo =&gt; List[Any] function.For more information on extraInfoExtractor, please refer to its documentation. Logssimulation.log has been redesigned. If you wrote your own specific simulation.log parser, you’ll need to migrate it to the new structure. RecorderUntil now, when setting up the Recorder, you had to setup two ports for the Recorder’s local proxy: one for HTTP, one for HTTPS. This is not needed anymore, as the Recorder handles itself the switch to an HTTPS connection if necessary, and only a single port needs to be specified. Maven PluginThe … and … configuration options have been removed. Should you want to select a specific simulation to run, you can use the … config option to do so. For more information, see the Maven plugin documentation. 从1.5迁移到2.0 全局变化gatling至少需要JDK7u6 提供新jdk针对的是bug修复、优化速度和打开优化速度,gatling现在至少需要JDK7u6(大约两年前已经发布)。Scala 2.10 gatling使用Scala 2.10。如果你使用Scala的IDE,确保您正在使用一个版本能与Scala 2.10兼容。gatling现在可用在Maven中央库 galtling版本现在可以使用Maven中央,以及快照部署在每个成功构建了 Travis CI Sonatype快照存储库。如果你是使用gatling的Maven插件,您不再需要添加pom.xml Excilys存储库。 package和GroupId变化 gatling的groupId和package现在io.gatling组件。你必须:更新您的构建脚本改变从com.excilys.ebi groupId gatling的依赖关系。gatling,io.gatling更新你的模拟来代替com.excilys.ebi。io.gatling更新你的模拟器来代替com.excilys.ebi.io.gatling部分通过引入io.gatling akka.util.duration 类 已经移植到 scala.concurrent.duration 包中。简单从 import akka.util.duration. 替换到 import scala.concurrent.duration.. import bootstrap. 和 import assertions. 现在不是必须的，已经被移除. import com.excilys.ebi.gatling.http.Headers.Names._ 现在不是必须的, headers 名字 直接使用HeaderNames. import com.excilys.ebi.gatling.http.Headers.Values._ 现在不是必须的, headers 值 直接使用HeaderValues. 协议设置协议已经不再配置场景,现在配置模拟器,使用协议的方法。 A 1.4.x-1.5.x 设置如下: setUp(scn.(…).protocolConfig(httpConfig)) Gatling 2.0将会这样设置: setUp(scn.(…)).protocols(httpConfig) Assertions 设置 assertThat方法已经被移除，assertions配置使用assertions以相同的方式作为协议.如下 setup(scn.(…).protocolConfig(httpConfig)) assertThat(global.responseTime.max.lessThan(1000)) 改变setup(scn.(…)) .protocols(httpConfig) .assertions(global.responseTime.max.lessThan(1000)新的DSL语言注入 通过用户、增长和延迟来配置你的场景注入剖面的方法已被拆除,取而代之的是一个完整的专用的DSL。 注入步骤现在使用注射方法配置可用的配置。 合并 users // With Gatling 1.5.XsetUp(scn.users(10)…) // With Gatling 2.0setUp(scn.inject(atOnceUsers(10))…合并 ramp // With Gatling 1.5.XsetUp(scn.users(10).ramp(30)…) // With Gatling 2.0setUp(scn.inject(rampUsers(10) over (30 seconds))…合并 delay // With Gatling 1.5.XsetUp(scn.users(10).delay(5)…) // With Gatling 2.0setUp(scn.inject(nothingFor(5 seconds), atOnceUsers(10))… 新注入的DSL的更多信息,请查阅注入DSL参考文档。 核心Checkswhatever 现在被改名为 optional. Structure Elements The first parameter of foreach is now an Expression (e.g. a Gatling EL string), not the name of the attribute to loop over. foreach现在是一个表达式的第一个参数(如gatling EL string),不是遍历属性的名称。 For example, if you have a list attribute in the user’s session holding a list of values: 例如,如果您有一个属性列表在用户的会话持有的值列表: .foreach(“list”, “elem”) { …}变为: .foreach(“${list}”, “elem”) { …}In asLongAs, exitASAP now defaults to true. For more information on the change of behaviour it introduces, see asLongAs documentation. 在 asLongAs exitASAP 现在默认设置是true.有关的行为改变的更多信息介绍,请看asLongAs文档。 Session 会话已经作为主要的重构: session.get(“foobar”) becomes session(“foobar”)session.getTypedAttributeT becomes session(“foobar”).as[T]session.getAttributeAsOptionT becomes session(“foobar”).asOption[T]session.setAttribute(“foobar”, 1234) becomes session.set(“foobar”, 1234)session.setAttributes(Map(“foo” -&gt; 1, “bar” -&gt; 2) becomes session.setAll(“foo” -&gt; 1, “bar” -&gt; 2)session.removeAttribute(“foobar”) becomes session.remove(“foobar”)session.isAttributeDefined(“foobar”) becomes session.contains(“foobar”) HTTP协议HTTP协议启动加载器、httpProtocol已经更名为HTTP。Query 参数移除版本的queryParam和multivaluedQueryParam,没有其他比的关键参数(解决会话中的值,使用关键的名字找到具有相同名称的属性)已被移除。 Modified multivaluedFormParam现在可以解决直接从会话值,使用gatling的EL。 Request bodies Scalate templates support has been dropped.对Scalate templates 支持已经放弃。 ElFileBody (如下) 是当前代替Scalate templates最佳方案 api的请求体的设置意境改变。现在用这几个方法来代替body fileBody byteArrayBody.现在有一个单独的方法。body(…)通过你设置的类型的body来发送。合并 .body(body) body(body) 已经被 .body(StringBody(body))代替. http(“my post request”) .post(“http://www.example.org“) .body(“Look Ma, I’m a request body !”)变成： http(“my post request”) .post(“http://www.example.org“) .body(StringBody(“Look Ma, I’m a request body !”)) 合并 .fileBody(filePath) .fileBody(filePath) 被 .body(RawFileBody(filePath))代替. http(“my post request”) .post(“http://www.example.org“) .fileBody(“my_upload.xslx”)becomes: http(“my post request”) .post(“http://www.example.org“) .body(FileBody(“my_upload.xslx”)) 合并 .fileBody(filePath, values) .fileBody(filePath, values) 已经被 .body(ElFileBody(filePath))代替.值现在直接解决虚拟用户会话的内容。 http(“my post request”) .post(“http://www.example.org“) .fileBody(“my_template.txt”, Map(“userName” -&gt; “user123”) 变为 http(“my post request”) .post(“http://www.example.org“) .body(ElFileBody(“my template.txt”)) 如果 template.txt 包含: Hi, my name is ${userName} 和虚拟用户的会话属性的用户名设置为user123, 然后将发送有效地请求主体:Hi, my name is user123 合并 .byteArrayBody(byteArray) .byteArrayBody(byteArray) 被 .body(ByteArrayBody(bytes))代替. http(“my post request”) .post(“http://www.example.org“) .byteArrayBody(Array(1, 2, 3, 4)) 变为： http(“my post request”) .post(“http://www.example.org“) .body(ByteArrayBody(Array(1, 2, 3, 4))) 更多有关信息,请参见请求机构引用部分。 MiscExtendedResponse已经重命名为响应。requestInfoExtractor和responseInfoExtractor已经合并成一个单一的extraInfoExtractor,ExtraInfo =&gt; List[Any] function.。在extraInfoExtractor的更多信息,请参阅文档。 Logssimulation.log 被重新设计。 If you wrote your own specific simulation.log parser, you’ll need to migrate it to the new structure.如果你写自己的simulation.log解析器,您需要它迁移到新结构 Recorder录制器Until now, 当你设置 Recorder时, 你必须设置两个端口记录器的当地代理:一个用于HTTP,HTTPS。 这再也不需要了, 因为record处理本身转向一个HTTPS连接如果必要,并且只需要指定一个单独的端口。","raw":null,"content":null,"categories":[],"tags":[{"name":"gatling","slug":"gatling","permalink":"http://yoursite.com/tags/gatling/"}]},{"title":"gatling官方文档翻译2","slug":"gatling2","date":"2016-06-02T14:37:03.000Z","updated":"2016-06-02T15:29:58.000Z","comments":true,"path":"2016/06/02/gatling2/","link":"","permalink":"http://yoursite.com/2016/06/02/gatling2/","excerpt":"","keywords":null,"text":"第二篇http://gatling.io/docs/2.2.1/whats_new/2.2.html What’s New in 2.2JDKGatling now requires JDK8. JVM default tuning uses G1 Garbage Collector, so we strongly advice you use a very up-to-date JDK, not early versions. CoreFeeder ShuffleYou can now shuffle a feeder content before enqueuing its content, see Feeder documentation for more details. AssertionsGatling now supports “per-million” assertions, similar to “percent” ones. Conditional Checks (since 2.2.1)It’s now possible to only perform a given check when a given condition is met. See Conditional Checks documentation for more details. HTTPNative TransportGatling is now based on Netty 4 that provide an optional native epoll-based NIO re-implementation (different from JDK NIO) which can give better throughput. This option is only available on Linux. See Netty documentation for more details. Gatling ships with the required jar, but the option is turned down by default. In order to enable it, set gatling.http.ahc.useNativeTransport to true in gatling.conf. OpenSSL SupportNetty 4 also provides a support for OpenSSL and BoringSSL. See Netty documentation for more details. Gatling doesn’t ship the required jar and it depends on your operating system and if you want static or dynamic binding. You’re expected to manually add the suited library to Gatling’s classpath. In order to enable it, set gatling.http.ahc.useOpenSsl to true in gatling.conf. Forms SupportYou can now use the form(“cssSelector”).saveAs(“myForm”) check to capture a Map[String, Seq[String]] of all the inputs of an HTML form at once. You can then feed them back to a later request. See HTTP request documentation for more details. Polling SupportGatling now supports HTTP polling, see HTTP polling documentation for more details. Hostname ResolutionBy default, virtual users now use a shuffled list of the DNS records Gatling gets from the JDK. If you use DNS round-robin, this will balance your virtual users amongst the nodes of a static cluster. Alternatively, you can enable perUserNameResolution on the HTTP protocol and have each virtual user perform DNS resolution on its own. This, way, your virtual users would be properly balanced if your cluster grows elastically under load. See HTTP protocol documentation for more details. We also support DNS fail-over, meaning that virtual users will try the next DNS record of they couldn’t connect to the first address. Hostname AliasingYou can bypass hostname resolution and define aliases in hostNameAliases on the HTTP protocol. See HTTP protocol documentation for more details. Local AddressesIt’s now possible to pass multiple local addresses to the HTTP protocol in localAddresses. See HTTP protocol documentation for more details. ReportsJUnit Format Report FileGatling now generates a JUNIt format report file based on the assertions in your simulation. This file is generated as /js/assertions.xml. Groups DurationYou can switch from Group cumulated response times to duration when generating the reports. See gatling.charting.useGroupDurationMetric option in gatling.conf Maven PluginThe Gatling Maven plugin now provides test and integration-test that are bound to the phases of the same name. It also now provides a useOldJenkinsJUnitSupport that exposes our JUnit file to Jenkins. At some point, we’ll provide a native support. 在2.2的新增了那些功能JDKgatling现在需要JDK8支持。 JVM默认调整使用G1垃圾收集器，因此我们强烈建议您升级到最新的JDK，而不是早期版本。 核心Feeder Shuffle（不会翻…）现在，You can now shuffle a feeder content before enqueuing its content，请参阅Feeder文档了解更多信息。 断言gatling现在支持“per-million”的断言，类似于“percent”。 条件检查（自2.2.1）现在只要当给定条件满足时就可以执行一个给定的检查。有关详细信息，请参阅条件检查文档。 HTTP本机传输虽然我也不知道 epoll-based NIO是什么。。。 gatling现在基于Netty 4提供一个可选的基于原生的epoll-NIO重新实现（从JDK NIO不同），它可以提供更好的吞吐量。此选项仅在Linux上可用。详见的Netty文档,了解更多信息。 gatling不需要携带需要的jar包，它取决于你的操作系统,如果你想要静态或动态绑定。你需要手动配置需要的jar的path到gatling的classpath。加特林附带所需的jar,但默认选项是关闭的。 为了启用它,设置gatling.http.ahc。在gatling.conf useNativeTransport为true。 为了启用他，需要在gatling.conf里将 gatling.http.ahc.useOpenSsl设置为true。 表单支持您现在可以使用的form(“cssSelector”).saveAs（“myForm”）检查捕捉Map[String, Seq[String]]在HTML表单的所有输入。 然后，您可以传递给以后的请求。见HTTP请求的文档了解更多信息。 轮训支持gatling现在支持HTTP轮询，请参阅HTTP轮询文档了解更多信息。 hostname解析默认情况下，, virtual users now use a shuffled list of the DNS records Gatling gets from the JDK. If you use DNS round-robin。如果您使用DNS循环，这将你的虚拟用户的静态群集的节点之间平衡。 或者，也可以在HTTP协议使用perUserNameResolution，并让每个虚拟用户自身进行DNS解析。这样，如果你的集群负载下的弹性增长时，你的虚拟用户会保持良好的平衡。见HTTP协议文档了解更多信息。 我们也支持DNS故障转移，这意味着虚拟用户会尝试下一个DNS记录，当他们无法连接到第一个地址时。 别名主机名您可以绕过主机名解析和HTTP协议定义hostNameAliases别名。见HTTP协议文档了解更多信息。 本地地址它现在可以将多个本地地址传递给在localAddresses HTTP协议。见HTTP协议文档了解更多信息。 报告JUnit的格式报告文件加特林现在根据你的模拟断言产成一个JUnit格式的报告文件。此文件将生成如/js/assertions.xml。 group持续时间您可以切换组累计响应时间当时间生成报告时。见gatling.conf gatling.charting.useGroupDurationMetric选项 Maven插件gatling Maven插件现在提供测试和集成测试绑定到同名的阶段。 它还现在提供一个公开的JUnit我们的文件，jenkins一useOldJenkinsJUnitSupport。在某些时候，我们将提供原生支持。","raw":null,"content":null,"categories":[],"tags":[{"name":"gatling","slug":"gatling","permalink":"http://yoursite.com/tags/gatling/"}]},{"title":"gatling官方文档翻译","slug":"gatling","date":"2016-05-31T06:56:38.000Z","updated":"2016-06-02T14:37:44.000Z","comments":true,"path":"2016/05/31/gatling/","link":"","permalink":"http://yoursite.com/2016/05/31/gatling/","excerpt":"","keywords":null,"text":"第一篇 http://gatling.io/docs/2.2.1/index.htmlGatling is a highly capable load testing tool. It is designed for ease of use, maintainability and high performance. Out of the box, Gatling comes with excellent support of the HTTP protocol that makes it a tool of choice for load testing any HTTP server. As the core engine is actually protocol agnostic, it is perfectly possible to implement support for other protocols. For example, Gatling currently also ships JMS support. The Quickstart has an overview of the most important concepts, walking you through the setup of a simple scenario for load testing an HTTP server. Having scenarios that are defined in code and are resource efficient are the two requirements that motivated us to create Gatling. Based on an expressive DSL, the scenarios are self explanatory. They are easy to maintain and can be kept in a version control system. Gatling’s architecture is asynchronous as long as the underlying protocol, such as HTTP, can be implemented in a non blocking way. This kind of architecture lets us implement virtual users as messages instead of dedicated threads, making them very resource cheap. Thus, running thousands of concurrent virtual users is not an issue. Migrating from a Previous Version of GatlingIf you’re migrating from Gatling 2.1 to Gatling 2.2, please check the dedicated migration guide.Otherwise, please follow the previous migration guides.User’s guideWhat’s NewMigration GuidesQuickstartAdvanced TutorialGeneralSessionHTTPJMSRealtime monitoringExtensionsCookbookInformation for Gatling DevelopersProject Information gatling是一个的高性能压力测试工具。它设计的初衷是易用性、可维护性和高性能。gatling开箱即用的,并且很好的支持HTTP协议,使其成为你测试任何HTTP服务器负载的工具选择之一。作为核心引擎实际上是协议无关,这是完全有可能实现并支持其他协议。例如,gatling目前还对JMS支持。 快速入门是对于最重要的概念有一个回顾,通过设置一个简单的场景的来对一个HTTP服务器完成负载测试。在代码中定义测试场景和资源利用率两方面的需求,激励我们创造gatling。基于可表述的DSL语言,所以场景易于叙述和理解的。他们很容易维护,并且可以保存在一个版本控制系统。 gatling的架构和底层协议均采用异步方式设计。比如HTTP、可以利用一个非阻塞的方式来实现。这种架构可以让我们实现虚拟用户的消息而不是专用的线程,让他们成为非常廉价资源。因此,运行数千并发虚拟用户不是什么问题。 从之前的版本中合并gatling 如果你从gatling2.1迁移到2.2gatling,请检查专用的合并指南。否则,请安装的合并指南。 用户手册 新事物 合并手册 快速入门 高级教程 通用 消息 Http JMS 实时监测 扩展 cookbook gatling 开发者信息 项目信息","raw":null,"content":null,"categories":[],"tags":[{"name":"性能测试","slug":"性能测试","permalink":"http://yoursite.com/tags/性能测试/"}]},{"title":"前端测试工具集锦","slug":"front-end-tools","date":"2016-05-24T12:47:35.000Z","updated":"2016-06-14T06:25:23.000Z","comments":true,"path":"2016/05/24/front-end-tools/","link":"","permalink":"http://yoursite.com/2016/05/24/front-end-tools/","excerpt":"","keywords":null,"text":"总结最近了解的前端测试的相关内容，发现前端这里真的是太庞大了，而且各种测试工具层出不穷，需要总结东西太多了，如有遗漏请大家见谅。 TDD vs BDD：TDD与BDD概念不再描述了，直奔主题。 前端BDD测试框架jasmineInstallation install -g jasmine1```&#10;Initializing&#10;To initialize a project for Jasmine&#10;&#10;```jasmine init To seed your project with some examples examples1```&#10;Usage&#10;To run your test suite&#10;``` jasmine 12345describe(\"A suite\", function() &#123; it(\"contains spec with an expectation\", function() &#123; expect(true).toBe(true); &#125;);&#125;); mocha(推荐,简洁明了) Installation Install with npm:1$ npm install -g mocha Getting Started123$ npm install -g mocha$ mkdir test$ $EDITOR test/test.js In your editor:123456789var assert = require('chai').assert;describe('Array', function() &#123; describe('#indexOf()', function () &#123; it('should return -1 when the value is not present', function () &#123; assert.equal(-1, [1,2,3].indexOf(5)); assert.equal(-1, [1,2,3].indexOf(0)); &#125;); &#125;);&#125;); you need to install chai.Back in the terminal:12345678910 $ mocha . ✔ 1 test complete (1ms)``` ### 前端TDD测试框架QunitInstallation $ npm i qunit 1234567891011121314151617181920212223242526272829303132333435363738API http://api.qunitjs.comQunit是一款强大的用于帮助调试代码的，JavaScript单元测试框架。QUnit由jQuery团队成员编写，是jQuery的官方测试套件，不仅如此，QUnit还可以测试任何常规JavaScript代码，甚至可以通过一些像Rhino或者V8这样的JavaScript引擎，测试服务端JavaScript代码。可以想象其跟jquery UI及jquery animation等库结局一样，逃脱不了各种被后来的库全方位的比较和“超越”.## Unit TestingMocha &amp;&amp; JasmineMocha 跟 Jasmine 是目前最火的两个单元测试框架，基本上目前前端单元测试就在这两个库之间选了，下面是这两个库的区别，大家可以根据自己的需求进行选择：mocha： 优点： 终端显示友好 灵活，扩展性好 缺点： 自身集成度不高（没有断言，spy，异步等），而且经常要配合Chai，Sinon等库使用 配置相对麻烦一点点Jasmine: 优点： 集成度高，自带BBD，spy，方便的异步支持(2.0) 配置方便 缺点： 相对不太灵活 由于各种功能内建，断言方式或者异步等风格相对比较固定 没有自带mockserver， 如果需要这功能的得另外配置jestJest 是Facebook的一个专门进行Javascript单元测试的工具.它是在Jasmine测试框架上演变开发而来，使用了我们熟知的expect(value).toBe(other) 这种断言格式。First install Jest with npm by running: npm install --save-dev jest-cli 12Great! Now let's get started by writing a test for a hypothetical sum.js file: function sum(a, b) { return a + b; } module.exports = sum; 1Create a directory __tests__/ with a file sum-test.js: jest.unmock(&apos;../sum&apos;); // unmock to use the actual implementation of sum describe(&apos;sum&apos;, () =&gt; { it(&apos;adds 1 + 2 to equal 3&apos;, () =&gt; { const sum = require(&apos;../sum&apos;); expect(sum(1, 2)).toBe(3); }); }); 1Add the following to your package.json: &quot;scripts&quot;: { &quot;test&quot;: &quot;jest&quot; } 1Run npm test: [PASS] __tests__/sum-test.js (0.010s) 12345678910111213141516171819202122## 代码覆盖率工具jscoverjscover是一个用来显示JavaScript项目代码覆盖率的工具，它是继承于JSCoverage的，用C++/SpiderMonkey 取代了Java/Rhino但是已经沦落到淘汰的边缘Istanbul(推荐目前最强大前端代码覆盖率工具)Istanbul 是 JavaScript 程序的代码覆盖率工具,能产生 Statements/Lines/Functions/Branches 等指标报表，并以各种格式导出。http://qaseven.github.io/2016/01/25/gulp_for_qa/ 这篇文章里已经详细介绍了。blanketjsblanketjs是一个易于安装,易于配置和易于使用的JavaScript代码覆盖库 对于nodejs和浏览器都支持的不错。NodeJS (Powered by Mocha)Install from npm. npm install blanket 123456789101112131415161718192021Make sure you require Blanket before you require or run any of the code you want covered require(\"blanket\")(&#123; /* optional options */ &#125;), require(\"src/myscripttotest\");Run your tests using mocha and take advantage of the json-cov and html-cov reporters to output the coverage results.## e2e testuiwebdriverio这个库是nodejs的一个webdriver模块(浏览器自动化)。你可以用它写超级简单Selenium测试在你最喜欢的BDD / TDD测试框架中,并且可以在本地运行或在云端中， Sauce Lab,BrowserStack或TestingBot。webdriverio 支持 Cucumber, Jasmine and Mocha+Chai 这些测试框架nightwatchNightwatch.js 是一个易于使用的，基于 Node.js 平台的浏览器自动化测试解决方案。它使用强大的 Selenium WebDriver API 来在 DOM 元素上执行命令和断言。 语法简单但很强大，使您可以快速编写测试。只需使用 Javascript 和 CSS 选择器，不需要初始化其他对象和类，您只需要编写测试规范。内置命令行测试运行器，使您能够运行整体测试，分组测试或者单个测试。 this.demoTestGoogle = function (browser) { browser .url(“http://www.google.com”) .waitForElementVisible(&apos;body&apos;, 1000) .setValue(&apos;input[type=text]&apos;, &apos;nightwatch&apos;) .waitForElementVisible(&apos;button[name=btnG]&apos;, 1000) .click(&apos;button[name=btnG]&apos;) .pause(1000) .assert.containsText(&apos;#main&apos;, &apos;The Night Watch&apos;) .end(); }; 123456当涉及异步调用时，基于链式的队列是个糟糕的模式CodeceptJSCodeceptJS是一个基于WebDriver全新的端到端测试框架。它们从用户角度简单描述用户操作步骤来编写测试脚本 Feature(&apos;CodeceptJS Demonstration&apos;); Scenario(&apos;test some forms&apos;, (I) =&gt; { I.amOnPage(&apos;http://simple-form-bootstrap.plataformatec.com.br/documentation&apos;); I.fillField(&apos;Email&apos;, &apos;hello@world.com&apos;); I.fillField(&apos;Password&apos;, &apos;123456&apos;); I.checkOption(&apos;Active&apos;); I.checkOption(&apos;Male&apos;); I.click(&apos;Create User&apos;); I.see(&apos;User is valid&apos;); I.dontSeeInCurrentUrl(&apos;/documentation&apos;); }); 12345protractor(angluarjs亲儿子，由angluarjs核心人物开发的e2e测试工具)protractor 是 AngularJS 团队构建的一个端对端的测试运行工具，模拟用户交互，帮助你验证你的Angular应用的运行状况。Protractor使用Jasmine测试框架来定义测试,当然你也可以选择其他测试框架来定义测试，如mocha。Protractor为不同的页面交互提供一套健壮的API。 var chai = require(&apos;chai&apos;); var chaiAsPromised = require(&apos;chai-as-promised&apos;); chai.use(chaiAsPromised); var expect = chai.expect; describe(&apos;angularjs 首页&apos;, function() { it(&apos;应该欢迎一个具名的用户&apos;, function() { //要求浏览器访问网址http://www.angularjs.org browser.get(&apos;http://www.angularjs.org&apos;); //找到ng-model名为&apos;youname&apos;的HTML元素，要求浏览器键入名字 element(by.model(&apos;yourName&apos;)).sendKeys(&apos;tanshuai&apos;); var greeting = element(by.binding(&apos;yourName&apos;)); //取得结果并作断言测试 expect(greeting.getText()).to.eventually.equal(&apos;Hello tanshuai!&apos;); }); }); 1234567891011## headlessPhantomJSPhantomJS 是一个基于 WebKit 的服务器端 JavaScript API。它全面支持web而不需浏览器支持，其快速，原生支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG。 PhantomJS 可以用于 页面自动化 ， 网络监测 ， 网页截屏 ，以及 无界面测试 等。很多其它的测试框架都是基于PhantomJS二次开发的,例如下面要讲的casperjs，nightmarenightmarenightmare是一个高级浏览器自动化依赖库。 var Nightmare = require(‘nightmare’); var expect = require(‘chai’).expect; // jshint ignore:line describe(&apos;test yahoo search results&apos;, function() { it(&apos;should find the nightmare github link first&apos;, function*() { var nightmare = Nightmare() var link = yield nightmare .goto(&apos;http://yahoo.com&apos;) .type(&apos;form[action*=&quot;/search&quot;] [name=p]&apos;, &apos;github nightmare&apos;) .click(&apos;form[action*=&quot;/search&quot;] [type=submit]&apos;) .wait(&apos;#main&apos;) .evaluate(function () { return document.querySelector(&apos;#main .searchCenterMiddle li a&apos;).href }) expect(link).to.equal(&apos;https://github.com/segmentio/nightmare&apos;); }); }); 1234casperjsCasperJS 是一个开源的导航脚本和测试工具，使用 JavaScript 基于 PhantomJS 编写，用于测试 Web 应用功能，Phantom JS是一个服务器端的 JavaScript API 的 WebKit。其支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG. var casper = require(‘casper’).create(); var fs = require(‘fs’) casper.start(‘https://github.com/login/‘); casper.waitForSelector(‘input.btn.btn-primary.btn-block’); // wait for the form node to be added casper.then(function() { this.fillSelectors(‘.auth-form-body’, { ‘#login_field’: ‘qileilove’, ‘#password’: ‘*‘ }); this.click(‘input.btn.btn-primary.btn-block’); // Click the login button instead of submitting the form this.echo(‘Browser Cookie: ‘ + this.evaluate(function() { return document.cookie; })); casper.run(function() { var cookies = JSON.stringify((this.page.cookies)); fs.write(&apos;cookie.txt&apos;, cookies, &apos;w&apos;); this.exit(); }); casper.wait(3000); // Wait for ajax form submission casper.then(function() { this.capture(&apos;logged-in.png&apos;) }); casper.run(); 123456## visual regression-testbackstopjsBackstopJS 是自动 CSS 回归测试工具，它通过比较不同视窗大小的 DOM 截图来回应你所测试的 Web 界面。可以识别出两个不同视角上的网页差异。 &quot;scenarios&quot;: [ { &quot;label&quot;: &quot;My Local Test&quot;, &quot;url&quot;: &quot;../../index.html&quot;, &quot;hideSelectors&quot;: [], &quot;removeSelectors&quot;: [ ], &quot;selectors&quot;: [ &quot;nav&quot;, &quot;.jumbotron&quot;, &quot;body .col-md-4:nth-of-type(1)&quot;, &quot;body .col-md-4:nth-of-type(2)&quot;, &quot;body .col-md-4:nth-of-type(3)&quot;, &quot;footer&quot; ], &quot;readyEvent&quot;: null, &quot;delay&quot;: 0, &quot;onReadyScript&quot;: null, &quot;onBeforeScript&quot;: null } ], 12345678910111213141516 viff 咱们公司的 基于selenium的，已经废了。。。 2年多没更新了 success Succss is a command line tool built to find image-based differences between website updates. Succss relies on npm and is installed globally. https://github.com/B2F/Succss 也一年没更新了.. phantomcssPhantomCSS 是 CSS 回归测试工具。一个通过 PhantomJS 或者 SlimerJS 和 Resemble.js 进行自动视觉回归测试的 CasperJS 模块。 casper. start( url ). then(function(){ // do something casper.click(&apos;button#open-dialog&apos;); // Take a screenshot of the UI component phantomcss.screenshot(&apos;#the-dialog&apos;, &apos;a screenshot of my dialog&apos;); }); 1234567891011121314151617181920212223242526##JavaScript验证工具eslintjshintjslint三者比较的文章https://www.sitepoint.com/comparison-javascript-linting-tools/## 前端mock工具Mock.js Mockjs是个能够拦截页面ajax请求并模拟返回数据的小工具，借助Mockjs，前端开发中在后台测试接口还没有给的时候就可以自己拦截请求模拟数据进行愉快的开发了，所以只要制定好了协议，前后端分离开发的成本可以降到基本为0，也不需要联调工具了。sinon.js为Javascript提供独立的spies，stubs和mocks。没有任何依赖，可以与任何单元测试框架协同工作。## api测试工具SuperTest基于SuperAgent ，提供对HTTP测试的高度抽象.能嵌入各类测试框架，提供语义良好的断言. var app = require(&apos;../app&apos;); var request = require(&apos;supertest&apos;); describe(&apos;router testing&apos;, function () { it(&apos;site root response&apos;, function (done) { request(app) .get(&apos;/&apos;) .expect(&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;) .expect(200) .end(function(err, res){ if (err) throw err; done(); }); }); ```利用Mocha + Chai + SuperTest就可以搭建一套 前端rest－api测试框架","raw":null,"content":null,"categories":[],"tags":[{"name":"前端测试","slug":"前端测试","permalink":"http://yoursite.com/tags/前端测试/"}]},{"title":"appium并发测试","slug":"appium","date":"2016-05-05T05:53:59.000Z","updated":"2016-05-24T13:05:42.000Z","comments":true,"path":"2016/05/05/appium/","link":"","permalink":"http://yoursite.com/2016/05/05/appium/","excerpt":"","keywords":null,"text":"appium 介绍Appium 是一个开源的，跨平台的自动化测试工具。 它支持模拟器（iOS，FirefoxOS，Android）和真机（iOS， Android， FirefoxOS）上的原生应用，混合应用和移动 web 应用。 appium 工作原理 Android在Android端，appium基于WebDriver协议，利用Bootstrap.jar，最后通过调⽤用UiAutomator的命令，实现App的自动化测试。 UiAutomator测试框架是Android SDK自带的App UI自动化测试Java库。 另外由于UiAutomator对H5的支持有限，appium引入了chromedriver以及safaridriver等来实现基于H5的自动化。 appium 在android端工作流 client端也就是我们 test script是我们的webdriver测试脚本。 中间是起的Appium的服务，Appium在服务端起了一个Server（4723端口），跟seleniumWebdriver测试框架类似， Appium⽀持标准的WebDriver JSONWireProtocol。在这里提供它提供了一套REST的接口,Appium Server接收web driver client标准rest请求，解析请求内容，调⽤用对应的框架响应操作。 appium server会把请求转发给中间件Bootstrap.jar ，它是用java写的，安装在手机上.Bootstrap监听4724端口并接收appium 的命令，最终通过调⽤用UiAutomator的命令来实现。 最后Bootstrap将执行的结果返回给appium server。 appium server再将结果返回给 appium client。 ios在IOS端，appium同样使⽤WebDriver的一套协议。 与Android端测试框架不同的是，appium ios封装了apple的 Instruments框架，主要用了Instrument里的UI Automation（Apple的⾃自动化测试框架），然后在设备中注⼊入bootstrap.js进⾏行监听。 appium 在ios端工作流 client端 依然是 test script是我们的webdriver测试脚本。 中间是起的Appium的服务，Appium在服务端起了一个Server（4723端口），跟seleniumWebdriver测试框架类似， Appium⽀持标准的WebDriver JSONWireProtocol。在这里提供它提供了一套REST的接口,Appium Server接收web driver client标准rest请求，解析请求内容，调⽤用对应的框架响应操作。 appium server调用instruments.js 启动⼀一个socket server，同时分出一个⼦子进程运⾏instruments.app，将bootstrap.js（一个UIAutomation脚本）注⼊入到device⽤于和外界进行交互 最后Bootstrap.js将执行的结果返回给appium server appium server再将结果返回给 appium client。 所以我们可以看到android与ios区别在于appium 将请求转发到bootstrap.js或者bootstrap.jar.然后由bootstrap 驱动UIAutomation和UiAutomator去devices上完成具体的动作。 appium 并发 关于appium并发，我将之分为2类，第一类单机并发。第二类基于selenium grid 多节点并发测试,也可称之为云测。 appium 单机并发Android并发测试Appium提供了在一台设备上启动多个Android会话的方案。 appium -p 4492 -bp 2251 -U 32456 启动多个Android会话的重要指令包括： 指令 功能 -p Appium的主要端口 -U 设备id -bp Appium bootstrap端口 –chromedriver-port chromedriver端口（当使用了webviews或者chrome） –selendroid-port selendroid端口（当使用了selendroid） iOS并发测试 不幸的是，IOS不能进行本地并发测试。跟Android不一样，IOS在同一时间只能启动一个版本的模拟器来运行多个测试。 总结:单机并发目前只能在android实现，且必须启动n个appium server 对应不同devices，这里devices可以是真机或模拟器。但是必须保证端口后没有重复使用。接下来工作就是利用测试框架(testng,jasmine,rspec,cucumber等)将测试分发到不同appium server上。 代码示例 github 代码解析： 首先让我们来看下代码中的AppiumParallelTest这个类，他们先判断操作系统，并获取操作系统上连接的devices。利用AndroidDeviceConfiguration.java 与 IOSDeviceConfiguration.java 中的getIOSUDID，getDevices方法分别获取真机与模拟器的id. 然后利用startAppiumServer方法启动appium server, 利用appiumServerForAndroid()或者appiumServerForIOS(). aa appium grid 分布式并发 start selenium grid sever 1java -jar selenium-server-standalone-2.47.1.jar -port 4444 -role hub -hub http://192.168.199.140:4444/grid/registe Registered appium server as the grid node 1appium --nodeconfig appium_node_S3.json -p 4823 -bp 3356 -U \"192.168.99.104:5555\" --chromedriver-port 4738 Configure the test script,run the tests 123456789@BeforeTest @Parameters(&#123;\"deviceName\"&#125;) public void setUp(String deviceName) throws Exception &#123; capabilities.setCapability(\"deviceName\",deviceName); capabilities.setCapability(\"platformVersion\", \"5.0\"); capabilities.setCapability(\"app\", getApp(\"ContactManager.apk\")); setUpAndroidDriver(); &#125; GRID NODE CONFIGURATION EXAMPLE JSON FILE12345678910111213141516171819202122232425&#123; \"capabilities\": [ &#123; \"deviceName\": \"192.168.56.101:5555\", \"browserName\": \"&lt;e.g._iPhone5_or_iPad4&gt;\", \"version\":\"&lt;version_of_iOS_e.g._7.1&gt;\", \"maxInstances\": 1, \"platform\":\"&lt;platform_e.g._MAC_or_ANDROID&gt;\" &#125; ], \"configuration\": &#123; \"cleanUpCycle\":2000, \"timeout\":30000, \"proxy\": \"org.openqa.grid.selenium.proxy.DefaultRemoteProxy\", \"url\":\"http://&lt;host_name_appium_server_or_ip-address_appium_server&gt;:&lt;appium_port&gt;/wd/hub\", \"host\": &lt;host_name_appium_server_or_ip-address_appium_server&gt;, \"port\": &lt;appium_port&gt;, \"maxSession\": 1, \"register\": true, \"registerCycle\": 5000, \"hubPort\": &lt;grid_port&gt;, \"hubHost\": \"&lt;Grid_host_name_or_grid_ip-address&gt;\" &#125;&#125; 未完待续","raw":null,"content":null,"categories":[],"tags":[{"name":"appium, mobile testing","slug":"appium-mobile-testing","permalink":"http://yoursite.com/tags/appium-mobile-testing/"}]},{"title":"前端性能分析优化","slug":"前端性能分析优化","date":"2016-02-23T13:05:28.000Z","updated":"2016-02-24T03:10:23.000Z","comments":true,"path":"2016/02/23/前端性能分析优化/","link":"","permalink":"http://yoursite.com/2016/02/23/前端性能分析优化/","excerpt":"","keywords":null,"text":"分析问题我们并不仅仅关注页面资源的解析和展示响应时间，而是要关注总时间；我们进行web前端性能测试的目的是计算出包含页面渲染、网络传输以及服务器端解析等综合因素在内的加载时间等指标，对该页面性能进行评估分析，找出影响性能的主要因素和瓶颈，并在此结果的基础上，给出一定的优化建议和解决方案，从而提升用户体验。 根据雅虎团队经验：网站页面性能优化的34条黄金守则，我们逐条分析。 性能黄金法则 只有10%-20%的最终用户响应时间花在接收请求的HTML文档上，剩下的80%-90%时间花在HTML文档所引用的所有组件(图片，script，css，flash等等)进行的HTTP请求上。 尽量减少HTTP请求次数 合并文件. 例如将项目中用的资源文件合并。所有的CSS文件都放入一个样式表中.或者将js文件合并压缩 利用gulp,grunt,webpack等构建工具将项目资源文件整合 利用CSS Sprites 减少图像请求. 通过使用合并图片，通过指定css的backgroud-image和backgroud-position来显示元素。 启用浏览器缓存 要利用浏览器缓存存储可缓存的资源 在HTTP标头中为静态资源设置有效期或最长存在时间，可指示浏览器从本地磁盘中加载以前下载的资源而不是从网络中加载。 减少DNS查找 DNS缓存 当客户端的DNS缓存为空时，DNS查找的数量与Web页面中唯一主机名的数量相等。减少唯一主机名的数量就可以减少DNS查找的数量。 使用内容分发网络 页面静态化,取决于发布系统 按页面内容划分域名，在合适的资源服务器上存放文件 避免404错误 避免内部无效的链接 避免重定向 压缩组件 精简Javascript和Css 尽量缩减页面大小 页面必须小于150K(不含图片） a) 静态文件是否gzip b) 图片是否压缩优化过 预处理 浏览器空闲时请求将来可能会用到的页面内容 无条件加载：触发onload事件时，直接加载额外的页面内容 有预期的加载：载入重新设计过的页面时使用预加载。 移除重复脚本 使iframe的数量最小 异步加载 js 开发规范 代码逻辑分层 避免全局变量 便于多人协作开发 各部分代码模块化，可以按需加载 利用requirejs和seajs等模块化工具加载 保持全局变量的清洁 可进行单元测试 参考 yahoo前端性能优化指南中文版 yahoo前端性能优化指南","raw":null,"content":null,"categories":[],"tags":[{"name":"性能测试","slug":"性能测试","permalink":"http://yoursite.com/tags/性能测试/"}]},{"title":"前端性能测试之分析篇","slug":"前端性能测试之分析篇","date":"2016-02-23T03:31:51.000Z","updated":"2016-02-23T07:43:46.000Z","comments":true,"path":"2016/02/23/前端性能测试之分析篇/","link":"","permalink":"http://yoursite.com/2016/02/23/前端性能测试之分析篇/","excerpt":"","keywords":null,"text":"引言前一章，我们讲了browser的工作原理,那么怎么样才能让了解整个主站前端的性能呢？监控！ 对，是的，我们可以利用各种工作对我们的website进行实时的监控,目前监控的方式有两种。 类型 优点 缺点 示例 非侵入式 指标齐全、客户端主动监测、竞品监控 无法知道性能影响用户数、采样少容易失真、无法监控复杂应用与细分功能 Pagespeed、yslow、PhantomJS、webpagetest、sitespeedio 侵入式 真实海量用户数据、能监控复杂应用与业务功能、用户点击与区域渲染 需插入脚本统计、网络指标不全、无法监控竞品 new relic、Google analyse、oneapm 前端性能分析工具那有哪些简易便利的工具能帮助我们更好的进行测试呢？ok，工具集锦来临。 浏览器插件类 FireBug它可以对页面进行调试，可以记录所有网页的访问耗时，下载的资源等 Page Speed Yslow page performance performance analyse 在线网站类 WebPageTest showslow sitespeed.io 平台类收费服务平台 google_analytics new relic oneapm 开源平台 InfluxDB + Grafana参考文章 InfluxDB + Grafana 快速搭建自己的 NewRelic，分析应用运行情况 OBIEE Monitoring and Diagnostics with InfluxDB and Grafana Nagios Zabbix","raw":null,"content":null,"categories":[],"tags":[{"name":"性能测试","slug":"性能测试","permalink":"http://yoursite.com/tags/性能测试/"}]},{"title":"前端性能测试分析","slug":"前端性能测试分析_原理篇","date":"2016-02-23T02:12:40.000Z","updated":"2016-02-23T03:28:31.000Z","comments":true,"path":"2016/02/23/前端性能测试分析_原理篇/","link":"","permalink":"http://yoursite.com/2016/02/23/前端性能测试分析_原理篇/","excerpt":"","keywords":null,"text":"原理篇browser工作原理web浏览器与web服务器之间通过HTTP协议进行通信的过程。所以，web C/S之间握手的协议就是HTTP协议。 页面的请求过程请求阶段 browser send url request 递归寻找DNS server 连接目标IP并建立TCP连接 向目标服务器发送http请求 web服务器接收请求后处理 web服务器返回相应的结果【无效、重定向、正确页面等】 浏览器接收返回的http内容 前端解析阶段渲染引擎—通过网络获得所请求文档的内容, 解析html以构建dom树-&gt;构建render树-&gt;布局render树-&gt;绘制render树 开始解析html文件，当然是自上而下，先是头部，后是body 当解析到头部css外部链接时，同步去下载，如果遇到外部js链接也是下载【不过js链接不建议放在头部，因为耽误页面第一展现时间】 接着解析body部分，边解析边开始生成对应的DOM树，同时等待css文件下载 一旦css文件下载完毕，那么就同步去用已经生成的DOM节点+CSS去生成渲染树 渲染树一旦有结构模型了，接着就会同步去计算渲染树节点的布局位置 一旦计算出来渲染的坐标后，又同步去开始渲染 4-6步进行过程中如果遇到图片则跳过去渲染下面内容，等待图片下载成功后会返回来在渲染原来图片的位置 同7步，如果渲染过程中出现js代码调整DOM树结构的情况，暂停其它渲染，再次重新来过，从修改DOM那步开始 最终所有节点和资源都会渲染完成 分析结束 渲染完成后开始page的onload事件 整个页面load完成 参考 浏览器工作原理","raw":null,"content":null,"categories":[],"tags":[{"name":"性能测试","slug":"性能测试","permalink":"http://yoursite.com/tags/性能测试/"}]},{"title":"前端测试进化论2","slug":"前端测试进化论2","date":"2016-01-26T10:01:07.000Z","updated":"2016-01-27T04:52:52.000Z","comments":true,"path":"2016/01/26/前端测试进化论2/","link":"","permalink":"http://yoursite.com/2016/01/26/前端测试进化论2/","excerpt":"","keywords":null,"text":"前端测试进化论2============= 说完了，前端技术的发展史，那么对应的前端测试发展史也随之发展。 石器时代——纯手工测试早期的页面基本都是静态化的页面，只有几个链接或者图片，那么相对测试工作量不大，只需要我们打开页面查看加载是否正确。 铁器时代–xunit到了javascript时代，随着其他语言xunit 风靡天下,js 也出现了它的xunit 框架。 Jsunit，以往在测试js的时候，都是以alert方式来检测错误，很不专业。 2001年 jsunit 出现，让js调试称为可能。 Jsunit 主要参考junit的设计，只要你会使用junit 那么jsunit 对你来说，根本不是什么事，具体使用参考 http://llying.iteye.com/blog/258605DEMO: 测试代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"&gt;&lt;HTML&gt; &lt;HEAD&gt; &lt;TITLE&gt;testHtml&lt;/TITLE&gt; &lt;/HEAD&gt;&lt;script type=\"text/javascript\" src=\"myjs.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"jsunit\\app\\jsUnitCore.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt;&lt;!--function testAdd()&#123; var result = add(arg1,arg2); warn(\"result\", result); debug(\"result\", result); info(\"result\", result); assertEquals(6,result);&#125;function testMinus()&#123; var result = minus(arg1,arg2) assertEquals(2,result);&#125;function testMultiply()&#123; var result = multiply(arg1,arg2) assertEquals(8,result);&#125;function testDivide()&#123; var result = divide(arg1,arg2) assertEquals(\"4 divide 2 is 2\",2,result);&#125;function setUpPage()&#123; arg1 = 4; arg2 = 2; setUpPageStatus = \"complete\";&#125;function exposeTestFunctionNames()&#123; var tests = new Array(); tests[0]=\"testAdd\"; tests[1]=\"testMinus\"; tests[2]=\"testMultiply\"; return tests;&#125;//--&gt;&lt;/SCRIPT&gt; &lt;BODY&gt; &lt;/BODY&gt;&lt;/HTML&gt; 测试驱动 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"&gt;&lt;HTML&gt; &lt;HEAD&gt; &lt;TITLE&gt;suit test&lt;/TITLE&gt; &lt;/HEAD&gt;&lt;script type=\"text/javascript\" src=\"jsunit\\app\\jsUnitCore.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt;&lt;!--function suite()&#123; var testSuite = new top.jsUnitTestSuite(); //增加的测试页面的路径是相对于测试运行器的路径的（testRunner.html），而不是相对于当前的页面 testSuite.addTestPage(\"../mytest1.html\"); //套件里还可以在包含套件 testSuite.addTestSuite(Suite2()); return testSuite;&#125;function Suite2() //需要与suite定义在同一个页面中&#123; var testSuite = new top.jsUnitTestSuite(); testSuite.addTestPage(\"../mytest2.html\"); return testSuite;&#125;//--&gt;&lt;/SCRIPT&gt; &lt;BODY&gt; &lt;/BODY&gt;&lt;/HTML&gt; http://www.jsunit.net/ 工业革命–ajax流行随着ajax的流行，jquery框架在前端开发中的普及，让开发者看到了前端的新纪元，jquery 团队也为广大开发人员开发了Qunit.QUnit 是一款强大而且容易使用的JavaScript 测试框架，它被用于jQuery 与其插件的测试，同时它也同样可以测试普通的JavaScript 代码. TDD的时代来临 QUnit框架版本将要被测试的代码需要添加到myProject.js中，并且你的测试用例应该插入到myTest.js。要运行这些测试，只需在一个浏览器中打开这个html文件。现在需要写一些测试用例了。 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;QUnit Test Suite&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"http://github.com/jquery/qunit/raw/master/qunit/qunit.css\" mce_href=\"http://github.com/jquery/qunit/raw/master/qunit/qunit.css\" type=\"text/css\" media=\"screen\"&gt; &lt;mce:script type=\"text/javascript\" src=\"http://github.com/jquery/qunit/raw/master/qunit/qunit.js\" mce_src=\"http://github.com/jquery/qunit/raw/master/qunit/qunit.js\"&gt;&lt;/mce:script&gt; &lt;!-- Your project file goes here --&gt; &lt;mce:script type=\"text/javascript\" src=\"myProject.js\" mce_src=\"myProject.js\"&gt;&lt;/mce:script&gt; &lt;!-- Your tests file goes here --&gt; &lt;mce:script type=\"text/javascript\" src=\"myTests.js\" mce_src=\"myTests.js\"&gt;&lt;/mce:script&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 id=\"qunit-header\"&gt;QUnit Test Suite&lt;/h1&gt; &lt;h2 id=\"qunit-banner\"&gt;&lt;/h2&gt; &lt;div id=\"qunit-testrunner-toolbar\"&gt;&lt;/div&gt; &lt;h2 id=\"qunit-userAgent\"&gt;&lt;/h2&gt; &lt;ol id=\"qunit-tests\"&gt;&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt; 参考http://www.cnblogs.com/nuaalfm/archive/2010/02/26/1674235.htmlhttp://qunitjs.com/ 现代化技术-BBD紧着angluar react 等框架大行其道的同时，bdd也在开发中兴起，基于bdd的测试框架开始在前端如雨后春笋般冒出,jasmine,mocha,karma都是其中的代表，但是各得其道，到底谁好，没惹能说得清楚。但google 在前端测试的贡献，绝对是业界良心。 http://jasmine.github.io/ https://karma-runner.github.io/0.13/index.html https://mochajs.org/ 这些框架本人就不举列子了，会在以后的篇章里面一一介绍。 前端的未来未来，我希望有一种框架能够解救苦逼的qa,简单的语法与api，使得我们能够处理所有前端框架而不用考虑控件问题，良好的性能，支持并发，跑ui和单元测试都在秒级，当然越快越好，最好能够自动更新ui自动化中页面对象的路径等等。也许只是个梦。Qa 还需努力。","raw":null,"content":null,"categories":[],"tags":[]},{"title":"前端测试进化论","slug":"前端测试进化论","date":"2016-01-25T07:36:44.000Z","updated":"2016-01-26T09:55:06.000Z","comments":true,"path":"2016/01/25/前端测试进化论/","link":"","permalink":"http://yoursite.com/2016/01/25/前端测试进化论/","excerpt":"","keywords":null,"text":"前端测试进化论第一篇web 发展史这篇主要是帮助我们qa 了解前端的历史与现状。 测试工程师大部分时间可能关注的是feature正确性，而对于前端代码级别的测试基本没有关心过，随着各种前端框架在web和移动端大行其道，绽放各种高大上的功能时，我们渐渐的发现前端代码级别问题逐渐暴露出来，甚至超越后端之势。那么问题来了，为什么以前这种现象出现呢？我们现来看看前端技术发展史。 ##石器时代——开荒阶段 带有简单逻辑的界面最早期的Web界面基本都是在互联网上使用，而且基本都是静态页面展示，人们浏览某些内容，填写几个表单并且提交。当时的界面以浏览为主，基本都是HTML代码，我们来看一个最简单的HTML文件：123456789&lt;html&gt; &lt;head&gt; &lt;title&gt;开荒时代&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;静态页面&lt;/h1&gt; &lt;p&gt;这是个测试&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 带有简单逻辑的界面接下来我们发现使用一些工具可以帮助我们做一些业务处理，这时javascript到来了，开始大放异彩。这时的代码的组织比较简单，而且CSS的运用也是比较少的。譬如：下面这个文档将带有一段JavaScript代码，用于拼接两个输入框中的字符串，并且弹出窗口显示。1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript时代&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;input id=\"firstNameInput\" type=\"text\" /&gt; &lt;input id=\"lastNameInput\" type=\"text\" /&gt; &lt;input type=\"button\" onclick=\"greet()\" /&gt; &lt;script language=\"JavaScript\"&gt; function greet() &#123; var firstName = document.getElementById(\"firstNameInput\").value; var lastName = document.getElementById(\"lastNameInput\").value; alert(\"Hello, \" + firstName + \".\" + lastName); &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 结合了服务端技术的混合编程由于静态界面不能实现保存数据等功能，出现了很多服务端技术，早期的有CGI（Common Gateway Interface，多数用C语言或者Perl实现的），ASP（使用VBScript或者JScript），JSP（使用Java），PHP等等，Python和Ruby等语言也常被用于这类用途。 1234567891011121314151617&lt;html&gt;&lt;head&gt;&lt;title&gt;Using GET Method to Read Form Data&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt;&lt;h1&gt;Using GET Method to Read Form Data&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;First Name:&lt;/b&gt; &lt;%= request.getParameter(\"first_name\")%&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Last Name:&lt;/b&gt; &lt;%= request.getParameter(\"last_name\")%&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 铁器时代—Ajax席卷全世界AJAX由于Ajax的出现，规模更大，效果更好的Web程序逐渐出现，在这些程序中，JavaScript代码的数量迅速增加。出于代码组织的需要，“JavaScript框架”这个概念逐步形成。 JavaScript基础库—jqueryPrototype框架主要是为JavaScript代码提供了一种组织方式，对一些原生的JavaScript类型提供了一些扩展，比如数组、字符串，又额外提供了一些实用的数据结构，如：枚举，Hash等，除此之外，还对dom操作，事件，表单和Ajax做了一些封装。 Mootools框架的思路跟Prototype很接近，它对JavaScript类型扩展的方式别具一格，所以在这类框架中，经常被称作“最优雅的”对象扩展体系。从这两个框架的所提供的功能来看，它们的定位是核心库，在使用的时候一般需要配合一些外围的库来完成。 jQuery与这两者有所不同，它着眼于简化DOM相关的代码。 DOM的选择 jQuery提供了一系列选择器用于选取界面元素，在其他一些框架中也有类似功能，但是一般没有它的简洁、强大。 12345$(\"*\") //选取所有元素$(\"#lastname\") //选取id为lastname的元素$(\".intro\") //选取所有class=\"intro\"的元素$(\"p\") //选取所有&amp;lt;p&amp;gt;元素$(\".intro.demo\") //选取所有 class=\"intro\"且class=\"demo\"的元素 链式表达式 在jQuery中，可以使用链式表达式来连续操作dom，比如下面这个例子： 1$(\"p.neat\").addClass(\"ohmy\").show(\"slow\"); 除此之外，jQuery还提供了一些动画方面的特效代码，也有大量的外围库，比如jQuery UI这样的控件库，jQuery mobile这样的移动开发库等等。 模块代码加载方式–Requirejs以上这些框架提供了代码的组织能力，但是未能提供代码的动态加载能力。动态加载JavaScript为什么重要呢？因为随着Ajax的普及，jQuery等辅助库的出现，Web上可以做很复杂的功能，因此，单页面应用程序（SPA，Single Page Application）也逐渐多了起来。 单个的界面想要做很多功能，需要写的代码是会比较多的，但是，并非所有的功能都需要在界面加载的时候就全部引入，如果能够在需要的时候才加载那些代码，就把加载的压力分担了，在这个背景下，出现了一些用于动态加载JavaScript的框架，也出现了一些定义这类可被动态加载代码的规范。 在这些框架里，知名度比较高的是RequireJS，它遵循一种称为AMD（Asynchronous Module Definition）的规范。例如下列是一个js代码保存为adder.js文件1234567define([\"math\"], function(math) &#123; return &#123; addTen : function(x) &#123; return math.add(x, 10); &#125; &#125;;&#125;); 当我们需要使用这个模块时，我们只需引入就好 123456&lt;script src=\"require.js\"&gt;&lt;/script&gt;&lt;script&gt; require([\"adder\"], function(adder) &#123; //使用这个adder &#125;);&lt;/script&gt; RequireJS除了提供异步加载方式，也可以使用同步方式加载模块代码。AMD规范除了使用在前端浏览器环境中，也可以运行于nodejs等服务端环境，nodejs的模块就是基于这套规范定义的。（修订，这里弄错了，nodejs是基于类似的CMD规范的） 工业革命—前端框架这个时期，随着Web端功能的日益复杂，人们开始考虑这样一些问题： • 如何更好地模块化开发 • 业务数据如何组织 • 界面和业务数据之间通过何种方式进行交互 在这种背景下，出现了一些前端MVC、MVP、MVVM框架，我们把这些框架统称为MV*框架。这些框架的出现，都是为了解决上面这些问题，具体的实现思路各有不同，主流的有Backbone，AngularJS，Ember，Spine等等，本文主要选用Backbone和AngularJS来讲述以下场景。 数据模型在这些框架里，定义数据模型的方式与以往有些差异，主要在于数据的get和set更加有意义了，比如说，可以把某个实体的get和set绑定到RESTful的服务上，这样，对某个实体的读写可以更新到数据库中。另外一个特点是，它们一般都提供一个事件，用于监控数据的变化，这个机制使得数据绑定成为可能。在一些框架中，数据模型需要在原生的JavaScript类型上做一层封装，比如Backbone的方式是这样：1234567891011121314151617181920212223242526var Todo = Backbone.Model.extend(&#123; // Default attributes for the todo item. defaults : function() &#123; return &#123; title : \"empty todo...\", order : Todos.nextOrder(), done : false &#125;; &#125;, // Ensure that each todo created has `title`. initialize : function() &#123; if (!this.get(\"title\")) &#123; this.set(&#123; \"title\" : this.defaults().title &#125;); &#125; &#125;, // Toggle the 'done' state of this todo item. toggle : function() &#123; this.save(&#123; done : !this.get(\"done\") &#125;); &#125;&#125;); 控制器在Backbone中，是没有独立的控制器的，它的一些控制的职责都放在了视图里，所以其实这是一种MVP（Model View Presentation）模式，而AngularJS有很清晰的控制器层。 还是以这个todo为例，在AngularJS中，会有一些约定的注入，比如$scope，它是控制器、模型和视图之间的桥梁。在控制器定义的时候，将$scope作为参数，然后，就可以在控制器里面为它添加模型的支持。12345678910111213141516171819202122232425262728293031323334function TodoCtrl($scope) &#123; $scope.todos = [&#123; text : 'learn angular', done : true &#125;, &#123; text : 'build an angular app', done : false &#125;]; $scope.addTodo = function() &#123; $scope.todos.push(&#123; text : $scope.todoText, done : false &#125;); $scope.todoText = ''; &#125;; $scope.remaining = function() &#123; var count = 0; angular.forEach($scope.todos, function(todo) &#123; count += todo.done ? 0 : 1; &#125;); return count; &#125;; $scope.archive = function() &#123; var oldTodos = $scope.todos; $scope.todos = []; angular.forEach(oldTodos, function(todo) &#123; if (!todo.done) $scope.todos.push(todo); &#125;); &#125;;&#125; 视图在这些主流的MV*框架中，一般都提供了定义视图的功能。在Backbone中，是这样定义视图的： 12345678910111213141516171819202122232425262728293031323334353637383940// The DOM element for a todo item...var TodoView = Backbone.View.extend(&#123; //... is a list tag. tagName : \"li\", // Cache the template function for a single item. template : _.template($('#item-template').html()), // The DOM events specific to an item. events : &#123; \"click .toggle\" : \"toggleDone\", \"dblclick .view\" : \"edit\", \"click a.destroy\" : \"clear\", \"keypress .edit\" : \"updateOnEnter\", \"blur .edit\" : \"close\" &#125;, // The TodoView listens for changes to its model, re-rendering. Since there's // a one-to-one correspondence between a **Todo** and a **TodoView** in this // app, we set a direct reference on the model for convenience. initialize : function() &#123; this.listenTo(this.model, 'change', this.render); this.listenTo(this.model, 'destroy', this.remove); &#125;, // Re-render the titles of the todo item. render : function() &#123; this.$el.html(this.template(this.model.toJSON())); this.$el.toggleClass('done', this.model.get('done')); this.input = this.$('.edit'); return this; &#125;, //...... // Remove the item, destroy the model. clear : function() &#123; this.model.destroy(); &#125;&#125;); 参考文献：http://any9.com/1524.htmlhttp://blog.jobbole.com/45169/http://blog.jobbole.com/45170/http://blog.jobbole.com/41988/我毕竟不是一个前端dev，有所疏漏尽请原谅，还有转载和抄录了一些人的blog 也请大家谅解，只是想写一些前端的文章给qa用。","raw":null,"content":null,"categories":[],"tags":[{"name":"front-end","slug":"front-end","permalink":"http://yoursite.com/tags/front-end/"}]},{"title":"gulp_for_qa","slug":"gulp_for_qa","date":"2016-01-25T07:13:20.000Z","updated":"2016-01-25T07:17:22.000Z","comments":true,"path":"2016/01/25/gulp_for_qa/","link":"","permalink":"http://yoursite.com/2016/01/25/gulp_for_qa/","excerpt":"","keywords":null,"text":"gulp 介绍 什么是gulp?这和我们qa有什么关系？Gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。入门指南 全局安装 gulp： 1$ npm install --global gulp 作为项目的开发依赖（devDependencies）安装： 1$ npm install --save-dev gulp 在项目根目录下创建一个名为 gulpfile.js 的文件： 12345var gulp = require('gulp');gulp.task('default', function() &#123; // 将你的默认的任务代码放在这&#125;); 运行 gulp： 1$ gulp 默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。想要单独执行特定的任务（task），请输入 gulp 。 官网:http://www.gulpjs.com.cn/docs/getting-started/ gulp api 非常简单，只有5个task，run，watch，src，和dest. 是的 你只需要搞懂这5个api 完全够用。 Gulp 能帮助我们更好更快的进行测试，制定标准等工作。 eslintJavascript代码验证工具,这种工具可以检查你的代码并提供相关的代码改进意见最大卖点，可以通过插件实现自定义规则 例如 gc 这边用的angluar https://www.npmjs.com/package/eslint-plugin-angular 使用npm 安装jslint 插件 1$ npm install gulp-eslint --save-dev 配置 .eslintrc文件 设置js规范的文件 1234567891011121314151617&#123; \"env\": &#123; \"browser\": true, &#125;, \"globals\": &#123; \"angular\": true, &#125;, \"rules\": &#123; \"camelcase\": 2, \"curly\": 2, \"brace-style\": [2, \"1tbs\"], \"quotes\": [2, \"single\"], \"semi\": [2, \"always\"], \"space-in-brackets\": [2, \"never\"], \"space-infix-ops\": 2, &#125;&#125; 配置 gulpfile 123456789var eslint = require('gulp-eslint')gulp.task('lint', function() &#123; return gulp.src(path.JS) .pipe(eslint()) .pipe(eslint.format());&#125;);$ gulp lint 参考：运行 gulp lint 命令 http://www.jianshu.com/p/c599185a0d84 jshint jslint jscs eslint的对比 http://developer.51cto.com/art/201506/481510.htmhttp://www.sitepoint.com/comparison-javascript-linting-tools/ ##browersync Browsersync能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试。您可以想象一下：“假设您的桌子上有pc、ipad、iphone、android等设备，同时打开了您需要调试的页面，当您使用browsersync后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。无论您是前端还是后端工程师，使用它将提高您30%的工作效率。 1$ npm install browser-sync gulp --save-dev 配置gulpfile123456789101112131415161718192021222324252627282930313233343536373839var path = &#123; HTML : \"html/*.html\", LESS : \"less/*.less\", CSS : \"css/*.css\", JS : \"js/*.js\" &#125;;gulp.task(\"serve\", [\"less\", \"js-watch\", \"html\"], function() &#123; browserSync.init(&#123; server : \"./\" &#125;); gulp.watch(path.LESS, [\"less\"]); gulp.watch(path.JS, [\"js-watch\"]); gulp.watch(path.HTML, [\"html\"]); gulp.watch(path.HTML).on(\"change\", function() &#123; browserSync.reload; &#125;);&#125;);gulp.task(\"less\", function() &#123; gulp.src(path.LESS) .pipe(less()) .pipe(gulp.dest(path.CSS)) .pipe(browserSync.stream());&#125;)gulp.task(\"js-watch\", function() &#123; gulp.src(path.JS) .pipe(browserSync.stream());&#125;)gulp.task(\"html\", function() &#123; gulp.src(path.HTML) .pipe(browserSync.stream());&#125;) 运行命令就可以看到代码变更对不同浏览器页面造成的影响了。 参考文档http://www.browsersync.cn/docs/gulp/ 开启代理模式123browser-sync start --proxy \"http://localhost:3000/products/voip-phones/yealink-t20p\" --host \"http://localhost:3001/products/voip-phones/yealink-t20p\" gulp-istanbul ##Istanbul 是 JavaScript 程序的代码覆盖率工具• 行覆盖率（line coverage）：是否每一行都执行了？ • 函数覆盖率（function coverage）：是否每个函数都调用了？ • 分支覆盖率（branch coverage）：是否每个if代码块都执行了？ • 语句覆盖率（statement coverage）：是否每个语句都执行了？ 配置gulpfile文件123456789101112131415161718gulp.task('pre-test', function () &#123; return gulp.src(['js/*.js']) // Covering files .pipe(istanbul()) // Force `require` to return covered files .pipe(istanbul.hookRequire());&#125;);gulp.task('test', ['pre-test'], function () &#123; return gulp.src(['test/*.js']) .pipe(mocha()) // Creating the reports after tests ran .pipe(istanbul.enforceThresholds(&#123; thresholds: &#123; global: 90 &#125; &#125;)) .pipe(istanbul.writeReports(&#123; dir: './assets/unit-test-coverage', reporters: [ 'lcov' ], reportOpts: &#123; dir: './assets/unit-test-coverage'&#125; &#125;));&#125;); 运行gulp 命令 ####参考：http://www.ruanyifeng.com/blog/2015/06/istanbul.html http://blog.oskoui-oskoui.com/?p=8478 https://github.com/SBoudrias/gulp-istanbul ##所有例子用的repohttps://github.com/qileilove/gulp_qa","raw":null,"content":null,"categories":[],"tags":[{"name":"gulp","slug":"gulp","permalink":"http://yoursite.com/tags/gulp/"}]}]}