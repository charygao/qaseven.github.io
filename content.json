{"meta":{"title":"QA seven's blog","subtitle":null,"description":"小qa 在thoughtworks苦苦挣扎中","author":"qi lei","url":"http://yoursite.com"},"pages":[{"title":"about me","date":"2017-03-21T07:45:22.000Z","updated":"2017-05-04T07:46:22.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"author石头 companythoughtworks rolesQA dev…."},{"title":"tags","date":"2017-09-21T07:51:39.000Z","updated":"2017-09-21T09:28:09.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"小QA学习前端系列之vue模板","slug":"vue2","date":"2017-10-18T03:30:15.000Z","updated":"2017-10-18T06:29:02.000Z","comments":true,"path":"2017/10/18/vue2/","link":"","permalink":"http://yoursite.com/2017/10/18/vue2/","excerpt":"","text":"小QA学习前端系列之vue模板之前我们已经学习vue实例，已经理解如何初始化一个vue实例，以及实例中数据与方法使用，还了解生命周期，那接下来我要学习vue模板 插值文本使用“Mustache”语法 (双大括号) 的文本插值1&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt; 原始 HTML双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML ，你需要使用 v-html 指令1&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt; 这个标签可能导致xss攻击 特性Mustache 语法不能作用在 HTML 特性上，遇到这种情况应该使用 v-bind 指令例如 id class 等 1&lt;div v-bind:id=\"TEST\"&gt;&lt;/div&gt; 可以 省略前面的v-bind 直接使用:id 使用 JavaScript 表达式用在v-bind中123456789101112131415161718&lt;div id=\"app\"&gt; &lt;span class=\"box\" :style=\"[isA?styleA:'', styleB]\"&gt;我是字&lt;/span&gt;&lt;/div&gt;&lt;script&gt;new Vue(&#123; el: \"#app\", data:&#123; styleA:&#123; fontSize: '30px', color: 'red' &#125;, styleB:&#123; textShadow: '5px 2px 6px #000' &#125;, isA: false &#125;&#125;)&lt;/script&gt; 用在Mustache中1&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125; 有个限制就是，每个绑定都只能包含单个表达式 指令指令 (Directives) 是带有 v- 前缀的特殊属性。v-text 预期：string 详细： 更新元素的 textContent。如果要更新部分的 textContent ，需要使用 {{ Mustache }} 插值。 示例： 1234&lt;span v-text=\"msg\"&gt;&lt;/span&gt;&lt;!-- 和下面的一样 --&gt;&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt; v-show 预期：any 用法： 根据表达式之真假值，切换元素的 display CSS 属性。 当条件变化时该指令触发过渡效果。 v-if 预期：any 用法： 根据表达式的值的真假条件渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。如果元素是 &lt;template&gt; ，将提出它的内容作为条件块。 当条件变化时该指令触发过渡效果。 参数一些指令能够接收一个“参数”，在指令名称之后以冒号表示。 在这里 href 是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定。另一个例子是 v-on 指令，它用于监听 DOM 事件： 在这里参数是监听的事件名。 修饰符修饰符 (Modifiers) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()： 缩写v- 前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。v-bind 缩写 1234&lt;!-- 完整语法 --&gt;&lt;a v-bind:href=\"url\"&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;&lt;a :href=\"url\"&gt;&lt;/a&gt; v-on 缩写12345&lt;!-- 完整语法 --&gt;&lt;a v-on:click=\"doSomething\"&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;&lt;a @click=\"doSomething\"&gt;&lt;/a&gt; ok 今天主要介绍基本的模板语法，其实还有一些语法没有解释，根据官方文档咱们一步一步来","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}],"keywords":[]},{"title":"小QA学习前端系列之vue实例","slug":"vue","date":"2017-10-17T02:35:18.000Z","updated":"2017-10-17T14:49:36.000Z","comments":true,"path":"2017/10/17/vue/","link":"","permalink":"http://yoursite.com/2017/10/17/vue/","excerpt":"","text":"小QA学习前端系列之vue实例不管是学习任何语言和框架，或者工具，都应该先把官方文档略读一遍，之后找个demo项目，开始看代码，然后照着人家的demo 敲一遍，基本上就入门，我是笨人，这是我认为学习效率最高的方式。API:https://cn.vuejs.org/v2/api/#v-bind 啥是vue就是一个前端框架，他吸收了react的优点例如： 1. 使用 Virtual DOM 2. 提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。 3. 将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。 同时它也融合了AngularJS 的一些优点 1. 数据绑定 2. 指令与组件 还有其他的一些优秀框架例如konckout等详细内容大家可以看https://cn.vuejs.org/v2/guide/comparison.html 生命周期现在的软件设计都利用了生命周期概念，帮助在开发者在开发中更好的处理数据，例如Android的生命周期，React的生命周期。VUE大概的流程如下1234beforeCreateed()-&gt; created()-&gt;beforeMount()-&gt;mounted()&#123;-&gt;beforeUpdate()-&gt;updated()&#125;-&gt;beforeDestroy()-&gt;destroyed()我们先大致了解下 vue 的生命周期，这对于以后我们看别人的代码有很大好处 开始实践vue实例创建vue实例 123var vm = new Vue(&#123; // 选项&#125;) 数据与方法data 对象中能找到的所有的属性。值得注意的是只有当实例被创建时 data 中存在的属性是响应式的。所以后面添加的属性 都无效Vue 实例暴露了一些有用的实例属性与方法。都有前缀$1234567891011var data = &#123; a: 1 &#125;var vm = new Vue(&#123; el: '#example', data: data&#125;)vm.$data === data // =&gt; truevm.$el === document.getElementById('example') // =&gt; true// $watch 是一个实例方法vm.$watch('a', function (newValue, oldValue) &#123; // 这个回调将在 `vm.a` 改变后调用&#125;) 具体的API如下https://cn.vuejs.org/v2/api/#实例属性因为我已经熟悉了node与webpack，所以直接上vue-cli 初始化项目不熟悉的同学 还是建议在https://jsfiddle.net/chrisvfritz/50wL7mdz/这个模板下学习OK 第一节完毕 明天继续按着文档看模板语法","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}],"keywords":[]},{"title":"小QA学习前端系列之练习实践vuex-shopping-cart","slug":"vuex-shopping-cart","date":"2017-10-15T14:29:44.000Z","updated":"2017-10-17T14:50:22.000Z","comments":true,"path":"2017/10/15/vuex-shopping-cart/","link":"","permalink":"http://yoursite.com/2017/10/15/vuex-shopping-cart/","excerpt":"","text":"小QA学习前端系列之练习实践vuex-shopping-cart代码地址https://github.com/vuejs/vuex/tree/dev/examples/shopping-cart 直接 npm install 或者yarn ，安装依赖 之后，npm run dev 运行 页面如下 废话不多说，直接看源码。 源码解析先来看看文件目录 该demo包含了2个module，一个叫cart,另一个叫product. 先看cart12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#shop是获取数据的apiimport shop from '../../api/shop'#引入了 mutation-types 使用常量替代 Mutation 事件类型import * as types from '../mutation-types'// initial state 初始化了2个状态也可叫数据对象，added:// shape: [&#123; id, quantity &#125;]const state = &#123; added: [], checkoutStatus: null&#125;// getters getters过滤条件必须是bollean值.根据bolean的条件返回具体数据对象。null在JavaScript中if条件下 均被视为falseconst getters = &#123; checkoutStatus: state =&gt; state.checkoutStatus&#125;// actions 在actions中提交mutation，并且可以包含任何的异步操作。actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据（但是还是通过mutation来操作，因为只有它能操作const actions = &#123; checkout (&#123; commit, state &#125;, products) &#123; //解构 state.added对象里面的值，并将至存放到savedCartItems对象中 const savedCartItems = [...state.added] commit(types.CHECKOUT_REQUEST) shop.buyProducts( products, () =&gt; commit(types.CHECKOUT_SUCCESS), () =&gt; commit(types.CHECKOUT_FAILURE, &#123; savedCartItems &#125;) ) &#125;&#125;// mutations 在Vuex中store数据改变的唯一方法就是mutation&lt;!-- mutations,里面装着一些改变数据方法的集合，这是Veux设计很重要的一点，就是把处理数据逻辑方法全部放在mutations里面，使得数据和视图分离。 --&gt;const mutations = &#123; [types.ADD_TO_CART] (state, &#123; id &#125;) &#123; state.lastCheckout = null const record = state.added.find(p =&gt; p.id === id) if (!record) &#123; state.added.push(&#123; id, quantity: 1 &#125;) &#125; else &#123; record.quantity++ &#125; &#125;, [types.CHECKOUT_REQUEST] (state) &#123; // clear cart state.added = [] state.checkoutStatus = null &#125;, [types.CHECKOUT_SUCCESS] (state) &#123; state.checkoutStatus = 'successful' &#125;, [types.CHECKOUT_FAILURE] (state, &#123; savedCartItems &#125;) &#123; // rollback to the cart saved before sending the request state.added = savedCartItems state.checkoutStatus = 'failed' &#125;&#125;export default &#123; state, getters, actions, mutations&#125; 在来看看 product12345678910111213141516171819202122232425262728293031323334353637383940import shop from '../../api/shop'import * as types from '../mutation-types'// initial stateconst state = &#123; all: []&#125;// getters JS中数组(不管是不是空的)属于对象类型，对象类型转为boolean类型(内部对应ToBoolean()操作)时都是true。const getters = &#123; allProducts: state =&gt; state.all&#125;// actionsconst actions = &#123; getAllProducts (&#123; commit &#125;) &#123; shop.getProducts(products =&gt; &#123; commit(types.RECEIVE_PRODUCTS, &#123; products &#125;) &#125;) &#125;&#125;// mutationsconst mutations = &#123; [types.RECEIVE_PRODUCTS] (state, &#123; products &#125;) &#123; state.all = products &#125;, [types.ADD_TO_CART] (state, &#123; id &#125;) &#123; state.all.find(p =&gt; p.id === id).inventory-- &#125;&#125;export default &#123; state, getters, actions, mutations&#125; 看完了 module,再来看看 action12345678910//这个是总得action 每个module 都可以有自己的actionimport * as types from './mutation-types'//很简单 判断存货是否大于0 然后提交给mutation具体idexport const addToCart = (&#123; commit &#125;, product) =&gt; &#123; if (product.inventory &gt; 0) &#123; commit(types.ADD_TO_CART, &#123; id: product.id &#125;) &#125;&#125; 继续 再来看看总得getter1234567891011//查询 返回对象export const cartProducts = state =&gt; &#123; return state.cart.added.map((&#123; id, quantity &#125;) =&gt; &#123; const product = state.products.all.find(p =&gt; p.id === id) return &#123; title: product.title, price: product.price, quantity &#125; &#125;)&#125; 再来看定义所有mutation类型文件mutation-types.js12345export const ADD_TO_CART = 'ADD_TO_CART'export const CHECKOUT_REQUEST = 'CHECKOUT_REQUEST'export const CHECKOUT_SUCCESS = 'CHECKOUT_SUCCESS'export const CHECKOUT_FAILURE = 'CHECKOUT_FAILURE'export const RECEIVE_PRODUCTS = 'RECEIVE_PRODUCTS' 最后index.js12345678910111213141516171819202122import Vue from 'vue'import Vuex from 'vuex'import * as actions from './actions'import * as getters from './getters'import cart from './modules/cart'import products from './modules/products'import createLogger from '../../../src/plugins/logger'Vue.use(Vuex)const debug = process.env.NODE_ENV !== 'production'export default new Vuex.Store(&#123; actions, getters, modules: &#123; cart, products &#125;, strict: debug, plugins: debug ? [createLogger()] : []&#125;) 至此 所有vuex介绍完毕，然后让我们看这些vuex怎么应用的component中 先来到cart组件 123456789101112131415161718192021222324252627282930313233343536373839&lt;template&gt; &lt;div class=\"cart\"&gt; &lt;h2&gt;Your Cart&lt;/h2&gt; &lt;p v-show=\"!products.length\"&gt;&lt;i&gt;Please add some products to cart.&lt;/i&gt;&lt;/p&gt; &lt;ul&gt; &lt;li v-for=\"p in products\"&gt; &#123;&#123; p.title &#125;&#125; - &#123;&#123; p.price | currency &#125;&#125; x &#123;&#123; p.quantity &#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Total: &#123;&#123; total | currency &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;button :disabled=\"!products.length\" @click=\"checkout(products)\"&gt;Checkout&lt;/button&gt;&lt;/p&gt; &lt;p v-show=\"checkoutStatus\"&gt;Checkout &#123;&#123; checkoutStatus &#125;&#125;.&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;//通过mapgetters方法解构数据import &#123; mapGetters &#125; from 'vuex'export default &#123; computed: &#123; ...mapGetters(&#123; products: 'cartProducts', checkoutStatus: 'checkoutStatus' &#125;), total () &#123; return this.products.reduce((total, p) =&gt; &#123; return total + p.price * p.quantity &#125;, 0) &#125; &#125;, methods: &#123; //分发action checkout (products) &#123; this.$store.dispatch('checkout', products) &#125; &#125;&#125;&lt;/script&gt; 在来看看 product组件12345678910111213141516171819202122232425262728&lt;template&gt; &lt;ul&gt; &lt;li v-for=\"p in products\"&gt; &#123;&#123; p.title &#125;&#125; - &#123;&#123; p.price | currency &#125;&#125; &lt;br&gt; &lt;button :disabled=\"!p.inventory\" @click=\"addToCart(p)\"&gt; Add to cart &lt;/button&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script&gt;import &#123; mapGetters, mapActions &#125; from 'vuex'export default &#123; computed: mapGetters(&#123; products: 'allProducts' &#125;), methods: mapActions([ 'addToCart' ]), created () &#123; this.$store.dispatch('getAllProducts') &#125;&#125;&lt;/script&gt; 最后将这两个component 引入到app.vue123456789101112131415161718&lt;template&gt; &lt;div id=\"app\"&gt; &lt;h1&gt;Shopping Cart Example&lt;/h1&gt; &lt;hr&gt; &lt;h2&gt;Products&lt;/h2&gt; &lt;product-list&gt;&lt;/product-list&gt; &lt;hr&gt; &lt;cart&gt;&lt;/cart&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import ProductList from './ProductList.vue'import Cart from './Cart.vue'export default &#123; components: &#123; ProductList, Cart &#125;&#125;&lt;/script&gt; 基本上这个demo就介绍完毕 下来我通过vue-cli初始化一个新项目，将上面所有的代码进行练习 谢谢大家欣赏。代码已经上传https://github.com/qileilove/vuex-practice","categories":[],"tags":[{"name":"vuex","slug":"vuex","permalink":"http://yoursite.com/tags/vuex/"}],"keywords":[]},{"title":"小QA学习前端系列之vuex","slug":"vuex","date":"2017-10-12T13:51:51.000Z","updated":"2017-10-15T14:31:59.000Z","comments":true,"path":"2017/10/12/vuex/","link":"","permalink":"http://yoursite.com/2017/10/12/vuex/","excerpt":"","text":"一个QA如何学习vuex什么vuex其实之前也学习过redux，虽然redux已经把我看得云里雾里的，里面的educer 应该如何拆分、action 应该怎么定义、dispatch 异步怎么做、Ajax 怎么使用、middleware 什么时候需要用、enhancer 干什么的、高阶函数怎么这么多 等等一系列问题，就算是看懂了，放上半年又全还给度娘了，相反vuex却让我记忆犹新，vuex的api 我花半天时间，就已经理解的很透彻了，跟着getting started，已经可以把demo中todo-list搞定了。说了这么多，那么vuex到底是什么，vuex和redux一样都是用来管理状态的，只不过vuex只能用在vue项目中，redux则没有限制，如果你想在react项目使用类似vuex的框架，最近有一个MobX的框架可以值得一试，虽然我也没看，但是大神推荐了，应该没错。 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 以上是官方的解释，很清晰明了，想更进一步的话，我们需要知道vuex是基于flux架构，同时也吸收redux的一些优点，而redux又是基于flux的改进: 把store和Dispatcher合并,结构更加简单清晰 新增state角色，代表每个时间点store对应的值，对状态的管理更加明确 Redux数据流的顺序是: View调用store.dispatch发起Action-&gt;store接受Action(action传入reducer函数,reducer函数返回一个新的state)-&gt;通知store.subscribe订阅的重新渲染函数 Flux数据流的顺序是: View发起Action-&gt;Action传递到Dispatcher-&gt;Dispatcher将通知Store-&gt;Store的状态改变通知View进行改变 而Vuex是专门为Vue设计的状态管理框架, 同样基于Flux架构，并吸收了Redux的优点 Vuex相对于Redux的不同点有: 改进了Redux中的Action和Reducer函数，以mutations变化函数取代Reducer， 无需switch,只需在对应的mutation函数里改变state值即可 由于Vue自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的State即可 Vuex数据流的顺序是: View调用store.commit提交对应的请求到Store中对应的mutation函数-&gt;store改变(vue检测到数据变化自动渲染) vuex的核心概念Vuex 中 Store 的模板化定义如下： 1234567891011121314151617import Vue from 'vue'import Vuex from 'vuex'Vue.use(Vuex)const store = new Vuex.Store(&#123; state: &#123; &#125;, actions: &#123; &#125;, mutations: &#123; &#125;, getters: &#123; &#125;, modules: &#123; &#125;&#125;)export default store State Getter Mutation Action ModulestateVuex就是提供一个仓库，仓库里面放了很多对象。其中state就是数据源存放地，对应于与一般Vue对象里面的data（后面讲到的actions和mutations对应于methods）。state: state 定义了应用状态的数据结构，同样可以在这里设置默认的初始状态。 响应书存储：state里面存放的数据是响应式的，Vue组件从store中读取数据，若是store中的数据发生改变，依赖这个数据的组件也会发生更新。（这里“状态”=“数据”），也就是是说数据和视图是同步的。例如: 1234state: &#123; projects: [], userProfile: &#123;&#125;&#125; 在 Vue 组件中获得 Vuex 状态的几种方法通用方法:全局的放vuex，局部的放在component的data里 Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：123456789101112const app = new Vue(&#123; el: '#app', // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件 store, components: &#123; Counter &#125;, template: ` &lt;div class=\"app\"&gt; &lt;counter&gt;&lt;/counter&gt; &lt;/div&gt; `&#125;) 通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。让我们更新下 Counter 的实现： 12345678const Counter = &#123; template: `&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`, computed: &#123; count () &#123; return this.$store.state.count &#125; &#125;&#125; mapStatemapState的作用是把全局的 state 和 getters 映射到当前组件的 computed 计算属性中，this.$store.state。 使用示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 import &#123;mapState&#125; from 'vuex' export default &#123; computer : mapState(&#123; count: state =&gt; state.count, // 方法一 传字符串参数 'count' 等同于 `state =&gt; state.count` countAlias: 'count', // 方法二 为了能够使用 `this` 获取局部状态，必须使用常规函数 countPlusLocalState (state) &#123; return state.count + this.localCount &#125;, // 映射 this.count 为 store.state.count 'count' &#125;)&#125;对象展开运算符import Vue from 'vue'import Vuex from 'vuex'import mutations from './mutations'import actions from './action'import getters from './getters'Vue.use(Vuex)const state = &#123; userInfo: &#123; phone: 111 &#125;, //用户信息 orderList: [&#123; orderno: '1111' &#125;], //订单列表 orderDetail: null, //订单产品详情 login: false, //是否登录&#125;export default new Vuex.Store(&#123; state, getters, actions, mutations,&#125;)computed: &#123; ...mapState([ 'orderList', 'login' ]), &#125;, mounted()&#123; console.log(typeof orderList); ==&gt;undefind console.log(typeof this.orderList)==&gt;object &#125; getter一句话 getter就是用来进行数据过滤的，然后把过滤后的数据，共享给所有component。 所以getters是store的计算属性 getters过滤条件必须是bollean值.根据bolean的条件返回具体数据对象。 🌰🌰🌰🌰🌰🌰 定义：我们可以在store中定义getters，第一个参数是state 12345678910111213const store = new Vuex.Store(&#123; state: &#123; todos: [ &#123; id: 1, text: '...', done: true &#125;, &#123; id: 2, text: '...', done: false &#125; ] &#125;, getters: &#123; doneTodos: state =&gt; &#123; return state.todos.filter(todo =&gt; todo.done) &#125; &#125;&#125;) 传参：定义的Getters会暴露为store.getters对象，也可以接受其他的getters作为第二个参数；12345678getters: &#123; // ... doneTodosCount: (state, getters) =&gt; &#123; return getters.doneTodos.length &#125;&#125;store.getters.doneTodosCount // -&gt; 1 调用12345computed: &#123; doneTodosCount () &#123; return this.$store.getters.doneTodosCount &#125;&#125; 通过mapGetters调用mapGetters辅助函数仅仅是将store中的getters映射到局部计算属性中，用法和mapState类似 1234567891011import &#123; mapGetters &#125; from 'vuex'computed: &#123; // 使用对象展开运算符将 getters 混入 computed 对象中 ...mapGetters([ 'doneTodosCount', 'anotherGetter',])&#125; //给getter属性换名字 mapGetters(&#123; // 映射 this.doneCount 为 store.getters.doneTodosCount doneCount: 'doneTodosCount'&#125;) Mutation在Vuex中store数据改变的唯一方法就是mutation mutations,里面装着一些改变数据方法的集合，这是Veux设计很重要的一点，就是把处理数据逻辑方法全部放在mutations里面，使得数据和视图分离。 重要的原则就是要记住 mutation 必须是同步函数 如何使用 mutation结构 每一个mutation都有一个字符串类型的事件类型(type)和回调函数(handler)，也可以理解为{type:handler()},这和订阅发布有点类似。先注册事件，当触发响应类型的时候调用handker()，调用type的时候需要用到store.commit方法。 12345678910const store = new Vuex.Store(&#123; state: &#123; count: 1 &#125;, mutations: &#123; increment (state) &#123; //注册事件，type:increment，handler第一个参数是state； // 变更状态 state.count++&#125;&#125;&#125;) store.commit('increment') //调用type，触发handler（state） 载荷（payload) 简单的理解就是往handler(stage)中传参handler(stage,pryload)；一般是个对象。 1234mutations: &#123;increment (state, n) &#123; state.count += n&#125;&#125;store.commit('increment', 10) 在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读： 12345678910// ...mutations: &#123; increment (state, payload) &#123; state.count += payload.amount &#125;&#125;store.commit('increment', &#123; amount: 10&#125;) 对象风格的提交方式 提交 mutation 的另一种方式是直接使用包含 type 属性的对象： 1234store.commit(&#123; type: 'increment', amount: 10&#125;) 当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变： 12345mutations: &#123; increment (state, payload) &#123; state.count += payload.amount &#125;&#125; Mutation 需遵守 Vue 的响应规则 最好提前在你的 store 中初始化好所有所需属性。 当需要在对象上添加新属性时，你应该 使用 Vue.set(obj, ‘newProp’, 123), 或者以新对象替换老对象。例如，利用 stage-3 的对象展开运算符我们可以这样写： 1state.obj = &#123; ...state.obj, newProp: 123 &#125; 使用常量替代 Mutation 事件类型 将常量放在单独的文件中，方便协作开发。 12345678910111213141516// mutation-types.jsexport const SOME_MUTATION = 'SOME_MUTATION'// store.jsimport Vuex from 'vuex'import &#123; SOME_MUTATION &#125; from './mutation-types'const store = new Vuex.Store(&#123; state: &#123; ... &#125;, mutations: &#123; // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名 [SOME_MUTATION] (state) &#123; // mutate state &#125; &#125;&#125;) 在组件中提交 Mutation 提交可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。 12345678910111213141516import &#123; mapMutations &#125; from 'vuex'export default &#123; // ... methods: &#123; ...mapMutations([ 'increment', // 将 `this.increment()` 映射为 `this.$store.commit('increment')` // `mapMutations` 也支持载荷： 'incrementBy' // 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)` ]), ...mapMutations(&#123; add: 'increment' // 将 `this.add()` 映射为 `this.$store.commit('increment')` &#125;) &#125;&#125; action前面我们讲了mutation中是存放处理数据的方法的集合，我们使用的时候需要commit。但是commit是同步函数，而且只能是同步执行。 所以action出现了。在actions中提交mutation，并且可以包含任何的异步操作。actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据（但是还是通过mutation来操作，因为只有它能操作） 定义actions1234567891011121314151617181920212223242526272829303132333435const store = new Vuex.Store(&#123;//创建store实例 state: &#123; count: 0 &#125;, mutations: &#123; increment (state) &#123; state.count++ &#125;, sub(state)&#123; state.count--; &#125; &#125;, actions: &#123; //只是提交`commit`了`mutations`里面的方法。 increment (context) &#123; context.commit('increment') &#125;, subplus(&#123;commit&#125;)&#123; commit('sub'); &#125; &#125; &#125;) Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。当我们在之后介绍到 Modules 时，你就知道 context 对象为什么不是 store 实例本身了。 一般我们会简写成这样 actions: &#123; increment (&#123; commit &#125;) &#123; commit('increment') &#125;,subplus(&#123;commit&#125;)&#123; commit('sub') &#125; &#125; 分发 ActionAction 通过 store.dispatch 方法触发： store.dispatch(&#39;increment&#39;) 乍一眼看上去感觉多此一举，我们直接分发 mutation 岂不更方便？实际上并非如此，还记得 mutation 必须同步执行这个限制么？Action 就不受约束！我们可以在 action 内部执行异步操作： 1234567actions: &#123; incrementAsync (&#123; commit &#125;) &#123; setTimeout(() =&gt; &#123; commit('increment') &#125;, 1000) &#125;&#125; Actions 支持同样的载荷方式和对象方式进行分发： 1234// 以载荷形式分发store.dispatch('incrementAsync', &#123; amount: 10&#125;) // 以对象形式分发1234store.dispatch(&#123; type: 'incrementAsync', amount: 10&#125;) 在组件中分发 Action你在组件中使用 this.$store.dispatch(‘xxx’) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）：1234567891011121314151617import &#123; mapActions &#125; from 'vuex'export default &#123; // ... methods: &#123; ...mapActions([ 'increment', // 将 `this.increment()` 映射为 `this.$store.dispatch('increment')` // `mapActions` 也支持载荷： 'incrementBy' // 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)` ]), ...mapActions(&#123; add: 'increment' // 将 `this.add()` 映射为 `this.$store.dispatch('increment')` &#125;) &#125;&#125; Module背景：在Vue中State使用是单一状态树结构，应该的所有的状态都放在state里面，如果项目比较复杂，那state是一个很大的对象，store对象也将对变得非常大，难于管理。 module：可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。1234567891011121314151617181920212223const moduleA = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;, getters: &#123; ... &#125;&#125;const moduleB = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;&#125;const store = new Vuex.Store(&#123; modules: &#123; a: moduleA, b: moduleB &#125;&#125;)store.state.a // -&gt; moduleA 的状态store.state.b // -&gt; moduleB 的状态 模块的局部状态 对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。 123456789101112131415const moduleA = &#123; state: &#123; count: 0 &#125;, mutations: &#123; increment (state) &#123; // 这里的 `state` 对象是模块的局部状态 state.count++ &#125; &#125;, getters: &#123; doubleCount (state) &#123; return state.count * 2 &#125; &#125;&#125; 对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState12345678910const moduleA = &#123; // ... actions: &#123; incrementIfOddOnRootSum (&#123; state, commit, rootState &#125;) &#123; if ((state.count + rootState.count) % 2 === 1) &#123; commit('increment') &#125; &#125; &#125;&#125; 对于模块内部的 getter，根节点状态会作为第三个参数暴露出来： 12345678const moduleA = &#123; // ... getters: &#123; sumWithRootCount (state, getters, rootState) &#123; return state.count + rootState.count &#125; &#125;&#125; 命名空间 默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的——这样使得多个模块能够对同一 mutation 或 action 作出响应。 如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为命名空间模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。例如： 12345678910111213141516171819202122232425262728293031323334353637383940const store = new Vuex.Store(&#123; modules: &#123; account: &#123; namespaced: true, // 模块内容（module assets） state: &#123; ... &#125;, // 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响 getters: &#123; isAdmin () &#123; ... &#125; // -&gt; getters['account/isAdmin'] &#125;, actions: &#123; login () &#123; ... &#125; // -&gt; dispatch('account/login') &#125;, mutations: &#123; login () &#123; ... &#125; // -&gt; commit('account/login') &#125;, // 嵌套模块 modules: &#123; // 继承父模块的命名空间 myPage: &#123; state: &#123; ... &#125;, getters: &#123; profile () &#123; ... &#125; // -&gt; getters['account/profile'] &#125; &#125;, // 进一步嵌套命名空间 posts: &#123; namespaced: true, state: &#123; ... &#125;, getters: &#123; popular () &#123; ... &#125; // -&gt; getters['account/posts/popular'] &#125; &#125; &#125; &#125; &#125;&#125;) 带命名空间的绑定函数 当使用 mapState, mapGetters, mapActions 和 mapMutations 这些函数来绑定命名空间模块时，写起来可能比较繁琐： 123456789101112computed: &#123; ...mapState(&#123; a: state =&gt; state.some.nested.module.a, b: state =&gt; state.some.nested.module.b &#125;)&#125;,methods: &#123; ...mapActions([ 'some/nested/module/foo', 'some/nested/module/bar' ])&#125; 对于这种情况，你可以将模块的空间名称字符串作为第一个参数传递给上述函数，这样所有绑定都会自动将该模块作为上下文。于是上面的例子可以简化为： 123456789101112131415computed: &#123; ...mapState('some/nested/module', &#123; a: state =&gt; state.a, b: state =&gt; state.b &#125;)&#125;,methods: &#123; ...mapActions('some/nested/module', [ 'foo', 'bar' ])&#125;```而且，你可以通过使用 createNamespacedHelpers 创建基于某个命名空间辅助函数。它返回一个对象，对象里有新的绑定在给定命名空间值上的组件绑定辅助函数： import { createNamespacedHelpers } from ‘vuex’ const { mapState, mapActions } = createNamespacedHelpers(‘some/nested/module’) export default { computed: { // 在 some/nested/module 中查找 …mapState({ a: state =&gt; state.a, b: state =&gt; state.b }) }, methods: { // 在 some/nested/module 中查找 …mapActions([ ‘foo’, ‘bar’ ]) }} ``` 以上便是我2天来学习vuex的心得，大部分参考的是官方的文档，不得不说vuex的文档比redux文档容易理解多，接下来我会把官方的列子购物车玩一下，然后自己在写一个todo-list,vue2 还是大略的过了一遍，还是要写个小项目熟悉框架，一个QA在前端的路途上越走越远，希望学到前端知识能够帮我在测试和自动化的道路上有所突破。","categories":[],"tags":[{"name":"大前端","slug":"大前端","permalink":"http://yoursite.com/tags/大前端/"}],"keywords":[]},{"title":"2017年qa应掌握的技能","slug":"devopsforqa","date":"2017-04-06T03:24:00.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2017/04/06/devopsforqa/","link":"","permalink":"http://yoursite.com/2017/04/06/devopsforqa/","excerpt":"","text":"DevOps &amp; 敏捷方法随着对于在交付期限内完成项目的迫切需求，测试人员需要学习敏捷方法和DevOps，因为它们可以帮助促进团队之间的协作和改进迭代间工作模式。敏捷方法为测试项目提供了项目开发所需要速度与效率，而DevOps可以从开发，分析和质量保证流程中协助跨职能的团队合作，从而在更短的时间内产生出高质量的产品。此外，学习这些方法最终消除了角色间僵化和孤岛，让团队密切关注开发流程和持续发布。向上面devops工作流一样，devops 打通项目流程每一个环节，从代码的管理，到build、test 到最好部署到prod环境，对于qa来说，了解其中的流程，对于qa工作有非常的好处，通过devops一些监控工具例如airbrake我们可以实施查看系统发生的问题，与dev一起分析问题发生的原因，通过GA newrelic这些工具，我们可以分析系统用户行为，给系统性能测试与分析提供数据上的支持。通过对于了解devops工作流，我们可以分析项目中存在风险，及时改进流程，通过docker等容器化的工具，我们可以将测试放到容器中执行，降低测试对于环境的依赖，进一步改进自动化测试，所以说了解devops知识对于qa来说百利无一害，何乐而不为呢。 自动化面对应用程序日益增加复杂性和系统集成，依靠手动测试已经无法完成全部测试工作。为了测试浏览器兼容性，性能，无头以及数据库和集成层面，测试人员应该学习自动化相关的技能，因为它可以提供业务逻辑和技术层面更高更准确更可靠支持。此外，还有几种自动化测试工具专门支持特定领域的测试类型，并具有快速高效地完成任务的功能。如上图，很多QA或者tester有一个误区，提到自动化张嘴闭嘴都是selenium，甚至有的人连webdriver与selenium区别都不知道，所以这里我要澄清，ui自动化测试只是自动化测试中的一小部分，还包括api，接口，单元测试，集成测试，甚至性能测试我们都应该称为自动化测试。 网络与移动技术 每个测试人员还必须熟悉web和mobile相关技术，以便他们能够更好了解应用程序的类型与架构，如何构建，以及相应的可扩展性，并为以后测试提供相应背景知识。这对于测试人员非常重要，因为它能够指导QA理解项目架构与所面临技术挑战，提供更有效的QA解决方案。这里学问更多，完全是两大方向，知识领域都非常的广大，例如web端我们可能要测试不同浏览器兼容性，对于mobile来说，尤其是android这种版本碎片化以及各种自定义系统以及ui改更能会造成各种个样的问题，对于mobile我们甚至要考虑更多场景，例如app是否具有内存泄露，电量消耗的快慢，横竖屏的影响等等。不同构建工具，开发环境的区别等对于qa来说又要面对一堆未知领域，没事，继续加油。 SDLC 软件开发生命周期（Systems Development Life Cycle） 测试人员也被建议学习软件生命周期管理技能，这将有助于QA更轻松了解应用程序开发任务和测试计划周期。对SDLC周期的深入了解还有助于预测应用程序的复杂性，从而提前采取正确的措施。因此，测试人员还必须学习适用于项目开发生命周期流程的几种开发方法，如瀑布，看板，Scrum，精益等。作为一个qa,我们应关注软件开发生命周期中的每一步，了解敏捷开发迭代中的各个环节及时作出反馈，所以有时qa也需要承担scrum master的责任，例如某个story进度超过预定期限未完成，我们就应当了解原因，及时与团队成员以及客户沟通。 理性分析与逻辑思维为了保持竞争力，QA还应该学使用理性，分析性和逻辑性思维来思考问题，因为这些技能在测试应用时可以帮助QA识别错误，了解问题的复杂性，评估应用程序的不熟悉的功能并相应地进行测试。具有良好的分析和推理能力有助于根据在不同场景下验证应用程序，并根据预先定义的标准来评估应用程序。这进一步有助于评估相关信息，提出明确的问题，确定优势和弱点，而不会持有偏见，这有助于实施正确的行动方案和解决方案。 社交网络任何行业的任何专业人士都需要社交网络技能。由于社交网络可以即时访问讨论，资源和内容，因此在这方面的技巧有助于与其它QA进行互动，学习新事物并更新自己的知识体系的广度与深度。拥有社交网络技能还可让您与各种专家进行交流，交流疑问，当然也可以建立长期的合作关系，帮助您的专业技能和企业达到所需目标。 测试工具和技术每个QA都必须了解不同的测试技术和使用工具。无论你的项目属于那个领域和应用程序类型，都应具有黑盒测试，渗透测试，安全测试，系统测试，单元测试等，测试人员具有多功能性，可以帮助他们在任何类型的项目上工作。此外，随着商业化的专业测试工具数量的增加，例如bug跟踪工具，测试管理工具，GUI测试工具，自动化工具等，测试人员可以了解这些工具的特点，选择适用于所在项目需求工具，以满足不同的需求和复杂性。 编程 当我们谈论编程时，QA当然不会像开发人员一样工作，但是QA需要理解应用程序的实现原理与项目架构，这样我们可以更容易的创建所需的测试。编程知识有助于识别应用程序代码中的可能发生的错误，这就进一步降低了应用程序发生错误的概率。所以建议学习至少两种编程语言，这样的话测试人员就能够更好的了解应用程序的解决方案，以确保的应用程序生命周期的质量。 沟通 - 书面和口头 每个QA还应具备良好的沟通能力。通过良好的沟通，对于项目的所有角色来说，QA应该是一个好的作家，演讲者，听众和读者，例如将项目的状态更新给客户，向团队通知story的需求变更，与开发人员交流bug的细节，将需求文档转化为测试用例，准备测试报告等。除此之外，良好的沟通有助于表现出个人高度的理解能力，进一步帮助QA在逻辑思维和理性分析基础上向技术人员和非技术人员提供反馈意见。 智力与创意软件测试并不是一个程序化或平凡的任务，而是一个需要创造力和逻辑分析的过程。智力和创造力无法改变，但是，可以通过质疑应用程序行为并分析应用程序的不同方面来了解其工作原理。另外，通过设计一些应用场景，测试人员可以尝试探索性测试，来识别更多缺陷，并寻求提供有效产品质量的可能解决方案。 测试计划和文档 测试计划和文档对于每个QA至关重要，因为它有助于确定正确的需求以及采取合理的步骤。此外还可以帮助跟踪需求变化，检查测试过程和跟踪偏差，并有助于报告和记录工作。一个记录良好的测试过程也可以帮助个别测试者和企业将正确的预算和资源分配给一个项目，这就是为什么测试计划和文档技能是每个测试人员必须学习的重要技能之一。 项目管理学习项目管理的技能，帮助QA提高对于处理问题的能力。例如项目中某个环节发生问题，通过项目管理技能，能够及时的分析问题影响广度，及时寻找相关人员协作处理问题，项目管理技能有助于QA了解项目流程中所存在的问题，来帮助更好改进整个测试过程。 客户支持 与过去项目有所不同，现代测试项目要求QA提供客户支持并从他们的角度思考。作为QA并不意味着我只是关心功能是否正确，因为测试项目的成功或失败因素很多，而不仅仅只是局限于功能层面，因此QA应及时应对和支持客户提出的需求，并所他们角度思考哪些方面仍然需要改善。 报告优秀的QA必须拥有良好报告技能，才能向项目的成员与客户提供测试项目和被测试应用的确切状态。这种报告实践可以更好地协调整个测试项目，同时也为高层管理人员提供执行详细的数据，例如测试用例覆盖率，bug的数量，发布时间表等，最终有助于其做出正确的决策。 独立工作最后，QA应该学习如何独立工作的技能。这将提高他们从需求理解（技术和业务需求）到产出的最终交付工作的能力，采取正确的步骤，在没有他人的帮助或经理的监督。学习独立工作将会增加对他们的信心。 无论经验多少，QA都应努力不断学习和提高软件测试技能和知识。无论是自学习还是参与培训计划，测试人员应不断学习新的方法，以提高测试工作中的效率，并继续应用新技能和学习，使自己处于领先地位。","categories":[],"tags":[{"name":"devops","slug":"devops","permalink":"http://yoursite.com/tags/devops/"}],"keywords":[]},{"title":"","slug":"code-coverage","date":"2017-02-16T02:32:59.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2017/02/16/code-coverage/","link":"","permalink":"http://yoursite.com/2017/02/16/code-coverage/","excerpt":"","text":"title: 100% code coverage != 100% testdate: 2017-02-16 10:32:59tags: - QA100% code coverage != 100% test引言 很多人看到这个标题时，就在想你都100%代码覆盖了，怎么还会有问题呢？ 让我们看看一下代码栗子： Code example 123456789public class TestCalculator &#123;public Double add(Double a, Double b) &#123;return a + b;&#125;&#125; 再让我们看看用junit写出的测试代码： @Test public void testAdd() { Double a = new Double(1); Double b = new Double(2); Double c = new Double(3); assertEquals(c, testCalculator.add(a, b)); }当我们在Eclipse使用 EclEmme Code Coverage 插件测试时， 对于这个类我们将得到 100% Line-Coverage. 一切看起来都那么的完美，真是这样的吗？ 好吧，让我们来来看看另一个测试，当其中一个变量为null时，返回值将会怎样？ 12345678910111213@Testpublic void testAddNullPointerException() &#123;Double a = new Double(1);Double b = null;Double c = new Double(3);assertEquals(c, testCalculator.add(a, b));&#125; 好了，你会发现尽管你的覆盖率为100%，但程序却抛出了NullPointerException异常。 对于很多PM来说会选择第一个测试代码,因为100%的单元测试覆盖率总比50%的测试代码要更好! 但是这有用么？我们可能忽略了更重要的业务场景测试。 哈哈，小小的嘲讽了部分PM。 我们应当转换下思维，思考以下问题。 100%的覆盖率并不意味你的测试代码质量很高，上面那个列子就是典型。 100%的覆盖率并不意味着所有的业务场景都被覆盖。 对于项目我们是否有足够的测试？ 这里的测试不仅仅包括代码级别的单元测试，还要集成测试，接口测试，黑盒测试，可用性测试等等。只有全部得测试通过后，才能说明功能的完整性，仅仅单一的单元测试，对于整个项目来说，基本没用。 所以100%的代码覆盖率值得追求吗? 是的，这应该是每个程序猿毕生追求的之一，但是如果从项目角度考虑，ROI(投入产出比)，如果你的项目是一个短期项目，需要快速上线，那么这时候你需要注重的是测试应覆盖核心功能代码。如果你的项目是一个长期项目，那么高覆盖率是非要有必要的，它意味着可维护性，以及更少的bug。(前提是你的测试采用TDD/BDD方式编写，我见过将测试代码写的一团糟的人，看着他的代码，我宁愿重新一遍) 那么对于一个项目来说覆盖率应该达到多少？ 其实没有具体数值能够覆盖到所有的项目，每个项目都应有自己的阈值，但共性是，必须测试必须覆盖主要业务场景，代码的逻辑分支也必须覆盖。 如何改进你的项目代码覆盖率？ 阅读和理解项目代码，找出其中需要测试并且与业务强相关的代码。 将之前可读性差测试代码，采用TDD与BDD方式进行重写，提高项目的可维护性与可读性。 代码覆盖率非常重要的意义在于： 分析未覆盖部分的代码，从而反推在前期黑盒测试设计是否充分，没有覆盖到的代码是否是测试设计的盲点，为什么没有考虑到？是需求/设计不够清晰，还是测试设计的理解有误。 检测出程序中的废代码，可以逆向反推在代码设计中不合理的地方，提醒设计/开发人员理清代码逻辑关系，提升代码质量。 代码覆盖率高不能说明代码质量高，但是反过来看，代码覆盖率低，代码质量绝对不会高到哪里去，可以作为测试自我审视的重要工具之一。","categories":[],"tags":[],"keywords":[]},{"title":"espresso-api之Matchers探究","slug":"espresso4","date":"2016-12-25T13:00:09.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2016/12/25/espresso4/","link":"","permalink":"http://yoursite.com/2016/12/25/espresso4/","excerpt":"","text":"通过前3篇文章，大家应该对espresso有了大体上的了解，那么今天我们要深入了解它的API，看看espresso的整体架构。还是通过espresso cheat sheet来进入本次话题。 Espresso备忘单是您在开发过程中可以使用的快速参考。 这个备忘单包含大多数可用的Matchers，ViewActions和ViewAsertions。让我们先来看看Matchers 都有哪些API可供我们使用。1234567891011android.support.test.espresso.matcherClassesBoundedMatcher&lt;T, S extends T&gt; Some matcher sugar that lets you create a matcher for a given type but only process items of a specific subtype of that matcher.CursorMatchers A collection of Hamcrest matchers that matches a data row in a Cursor.CursorMatchers.CursorMatcher A Matcher that matches Cursors based on values in their columns.LayoutMatchers A collection of hamcrest matches to detect typical layout issues.PreferenceMatchers A collection of hamcrest matchers that match Preferences.RootMatchers A collection of matchers for Root objects.ViewMatchers A collection of hamcrest matchers that match Views.EnumsViewMatchers.Visibility Enumerates the possible list of values for View.getVisibility(). 7个类，1个Eums。接下来我们一个个欣赏谷歌大神的杰作。 BoundedMatcher&lt;T, S extends T&gt;一些匹配语法糖，允许您为给定类型创建匹配器，但只能处理该匹配器的特定子类型项。换句话说，就是能够自定义一些匹配器。举个栗子，以下是一个自定义错误文本匹配器12345678910111213141516171819202122232425public final class ErrorTextMatchers &#123; /** * Returns a matcher that matches &#123;@link TextView&#125;s based on text property value. * * @param stringMatcher &#123;@link Matcher&#125; of &#123;@link String&#125; with text to match */ @NonNull public static Matcher&lt;View&gt; withErrorText(final Matcher&lt;String&gt; stringMatcher) &#123; return new BoundedMatcher&lt;View, TextView&gt;(TextView.class) &#123; @Override public void describeTo(final Description description) &#123; description.appendText(\"with error text: \"); stringMatcher.describeTo(description); &#125; @Override public boolean matchesSafely(final TextView textView) &#123; return stringMatcher.matches(textView.getError().toString()); &#125; &#125;; &#125;&#125; 实现的主要细节如下。 我们通过从withErrorText()返回一个BoundedMatcher来确保匹配器只匹配TextView类的子类。 这使得很容易在BoundedMatcher.matchesSafely()中实现匹配逻辑本身：只需从TextView中获取getError()方法并将其送入下一个匹配器。 最后，我们有一个简单的describeTo()方法的实现，它只用于生成调试输出到控制台。CursorMatchersHamcrest的集合匹配器，在Cursor匹配相应的数据行。源码如下12345678910/** * Returns a matcher that matches a &#123;@link String&#125; value at a given column index * in a &#123;@link Cursor&#125;s data row. * &lt;br&gt; * @param columnIndex int column index * @param value a &#123;@link String&#125; value to match */ public static CursorMatcher withRowString(int columnIndex, String value) &#123; return withRowString(columnIndex, is(value)); &#125; 大部分的场景，大多发生于表单或者滚动menu时。1234onData( is(instanceOf(Cursor.class)), CursorMatchers.withRowString(\"job_title\", is(\"Barista\"))); LayoutMatchers hamcrest的集合匹配以检测典型的布局问题。 例如匹配具有椭圆形文本的TextView元素。 如果文本太长，无法适应TextView， 它可以是椭圆形（’Too long’显示为’Too l …’或’… long’）或切断（’Too long“显示为”Too l“）。 虽然在某些情况下可以接受，但通常表示不好的用户体验。 PreferenceMatchers hamcrest匹配器来匹配一组偏好。Preference组件其实就是Android常见UI组件与SharePreferences的组合封装实现。onData(Matchers.&lt;Object&gt;allOf(PreferenceMatchers.withKey(&quot;setting-name&quot;))).perform(click());PreferenceMatchers还有以下方法可以应用到其他场景1234567withSummary(final int resourceId)withSummaryText(String summary)withSummaryText(final Matcher&lt;String&gt; summaryMatcher)withTitle(final int resourceId)withTitleText(String title)withTitleText(final Matcher&lt;String&gt; titleMatcher)isEnabled() RootMatchers Root对象的匹配器集合。匹配root装饰视图匹配给定的视图匹配器。123onView(withText(\"Text\")) .inRoot(withDecorView(not(is(getActivity().getWindow().getDecorView())))) .perform(click()); RootMatchers还有以下方法可以应用到其他场景 Public methods static Matcher isDialog()Matches Roots that are dialogs (i.e.) static Matcher isFocusable()Matches Roots that can take window focus. static Matcher isPlatformPopup()Matches Roots that are popups - like autocomplete suggestions or the actionbar spinner. static Matcher isTouchable()Matches Roots that can receive touch events. static Matcher withDecorView(Matcher decorViewMatcher)Matches Roots with decor views that match the given view matcher. ViewMatchers 最重要也是应用最广的匹配器，通过一个或者多个来定位层级里面的控件。 Public methods static void assertThat(String message, T actual, Matcher matcher) A replacement for MatcherAssert.assertThat that renders View objects nicely. static void assertThat(T actual, Matcher matcher) A replacement for MatcherAssert.assertThat that renders View objects nicely. static Matcher hasContentDescription() Returns an Matcher that matches Views with any content description. static Matcher hasDescendant(Matcher descendantMatcher) Returns a matcher that matches Views based on the presence of a descendant in its view hierarchy. static Matcher hasErrorText(String expectedError) Returns a matcher that matches EditText based on edit text error string value. static Matcher hasErrorText(Matcher stringMatcher) Returns a matcher that matches EditText based on edit text error string value. static Matcher hasFocus() Returns a matcher that matches Views currently have focus. static Matcher hasImeAction(int imeAction) Returns a matcher that matches views that support input methods (e.g. static Matcher hasImeAction(Matcher imeActionMatcher) Returns a matcher that matches views that support input methods (e.g. static Matcher hasLinks() Returns a matcher that matches TextViews that have links. static Matcher hasSibling(Matcher siblingMatcher) Returns an Matcher that matches Views based on their siblings. static Matcher isAssignableFrom(Class&lt;? extends View&gt; clazz) Returns a matcher that matches Views which are an instance of or subclass of the provided class. static Matcher isChecked() Returns a matcher that accepts if and only if the view is a CompoundButton (or subtype of) and is in checked state. static Matcher isClickable() Returns a matcher that matches Views that are clickable. static Matcher isCompletelyDisplayed() Returns a matcher which only accepts a view whose height and width fit perfectly within the currently displayed region of this view. static Matcher isDescendantOfA(Matcher ancestorMatcher) Returns a matcher that matches Views based on the given ancestor type. static Matcher isDisplayed() Returns a matcher that matches Views that are currently displayed on the screen to the user. static Matcher isDisplayingAtLeast(int areaPercentage) Returns a matcher which accepts a view so long as a given percentage of that view’s area is not obscured by any other view and is thus visible to the user. static Matcher isEnabled() Returns a matcher that matches Views that are enabled. static Matcher isFocusable() Returns a matcher that matches Views that are focusable. static Matcher isJavascriptEnabled() Returns a matcher that matches WebView if they are evaluating Javascript. static Matcher isNotChecked() Returns a matcher that accepts if and only if the view is a CompoundButton (or subtype of) and is not in checked state. static Matcher isRoot() Returns a matcher that matches root View. static Matcher isSelected() Returns a matcher that matches Views that are selected. static Matcher supportsInputMethods() Returns a matcher that matches views that support input methods. static Matcher withChild(Matcher childMatcher) A matcher that returns true if and only if the view’s child is accepted by the provided matcher. static Matcher withClassName(Matcher classNameMatcher) Returns a matcher that matches Views with class name matching the given matcher. static Matcher withContentDescription(int resourceId) Returns a Matcher that matches Views based on content description property value. static Matcher withContentDescription(String text) Returns an Matcher that matches Views based on content description property value. static Matcher withContentDescription(Matcher&lt;? extends CharSequence&gt; charSequenceMatcher) Returns an Matcher that matches Views based on content description property value. static Matcher withEffectiveVisibility(ViewMatchers.Visibility visibility) Returns a matcher that matches Views that have “effective” visibility set to the given value. static Matcher withHint(Matcher stringMatcher) Returns a matcher that matches TextViews based on hint property value. static Matcher withHint(int resourceId) Returns a matcher that matches a descendant of TextView that is displaying the hint associated with the given resource id. static Matcher withHint(String hintText) Returns a matcher that matches TextView based on it’s hint property value. static Matcher withId(Matcher integerMatcher) Returns a matcher that matches Views based on resource ids. static Matcher withId(int id) Same as withId(is(int)), but attempts to look up resource name of the given id and use an R.id.myView style description with describeTo. static Matcher withInputType(int inputType) Returns a matcher that matches InputType. static Matcher withParent(Matcher parentMatcher) A matcher that accepts a view if and only if the view’s parent is accepted by the provided matcher. static Matcher withResourceName(String name) Returns a matcher that matches Views based on resource id names, (for instance, channel_avatar). static Matcher withResourceName(Matcher stringMatcher) Returns a matcher that matches Views based on resource id names, (for instance, channel_avatar). static Matcher withSpinnerText(int resourceId) Returns a matcher that matches a descendant of Spinner that is displaying the string of the selected item associated with the given resource id. static Matcher withSpinnerText(String text) Returns a matcher that matches Spinner based on it’s selected item’s toString value. static Matcher withSpinnerText(Matcher stringMatcher) Returns a matcher that matches Spinners based on toString value of the selected item. static Matcher withTagKey(int key) Returns a matcher that matches View based on tag keys. static Matcher withTagKey(int key, Matcher objectMatcher) Returns a matcher that matches Views based on tag keys. static Matcher withTagValue(Matcher tagValueMatcher) Returns a matcher that matches Views based on tag property values. static Matcher withText(Matcher stringMatcher) Returns a matcher that matches TextViews based on text property value. static Matcher withText(String text) Returns a matcher that matches TextView based on its text property value. static Matcher withText(int resourceId) Returns a matcher that matches a descendant of TextView that is displaying the string associated with the given resource id. ok 这次主要介绍Matchers的API 更多的内容 大家还是要查看官方API去学习。以下是android espresso matchers的地址espresso matchers","categories":[],"tags":[{"name":"android自动化","slug":"android自动化","permalink":"http://yoursite.com/tags/android自动化/"}],"keywords":[]},{"title":"QA请勿忘初心","slug":"qa-heart","date":"2016-12-13T13:42:54.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2016/12/13/qa-heart/","link":"","permalink":"http://yoursite.com/2016/12/13/qa-heart/","excerpt":"","text":"首先让我们回顾一下QA与QC的区别：Quality Assurance :The planned and systematic activities implemented in a quality system so that quality requirements for a product or service will be fulfilled.Quality Control :The observation techniques and activities used to fulfill requirements for quality. QA的工作涉及软件研发流程的各个环节，且涉及到每一位参与研发的人员，但质量保证工作又不涉及具体的软件研发细节，侧重于整个流程。 QC则侧重于点，利用各种方法去检查某个功能是否满足业务需求。 thoughtworks 的QA则是这两者的混合体，你既要保证开发流程的质量，又要保证story的功能的是否正确。 来thoughtworks已经2年了，当过bqconf讲师与主持，参加过公司内各类测试相关活动，也阅读过g邮件中分享的关于test的话题，大部分人关注点都离不开自动化测试，面试的QA也说想到thoughtworks来学习高深的自动化测试，仿佛自动化测试代表了整个QA界，我反对盲目的自动化测试，确切的说反对盲目的UI自动化测试。很多QA在自动化测试海洋里迷失了自己。我要强调自动化测试: 真的没有银弹。 QA的最终价值体现Faster Delivery Of Quality Software From Idea To Consumer 确保项目的正确性所以自动化测试只是其中的一小部分。如上图顶部和底部的文字是对一个QA所能带给项目的总结：“我们在开发正确的产品吗？如果是，那么我们开发的产品正确吗？”所以QA首先需要在整个个项目过程中不断询问的所有成员上述问题，确保团队是在开发客户所需的产品，而不是自己YY出来的产品。 确保流程的正确性Quality is not just in the software but also in the process 质量从来都不只是QA的职责，而是整个团队的职责。但QA如果自己都不注重，不督促组内成员改进质量，再将责任强加于整个团队，那么产品质量又何谈提升与保证。中间的图片从一个QA的角度表明了一个用户故事的生命周期以及QA如何参与其中每个环节。 首先BA和客户将要开发的story列出之后，BA与QA可以一起pair编写具体story的内容，场景与验收条件,利用自己对业务以及系统的熟悉度，尽量的配合BA将story中坑尽量排除掉。 所有参与kick off 角色，都应该提前了解story内容。在kick off过程中，提出自己对story疑问。尽量将业务需求上问题在这个阶段解决。在完成kick off后，QA可以和dev一起pair完成编写unit test 以及Automated Acceptance Tests，身为一个敏捷QA，我们起码要了解团队选用的单元测试工具，熟悉项目的技术架构，这样更好的便于我们对整个项目质量把控，在与dev pair的过程中，即帮助dev分析业务场景的分支，来确保单元测试覆盖的是正确的场景，而不是为了交代上级随便乱写的单元测试，也帮助QA熟悉代码，提高编码能力。当DEV完成编码工作后，这时QA UX BA DEV一起检查story，是否按照story AC来检查是否完成对应的功能。UX也可发表对story UI以及交互一些看法，有任何问题及时讨论后，将问题尽早的反馈给客户。当开发交付一部分功能之后，QA就可以做常规的用户故事测试，几个迭代之后，QA开始进行跨功能需求测试和探索性测试等。根据探索性测试的结果，QA可能会调整测试策略，调整测试优先级，完善测试用例等等。上面这些QA实践貌似已经很完美,其实还差最重要的一环 quality analysis 。每次release后，我们总以为我们发布一个完美的产品，但却总能在新迭代开发过程中发现之前问题，历史总是惊人的相似，为什么，没有分析总结问题，以及相应的预防手段,那么同样的问题只会重现。同时我们也要回顾下自己在工作中真的将这些敏捷实践都应用到工作中吗，我想或多或少的都有所欠缺。对于一个QA来说，不应循规蹈矩照搬敏捷实践。例如，在kickoff中，发现dev，UX对story涉及的场景以及内容了解不清楚，QA也可能漏掉一些测试场景，那么我们可以在kickoff之前，加入一个pre- kick off的实践，留出时间，让每个角色都能够完整了解story。在kick off之中，ux没有办法完整的确认页面的字体大小或者颜色等是否正确，那么在sign off之后，我们也加入一个UX-test实践，帮助UX能够更好解决这些问题。所以每个项目也都有应适合自己项目的敏捷实践，发现项目存在的问题，持续改进才是最佳实践。 再来谈谈自动化测试吧。上面的测试金字塔对于大家来说再熟悉不过了，对于自动化测试来说最有价值的仍然是单元测试，但对于QA来说无疑最复杂的。大部分QA或者tester，仍然以UI自动化为重心。之所以反对盲目的UI自动化测试，因为变化频繁的UI设计，极低投入产生比，都应该让我们重新思考下UI自动化的价值。 我们需要一个实施UI自动化正确的方式： 能不用UI自动化测试就不用，梳理业务主线，只保留用户操作最频繁，交互最多的场景。 根据面向对象设计的原则，构建适合项目的UI自动化框架，无论自己编写框架，还是采用开源框架。 尽量采用独立测试数据，确保运行测试不受影响。例如采用mock数据库或者每次运行时还原测试数据库。回到正题，面对自动化测试的大潮，QA应该关注什么？ 编码规范，真实例子，dev对于类名命名没有用Camel-Case，造成在linux系统中部署不成功，python中乱使用缩进等。 其实都可以避免到，例如开发工具加入自动检查，或者在CI上加入校验编码规范的步骤，采用一些工具就可以达到目的，jshint，RuboCop等。 pair完成单元测试或API测试等，一方面可以提高QA的编码能力，另一面可以给出dev一些建议，将单元测试覆盖到更多的场景。例如，如果你们项目采用react作为前端框架，如果你不能理解react virtual dom 与jsx，当我们在写UI自动化脚本时，你会发现根本无法进行下去，日常中我们定位元素全是这种1234567&lt;div class=\"styles__formField___1fyGy\"&gt;&lt;input type=\"text\" placeholder=\"Email\"&gt;&lt;svg class=\"styles__formIcon___37VGd\" viewBox=\"0 0 24 24\" style=\"display: inline-block; fill: rgba(0, 0, 0, 0.870588); height: 24px; width: 24px; user-select: none; transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;\"&gt;&lt;path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt; ,所有的页面都是js渲染出来的，如果你懂jsx，就知道只需要在对于的Component render方法中更改加入id等元素就可以搞定1234567render() &#123; return ( &lt;div&gt; &lt;input type=\"text\" placeholder=\"Email\" id=\"Email\"&gt; &lt;/div&gt; )&#125; 控制单元测试覆盖率，100%的单元测试覆盖率当然是最好的，但如果交付压力大，和客户商量后，我们可以尽量覆盖业务主线，而不是为了达到覆盖率延误了交付周期。 再来谈谈质量分析。作为一个QA，我们不仅要检测项目中存在问题，也要改进团队的实践活动，更重要的是预防问题的发生。 每次bugbash或相应迭代完成后，要分析统计，找出产生缺陷的环节，并采取措施防止问题再现。例如每次release或者bug bash之后,我可以按照功能模块与bug类型进行统计划分，分析统计bug的成因，例如某次迭代我们bug数量激增，经调查，发现我们对某些模块的前端代码进行了重构，但缺乏相应的单元测试与集成测试，造成了我们没有及时发现bug。之后我们就对应的采取措施防止问题再现。 总结分析报告，及时反馈这些信息给团队。总结分析是一个长期的任务，每次bug数量的变动，都会直接体现整个团队上次迭代的开发质量，例如bug数量减少了，可以鼓励成员再接再厉。或者某几次迭代某些模块bug成上升趋势，那么就需要组织团队一起讨论问题根源，采取措施防止问题重现。 利用代码质量分析工具帮助我们尽早预防问题的发生。例如sonar代码质量管理平台，可以帮助我们从代码复杂度，重复代码，单元测试覆盖率，编码规范等纬度来分析我们代码所存在的问题。当然也有其他的开源工具，像RubyCritic，/plato不同的语言都会有相应的工具。 在线监控，利用像newrelic，airbnb等监控工具对部署在本地或在云中的web应用程序进行监控、故障修复、诊断、线程分析以及容量计划。这样就算们产品环境有任何问题，我们都会及时响应，尽早修复，减低损失。 最后让我们在看看QA应具有那些能力与技能. 软技能方面包括风险控制，辅导他人，沟通能力，分析定位等。技能方面则包括缺陷管理，流程改进，测试分析，可用性测试，性能测试，安全测试等。 写在最后回顾上面这些实践，其实我们可以做的更好，而不是把团队的质量全都交给自动化，回归QA的应有的初心，让我们从各个方面改进质量，带给团队更好的未来。","categories":[],"tags":[{"name":"gatling","slug":"gatling","permalink":"http://yoursite.com/tags/gatling/"}],"keywords":[]},{"title":"espresso系列3--测试实践","slug":"espresso3","date":"2016-12-08T14:30:17.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2016/12/08/espresso3/","link":"","permalink":"http://yoursite.com/2016/12/08/espresso3/","excerpt":"","text":"前言前2篇我们已经详细介绍了espresso的架构以及相应的API，相信大家也有了一定的了解，理论讲的再多，还是不如手上自己敲一遍代码。还是深入浅出系列的套路，让我这个小司机带大家一步一步进入espresso的世界吧。 环境准备github，如果你还用svn的话，请放弃阅读本系列文章，太low了，而且本系列的code都是采用google官方的espresso的demo，都来源于github。android studio,这个不用说，目前android开发者最好的工具，并且他有很多帮助espresso测试的插件或功能，比如录制功能等。android sdk，这个更不用说，如果你连这个都没，还学什么android。genymotion,android目前来说最好的模拟器，虽然原生的也很不错，但是开发者首先得还是genymotion 首先使用android studio创建项目最好你已经拥有了项目源码，espresso并不是单纯的黑盒ui测试工具，它能干得事情很多，包括单元测试，集成测试，甚至在mock服务，以及将你需要的内容注入到代码中，所以我把称为灰盒工具。如果之前没有做个android项目的话，也可以在github上找一些开源的android app 练手。不过建议大家从espresso demo库入手。 创建项目 如上图，我们可以创建新的项目，导入已经存在android项目，从版本管理软件中导入，从gradle等其他工具中导入，以及获取android代码样例导入。google android 所有的测试demo都在以下github地址 https://github.com/googlesamples/android-testing.git下载完成后，我们进入espresso目录，可以看到espresso的demo还是很丰富的。1234567891011121314151617# lqi @ CNlqi-3 in ~/work/test/android/android-testing on git:master x [0:19:24]$ cd ui/espresso# lqi @ CNlqi-3 in ~/work/test/android/android-testing/ui/espresso on git:master x [0:19:31]$ lsBasicSample CustomMatcherSample EspressoSpoonDemo IntentsAdvancedSample MultiWindowSample WebBasicSampleBasicSampleBundled DataAdapterSample IdlingResourceSample IntentsBasicSample RecyclerViewSample spoon-gradle-plugin# lqi @ CNlqi-3 in ~/work/test/android/android-testing/ui/espresso on git:master x [0:19:37]$ cd BasicSample# lqi @ CNlqi-3 in ~/work/test/android/android-testing/ui/espresso/BasicSample on git:master x [0:19:40]$ pwd/Users/lqi/work/test/android/android-testing/ui/espresso/BasicSample# lqi @ CNlqi-3 in ~/work/test/android/android-testing/ui/espresso/BasicSample on git:master x [0:20:42]$ 导入项目选择BasicSample导入或者直接命令行studio .打开该项目。·外层的build.gradle文件设置的是整个项目的一些配置,例如依赖的类库，远程的仓库repositories。编译器的版本，espresso的版本等。 123456789101112131415161718192021222324252627// Top-level build file where you can add configuration options common to all sub-projects/modules.buildscript &#123; repositories &#123; jcenter() &#125; dependencies &#123; classpath 'com.android.tools.build:gradle:2.1.2' // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125;allprojects &#123; repositories &#123; jcenter() &#125;&#125;ext &#123; buildToolsVersion = \"24.0.1\" supportLibVersion = \"24.2.0\" runnerVersion = \"0.5\" rulesVersion = \"0.5\" espressoVersion = \"2.2.2\"&#125; 目录结构app目录为项目主目录包含项目源代码以及测试代码app里面也包含build.gradle文件，有时候项目可能包含几个主目录，那么各个目录的下的build.gradle文件都继承自顶层的build.gradle文件。app下的build.gradle文件配置了android的配置信息，以及会用到的依赖。 12345678910111213141516171819202122232425262728293031apply plugin: 'com.android.application'android &#123; compileSdkVersion 24 buildToolsVersion rootProject.buildToolsVersion defaultConfig &#123; applicationId \"com.example.android.testing.espresso.BasicSample\" minSdkVersion 10 targetSdkVersion 24 versionCode 1 versionName \"1.0\" testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" &#125; lintOptions &#123; abortOnError false &#125; productFlavors &#123; &#125;&#125;dependencies &#123; // App dependencies compile 'com.android.support:support-annotations:' + rootProject.supportLibVersion; compile 'com.google.guava:guava:18.0' // Testing-only dependencies // Force usage of support annotations in the test app, since it is internally used by the runner module. androidTestCompile 'com.android.support:support-annotations:' + rootProject.supportLibVersion; androidTestCompile 'com.android.support.test:runner:' + rootProject.runnerVersion; androidTestCompile 'com.android.support.test:rules:' + rootProject.rulesVersion; androidTestCompile 'com.android.support.test.espresso:espresso-core:' + rootProject.espressoVersion;&#125; BasicSample APP就长样子。 启动模拟器首先启动android emulator/genymotion,之后直接点击run按钮就能部署app到模拟器上。log如下.123456789101112131415161718192021Testing started at 2:32 PM ...12/09 14:32:04: Launching ChangeTextBehaviorTe...$ adb push /Users/lqi/work/test/android/android-testing/ui/espresso/BasicSample/app/build/outputs/apk/app-debug.apk /data/local/tmp/com.example.android.testing.espresso.BasicSample$ adb shell pm install -r \"/data/local/tmp/com.example.android.testing.espresso.BasicSample\" pkg: /data/local/tmp/com.example.android.testing.espresso.BasicSampleSuccess$ adb push /Users/lqi/work/test/android/android-testing/ui/espresso/BasicSample/app/build/outputs/apk/app-debug-androidTest-unaligned.apk /data/local/tmp/com.example.android.testing.espresso.BasicSample.test$ adb shell pm install -r \"/data/local/tmp/com.example.android.testing.espresso.BasicSample.test\" pkg: /data/local/tmp/com.example.android.testing.espresso.BasicSample.testSuccessRunning tests$ adb shell am instrument -w -r -e debug false -e class com.example.android.testing.espresso.BasicSample.ChangeTextBehaviorTest com.example.android.testing.espresso.BasicSample.test/android.support.test.runner.AndroidJUnitRunnerClient not ready yet..Started running testsTests ran to completion. 编写测试此实例BasicSample包含1个textView,1个EditText和2个button，当点击change text 按钮时，会将edittext的值填入textview中。当点击open activity and change text 按钮时，将打开一个新的页面（姑且叫这样吧）并将edittext内容显示在这个页面。@RunWith(AndroidJUnit4.class)采用了JUnit 4风格进行编写 首先我们需要新建一个测试类。ChangeTextBehaviorTest 12public class ChangeTextBehaviorTest &#123; &#125; 首先创建一个@Rule,ActivityTestRule用来指明被测试的Activity;@Rule: 简单来说，是为各个测试方法提供一些支持。具体来说，比如我需要测试一个Activity，那么我可以在@Rule注解下面采用一个ActivityTestRule，该类提供了对相应Activity的功能测试的支持。该类可以在@Before和@Test标识的方法执行之前确保将Activity运行起来，并且在所有@Test和@After方法执行结束之后将Activity杀死。在整个测试期间，每个测试方法都可以直接对相应Activity进行修改和访问。 123@Rule public ActivityTestRule&lt;MainActivity&gt; mActivityRule = new ActivityTestRule&lt;&gt;( MainActivity.class); 标识一个测试方法。一个测试类中可以有多个测试方法，每个测试方法需要用一个@Test注解来标识。以下代码找到editTextUserInput输入‘Espresso’，关闭键盘。点击changeTextBt按钮。检查textToBeChanged的值是否为‘Espresso’。12345678910@Testpublic void changeText_sameActivity() &#123; // Type text and then press the button. onView(withId(R.id.editTextUserInput)) .perform(typeText(STRING_TO_BE_TYPED), closeSoftKeyboard()); onView(withId(R.id.changeTextBt)).perform(click()); // Check that the text was changed. onView(withId(R.id.textToBeChanged)).check(matches(withText(STRING_TO_BE_TYPED)));&#125; 顺便说说其他junit4注解的用法 @Before: 标识在运行测试方法之前运行的代码。可以支持同一个Class中有多个@Before，但是这些方法的执行顺序是随机的。该注解替代了JUnit 3中的setUp()方法。 @After: 标识在运行测试方法结束之后运行的代码。可以在其中做一些释放资源的操作。该注解替代了JUnit 3中的tearDown()方法。 @BeforeClass: 为测试类标识一个static方法，在测试之前只执行一次。 @AfterClass: 为测试类标识一个static方法，在所有测试方法结束之后只执行一次。 @Test(timeout=&lt;milliseconds&gt;): 为测试方法设定超时时间。 到了这里我们要说下怎么定位所需的元素，其实和web差不多，我们可以利用layout inspector与android device monitor工具。在写一个测试，在editTextUserInput输入‘Espresso’，之后关闭键盘。点击activityChangeTextBtn按钮，查看show_text_view的值是否为‘Espresso’。12345678910@Test public void changeText_newActivity() &#123; // Type text and then press the button. onView(withId(R.id.editTextUserInput)).perform(typeText(STRING_TO_BE_TYPED), closeSoftKeyboard()); onView(withId(R.id.activityChangeTextBtn)).perform(click()); // This view is in a different Activity, no need to tell Espresso. onView(withId(R.id.show_text_view)).check(matches(withText(STRING_TO_BE_TYPED))); &#125; 以上是espresso最常见的测试，希望大家能够好好理解。 接下来我们看看espresso如何对AdapterView控制器测试。​AdapterView​ 是一个从适配器中动态加载数据的特殊控件。最常见的 ​AdapterView​ 是 ListView​。与像 ​LinearLayout​ 这样的静态控件相反，在当前视图结构中，可能只加载了 ​AdapterView​ 子控件的一部分， 简单的 ​onview()​ 可能会找不到当前没有被加载的视图。Espresso 通过提供单独的 onData()​方法来切入点处理此问题，它可以在操作适配器中有该问题的条目或该条目的子项之前将其加载（使其获取焦点）。导入espresso demo中的MultiWindowSample项目该测试是从ArrayAdapter类型的dropdown_item控件中选出需要的值，类似我们用搜索引擎时，显示的list。1234567891011121314151617@Test public void autoCompleteTextView_onDataClickAndCheck() &#123; // NB: The autocompletion box is implemented with a ListView, so the preferred way // to interact with it is onData(). We can use inRoot here too! onView(withId(R.id.auto_complete_text_view)) .perform(typeText(\"S\"), closeSoftKeyboard()); // This is useful because some of the completions may not be part of the View Hierarchy // unless you scroll around the list. onData(allOf(instanceOf(String.class), is(\"Baltic Sea\"))) .inRoot(withDecorView(not(is(mActivity.getWindow().getDecorView())))) .perform(click()); // The text should be filled in. onView(withId(R.id.auto_complete_text_view)) .check(matches(withText(\"Baltic Sea\"))); &#125; ，AutoCompleteText的选择等。 这些测试项都有一个共同的特点。即不在主UI布局的结构(layout,及其include的layout)之中，是不能直接定位的。 所以这里就需要使用inRoot( ) 了。onData(allOf(instanceOf(String.class), is(&quot;Baltic Sea&quot;))) .inRoot(withDecorView(not(is(mActivity.getWindow().getDecorView())))) .perform(click());以上代码就解决了之前UiAutomator不支持Toast的验证的问题。 运行测试运行测试的方法很多，第一种命令行执行。切换到当前项目目录，终端运行./gradlew cAT其中，cAT意为connectedAndroidTest。 另一种方式是在android studio中，点击run按钮，或者右键执行单一测试。 这一章还是以基础的实践为主，之后我们将深入架构，来看看espresso的API 方法，帮助大家理解API 更好更快的编写测试。","categories":[],"tags":[{"name":"android自动化","slug":"android自动化","permalink":"http://yoursite.com/tags/android自动化/"}],"keywords":[]},{"title":"espresso基础架构与API分析","slug":"espresso2","date":"2016-12-02T03:57:43.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2016/12/02/espresso2/","link":"","permalink":"http://yoursite.com/2016/12/02/espresso2/","excerpt":"","text":"espresso基础架构与API分析Espresso测试框架提供了一组API来构建UI测试，以测试应用程序内的用户流。 这些API让您能够编写简洁，运行可靠的自动化UI测试。 Espresso非常适合编写白盒式自动化测试，其中测试代码使用来自所测试的应用程序的实现代码细节。 Espresso测试框架的主要功能包括： 用于在目标应用程序中查看和适配器匹配的灵活API。 有关详细信息，请参阅View matching。一组广泛的操作API，用于自动化UI交互。 有关更多信息，请参阅 Action APIs。UI线程同步提高测试的可靠性。 有关更多信息，请参阅 UI thread synchronization。可以作为参数传入 ​ViewInteraction.check()​方法中的 ViewAssertion 的集合。通常，你会使用带有视图匹配器的匹配断言来判断当前被选中视图的状态，请参阅ViewAssertions需要Android 2.2（API级别8）或更高版本。 View matchingonView()Espresso.onView()方法允许您访问目标应用程序中的UI组件并与其进行交互。 该方法接受Matcher参数并搜索视图层次以定位满足某些给定标准的对应View实例。 您可以通过指定以下条件来优化搜索： 视图的类名 视图的内容描述 视图的R.id 视图中显示的文本例如，要定位ID值为my_button的按钮，您可以指定一个匹配器，如下所示： onView（withId（R.id.my_button））;如果搜索成功，onView()方法返回一个引用，该引用允许您对目标视图执行用户操作和测试断言。 123public static ViewInteraction onView(final Matcher&lt;View&gt; viewMatcher) &#123; return BASE.plus(new ViewInteractionModule(viewMatcher)).viewInteraction(); &#125; ViewMatchersonView方法需要传入类型为Matcher泛型viewMatcher对象. ViewMatchers类中方法有1isAssignableFrom，withClassName，isDisplayed，isCompletelyDisplayed，isDisplayingAtLeast，isEnabled，isFocusable，hasFocus，isSelected，hasSibling，withContentDescription，withContentDescription，withContentDescription，withId，withResourceName，withTagKey，withTagValue，withText，withCharSequence，withHint，isChecked，isNotChecked，withCheckBoxState，hasContentDescription，hasDescendant，isClickable，isDescendantOfA，withEffectiveVisibility，withParent，withChild，isRoot，supportsInputMethods，hasImeAction，hasImeAction，hasLinks，assertThat，withSpinnerText，isJavascriptEnabled，hasErrorText，withInputType。 这些方法能够帮助我们快速定位到特定的视图。 我们来看看常用的几个方法 withId 返回基于资源ids匹配视图的匹配器。 withText 返回基于TextView的文本属性值匹配TextView的匹配器。onView(allOf(withId(R.id.my_view), withText(&quot;Hello!&quot;))) isDisplayed 返回与当前显示在屏幕上的视图匹配的匹配器给用户。 如下 Espresso.onView(ViewMatchers.withId(R.id.mpu_summary_send_receipt_button)) .check(ViewAssertions.matches(ViewMatchers.isDisplayed()));其他API方法可以在以下文档中找到具体用法和解释，我们并不需要记住每个方法，遇到具体的场景的时候再过来查询也来得及viewmatchers-API ViewMatchers与hamcrest匹配器配合使用什么是hamcrest？ Hamcrest框架是junit4框架新引入的断言框架，Hamcest提供了一套匹配符Matcher，这些匹配符更接近自然语言，可读性高，更加灵活。我们可以通过各种viewmatchers与Hamcrest组合匹配器来缩小搜索的范围。如以下示例所示： onView(allOf(withId(R.id.button_signin), withText(&quot;Sign-in&quot;))); 你也可以使用 ​not​ 反转匹配： onView(allOf(withId(R.id.button_signin), not(withText(&quot;Sign-out&quot;))));注意：一个工程化的应用中，所有用户可与之交互的视图都应该包含说明文字或有一个内容描述（参考 Android 可访问性指导）。如果你不能通过使用 ‘withText’ 或 ‘withContentDescripiton’ 来缩小onView的搜索范围，可以认为这是一个可访问性的 bug。 请使用最少的匹配器来定位视图。不要过指定，因为这将强制框架做无用功。例如，如果一个视图可以通过它的文字唯一确定，你不需要说明该视图也可以通过 ​TextView​ 指定。对许多视图而言，使用它的​R.id​值就足够了。 更多的hamcrest api请查看hamcrest api ###onData当espresso在AdapterView中查找视图时需要用onData方法，例如在AdapterView小部件中，视图在运行时动态填充子视图。如果要测试的目标视图位于AdapterView（例如ListView，GridView或Spinner）中，则onView()方法可能无法工作，因为只有一部分视图可能会加载到当前视图层次结构中。 相反，调用onData()方法可获取DataInteraction对象以访问目标视图元素。 Espresso处理将目标视图元素加载到当前视图层次结构中。 Espresso还负责滚动到目标元素，并将放在焦点元素。 注意：onData()方法不检查您指定的项目是否与视图对应。 Espresso仅搜索当前视图层次结构。如果没有找到匹配，该方法将抛出NoMatchingViewException异常。 下面的代码片段展示了如何使用onData()方法和Hamcrest匹配来搜索包含给定字符串的列表中的特定行。在此示例中，LongListActivity类包含通过SimpleAdapter公开的字符串列表。 12onData(allOf(is(instanceOf(Map.class)), hasEntry(equalTo(LongListActivity.ROW_TEXT), is(\"test input\"))); Performing Actions调用ViewInteraction.perform()或DataInteraction.perform()方法来模拟UI组件上的用户交互。您必须传入一个或多个ViewAction对象作为参数。Espresso按照给定的顺序依次触发每个动作，并在主线程中执行它们。ViewActions类提供了指定常用操作的帮助方法列表。您可以使用这些方法作为方便的快捷方式，而不是创建和配置单个ViewAction对象。您可以指定以下操作： ViewActions.click()：点击视图。 ViewActions.typeText()：点击视图并输入指定的字符串。 ViewActions.scrollTo()：滚动到视图。目标视图必须是来自ScrollView的子类，它的android：visibility属性的值必须是VISIBLE。对于扩展AdapterView（例如，ListView）的视图，onData()方法为您处理滚动。 ViewActions.pressKey()：使用指定的键码执行键按下。 ViewActions.clearText()：清除目标视图中的文本。如果目标视图位于ScrollView内部，请先执行ViewActions.scrollTo()操作，以在其他操作进行之前在屏幕中显示视图。如果视图已显示，ViewActions.scrollTo()操作将不起作用。 例如，要模拟输入字符串值并按按钮提交值，您可以编写类似这样的自动测试脚本。 ViewInteraction.perform()和DataInteraction.perform()方法采用一个或多个ViewAction参数，并按提供的顺序运行操作。 //将文本键入EditText视图，然后关闭软键盘12onView(withId(R.id.editTextUserInput)） .perform(typeText(STRING_TO_BE_TYPED),closeSoftKeyboard()）; //按按钮提交文本更改onView(withId(R.id.changeTextBt)).perform(click()); 其他action api 请查看https://developer.android.com/reference/android/support/test/espresso/action/package-summary.html Verifying Results调用ViewInteraction.check()或DataInteraction.check()方法来断言UI中的视图匹配一些预期状态。 您必须传递一个ViewAssertion对象作为参数。 如果断言失败，Espresso会抛出一个AssertionFailedError。ViewAssertions类提供了用于指定公共断言的帮助程序方法的列表。 您可以使用的断言包括：doesNotExist：断言没有与当前视图层次结构中指定的条件匹配的视图。matches：断言指定视图存在于当前视图层次结构中，并且其状态与某个给定的Hamcrest匹配器匹配。selectedDescendentsMatch：存在指定的孩子为父视图查看的声明，它们的状态与某个给定的Hamcrest匹配器匹配。 以下代码段显示了如何检查UI中显示的文本的值与之前在EditText字段中输入的文本的值相同。123456789public void testChangeText_sameActivity() &#123; // Type text and then press the button. ... onView(withText(R.string.item_1_text)) .check(doesNotExist()); // Check that the text was changed. onView(withId(R.id.textToBeChanged)) .check(matches(withText(STRING_TO_BE_TYPED)));&#125; ViewMatchers, ViewActions, ViewAssertions 组成了espresso的基础架构，所以要真正的掌握espresso必须将这3部分基础熟悉。上一节espresso基础","categories":[],"tags":[{"name":"android自动化","slug":"android自动化","permalink":"http://yoursite.com/tags/android自动化/"}],"keywords":[]},{"title":"espresso系列一简介","slug":"expresso","date":"2016-11-30T08:59:53.000Z","updated":"2017-09-21T07:42:27.000Z","comments":true,"path":"2016/11/30/expresso/","link":"","permalink":"http://yoursite.com/2016/11/30/expresso/","excerpt":"","text":"espresso是什么？ Espresso 测试框架提供了一系列的API用于构建UI测试来测试app内用户流操作。这些API让你可以编写简洁可靠的自动化UI测试。Espresso非常适合用来编写白盒测试，其中测试代码的编写是利用了被测试app中程序代码实现细节。 Espresso测试可运行android 2.3.3(API 10 level)以及更高版本的设备上。使用Espresso的主要好处是,当你运行测试时它提供了自动的同步测试动作与应用程序UI。Espresso会检测你的主线程是否为空闲状态,如果你的没有被利用,这时候他就会抢占主线程运行测试，所以它能够在恰当的时间运行您的测试命令,提高测试的可靠性。这种能力也使您无须添加任何额外的措施,例如在测试代码中加入thread.sleep()。 Espresso测试框架基于 instrumentation-based API 并且使用 AndroidJUnitRunner测试驱动运行测试。 Espresso测试框架的关键特性包括： [ ] 提供了灵活的API用于匹配目标app中view和adapter。更多的信息，见View匹配 [ ] 大而全的 行为 api（action APIs） 用于自动化UI交互。更多的信息，见行为APIs [ ] UI线程同步来提高测试可靠性。更多信息，见UI线程同步 版本兼容Espresso 支持如下 API： 代号 API Froyo 8 Gingerbread 10 Ice Cream Sandwich 15 Jelly Bean 16, 17 ,18 KitKat 19 Lollipop 21 注意：切记 espresso 有版本断层，并不是全版本支持，请注意你设备android系统的版本，以免造成不必要的免费。不过最新的android系统版本 espresso都是支持的。 配置espresso官方文档建议我们在开始配置之前，先看看如何开始测试，我觉得非常有必要，很多新手上来就拿着不知道那找来的例子运行下，就以为自己真的什么都会。这样的真的很不好，官方文档才是最好的老师，让我们一步一步慢慢来。 android是基于JUnit测试框架,单元测试,您可以运行任意本地的单元测试在JVM或instrumented tests在Android设备上。 测试类型当使用Android studio 编写任何你的测试时,你的测试代码必须进入两个不同的代码目录(源集)。每个模块在您的项目中,Android Studio都包括源集,对应于以下测试类型: 本地单元测试位于 module-name/src/test/java/. 这些测试运行在本地JVM并没有访问Android框架api功能的权限。让我们首先开始如何构建本地单元测试。 构建本地单元测试如果您的单元测试没有依赖或只有简单的依赖Android系统,你应该在本地开发机器上运行您的测试。这种测试方法是有效的,因为它可以帮助你避免加载目标应用程序时的开销以及单元测试需要在一个物理设备或模拟器运行。因此,运行单元测试的时间将大大的减少。使用这种方法,您通常使用mocking 框架,列如Mockito、这可以帮助我们mock测试需要的依赖。 设置测试环境在你的Android Studio项目时,您必须为本地单元测试存储源文件在 module-name/src/test/java/。当你创建一个新项目，这个目录就已经存在。您还需要为您的项目配置测试依赖,因为需要使用JUnit 4的框架提供标准的api。如果您的测试需要与Android依赖关系,包括使用Mockito来简化你的单元测试。更多地使用 mock objects在本地的单元测试中,请查看Mocking Android依赖关系。在你的应用程序的顶层目录的build.gradle文件里,您需要指定这些库的依赖关系: 123456dependencies &#123; // Required -- JUnit 4 framework testCompile 'junit:junit:4.12' // Optional -- Mockito framework testCompile 'org.mockito:mockito-core:1.10.19'&#125; 创建本地单元测试类你当地的单元测试类应该写成一个JUnit 4测试类。JUnit是最受欢迎和广泛使用为Java单元测试框架。这个框架的最新版本,JUnit4,允许您在一个比之前的版更清洁和更灵活的方法中编写测试。之前的Android单元测试基于JUnit3框架,使用JUnit4,您不需要扩展junit.framework。TestCase类。你也不需要在测试方法名称包含“test”关键字,或者使用junit的任何类在junit.framework或junit.extensions包。 创建一个基本的JUnit 4测试类,首先需要创建一个Java类,它包含一个或多个测试方法。一个测试方法以@Test annotation标注并且包含代码的实现和验证的代码中包含您想要测试的一个功能组件。 下面的例子展示了如何实现一个本地的单元测试类。测试方法emailValidator_CorrectEmailSimple_ReturnsTrue验证isValidEmail()方法，应用程序返回正确的结果。12345678910111213import org.junit.Test;import java.util.regex.Pattern;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;public class EmailValidatorTest &#123; @Test public void emailValidator_CorrectEmailSimple_ReturnsTrue() &#123; assertThat(EmailValidator.isValidEmail(\"name@email.com\"), is(true)); &#125; ...&#125; 测试组件在应用程序返回预期的结果,使用junit.Assert方法来执行验证检查(或断言)来对比测试组件的状态和一些期望值。为了使测试具有更好的可读的,您可以使用Hamcrest matchers(如 is()和equalTo()方法)来匹配返回的结果与预期的结果。 Mock Android依赖关系默认情况下,Android插件Gradle执行本地的单元测试与修改后的版本的Android.jar库,它不包含任何实际的代码。相反,从你的单元测试方法调用安卓类抛出异常。这确保你的测试代码和不依赖于任何特定的行为的Android平台(你没有显式地mock)。您可以使用模拟框架在代码中存根外部依赖关系，以便轻松测试您的组件是否按照预期的方式与依赖关系交互。 通过用模拟对象替换Android依赖项，您可以将单元测试与Android系统的其余部分隔离，同时验证这些依赖关系中的正确方法是否被调用。 Java的Mockito mocking框架（1.9.5及更高版本）提供了与Android单元测试的兼容性。 使用Mockito，您可以配置模拟对象以在调用时返回一些特定值。 要使用此框架将mock对象添加到本地单元测试，请遵循以下编程模型： 在build.gradle文件中包含Mockito库依赖关系，如设置测试环境中所述。 在单元测试类定义的开始，添加@RunWith（MockitoJUnitRunner.class）注释。 这个注释告诉Mockito测试运行器验证你的框架的使用是正确的，并简化了你的模拟对象的初始化。 要为Android依赖项创建模拟对象，请在字段声明之前添加@Mock注释。 要存根依赖关系的行为，可以使用when（）和thenReturn（）方法指定条件并返回值。 以下示例显示如何创建使用mock上下文对象的单元测试。12345678910111213141516171819202122232425262728293031import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.CoreMatchers.*;import static org.mockito.Mockito.*;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.Mock;import org.mockito.runners.MockitoJUnitRunner;import android.content.SharedPreferences;@RunWith(MockitoJUnitRunner.class)public class UnitTestSample &#123; private static final String FAKE_STRING = \"HELLO WORLD\"; @Mock Context mMockContext; @Test public void readStringFromContext_LocalizedString() &#123; // Given a mocked Context injected into the object under test... when(mMockContext.getString(R.string.hello_word)) .thenReturn(FAKE_STRING); ClassUnderTest myObjectUnderTest = new ClassUnderTest(mMockContext); // ...when the string is returned from the object under test... String result = myObjectUnderTest.getHelloWorldString(); // ...then the result should be the expected one. assertThat(result, is(FAKE_STRING)); &#125;&#125; 要了解有关使用Mockito框架的更多信息，请参阅示例代码中的Mockito API参考和SharedPreferencesHelperTest类。如果Android.jar中的Android API抛出的异常对于测试有问题，您可以更改行为，以使方法通过在项目的顶级build.gradle文件中添加以下配置来返回null或零：android { ... testOptions { unitTests.returnDefaultValues = true } } 警告：将returnDefaultValues属性设置为true应该小心。 null/zero 返回值可以在测试中引入回归，这难以调试，并且可能允许失败的测试通过。 只能使用它作为最后的手段。 运行本地测试要运行本地单元测试，请按照下列步骤操作： 通过单击工具栏中的 Sync Project，确保您的项目与Gradle同步。 使用以下方法之一运行测试： 要运行单个测试，请打开“Project”窗口，然后右键单击测试，然后单击RUN。 要测试类中的所有方法，请右键单击测试文件中的类或方法，然后单击Run。 要在目录中运行所有测试，请右键单击目录并选择Run test。Gradle的Android插件编译位于默认目录（src / test / java /）中的本地单元测试代码，构建一个测试应用程序，并使用默认的测试运行器类在本地执行它。 然后，Android Studio将在“运行”窗口中显示结果。 Instrumented tests位于module-name/src/androidTest/java/。这些都是必须在Android硬件设备或Android模拟器上运行的测试。 仪表化测试内置于在测试下的应用旁边的设备上运行的APK。 系统在同一个过程中运行测试APK和您的应用程序，因此您的测试可以调用方法和修改应用程序中的字段，并自动化用户与您的应用程序的互动。 有关如何创建检测测试的信息，请参阅以下主题： 构建测试单元测试：使用Android依赖项构建复杂的单元测试，这些测试不能满足模拟对象。自动化用户界面测试：创建测试以验证用户界面在单个应用程序内的用户交互或多个应用程序之间的交互操作正确。测试应用程序组件集成：验证用户不直接与之交互的组件（例如服务或内容提供者）的行为。但是，上述的本地单元测试和instrumented tests只是用于区分在本地JVM上运行的测试和在Android平台（在硬件设备或模拟器上）运行的测试之间的术语。 在构建完整测试套件时应该理解的真实测试类型在下表中描述。 Type 子类型 描述 Unit tests Local Unit Tests 本地单元测试在Java虚拟机（JVM）上本地运行的单元测试。当您的测试没有Android框架依赖项或者可以模拟Android框架依赖项时，使用这些测试来最小化执行时间。 Unit tests Instrumented unit tests 测试单元测试在Android设备或模拟器上运行的单元测试。这些测试可以访问Instrumentation信息，例如您要测试的应用程序的上下文。当你的测试有Android依赖，模拟对象不能满足时，使用这些测试。 Integration Tests Components within your app only 您的应用程序中的组件仅当用户执行特定操作或在其活动中输入特定输入时，此类型的测试验证目标应用程序的行为如预期。例如，它允许您检查目标应用程序返回正确的UI输出，以响应用户在应用程序活动中的互动。 Espresso等UI测试框架允许您以编程方式模拟用户操作并测试复杂的应用内用户交互。 Integration Tests Cross-app Components 跨应用程序组件此类型的测试验证不同用户应用程序之间或用户应用程序和系统应用程序之间的交互的正确行为。例如，当用户在Android设置菜单中执行操作时，您可能需要测试您的应用是否正确运行。支持跨应用程序交互的UI测试框架（如UI Automator）允许您为这些场景创建测试。 Test APIs以下是用于在Android上测试应用的常见API。JUnit您应该将您的单元或集成测试类写为JUnit 4测试类。 该框架提供了一种方便的方法来在测试中执行常见的setup, teardown, and assertion操作。 基本的JUnit 4测试类是包含一个或多个测试方法的Java类。 测试方法以@Test注释开始，包含练习和验证要测试的组件中的单个功能（即逻辑单元）的代码。 以下代码段显示了一个示例JUnit 4集成测试，它使用Espresso API对UI元素执行单击操作，然后检查是否显示预期的字符串。123456789101112131415@RunWith(AndroidJUnit4.class)@LargeTestpublic class MainActivityInstrumentationTest &#123; @Rule public ActivityTestRule mActivityRule = new ActivityTestRule&lt;&gt;( MainActivity.class); @Test public void sayHello()&#123; onView(withText(\"Say hello!\")).perform(click()); onView(withId(R.id.textView)).check(matches(withText(\"Hello, World!\"))); &#125;&#125; 在您的JUnit 4测试类中，您可以通过使用以下注释调用测试代码中的部分进行特殊处理： @Before：使用此注释来指定包含测试设置操作的代码块。测试类在每次测试之前调用此代码块。你可以有多个@Before方法，但是测试类调用这些方法的顺序不能保证。 @After：此注释指定一个包含测试拆分操作的代码块。测试类在每个测试方法之后调用这个代码块。您可以在测试代码中定义多个@After操作。使用此注释从内存释放任何资源。 @Test：使用此注释标记测试方法。单个测试类可以包含多个测试方法，每个测试方法都以此注释作为前缀。 @Rule：规则允许您以可重用的方式灵活地添加或重新定义每个测试方法的行为。在Android测试中，将此注释与Android测试支持库提供的测试规则类之一一起使用，例如ActivityTestRule或ServiceTestRule。 @BeforeClass：使用此注释为每个测试类指定仅调用一次的静态方法。此测试步骤对于消耗大的操作（例如连接到数据库）很有用。 @AfterClass：使用此注释为测试类指定静态方法，仅在类中的所有测试运行后调用。 这个测试步骤对释放在@BeforeClass块中分配的任何资源很有用。 @Test（timeout =）：一些注释支持传递元素的能力，您可以为其设置值。 例如，您可以为测试指定超时期限。 如果测试开始，但没有在给定的超时期间内完成，它会自动失败。 您必须以毫秒为单位指定超时期限，例如：@Test（timeout = 5000）。使用JUnit Assert类来验证对象状态的正确性。 assert方法将您从测试所期望的值与实际结果进行比较，如果比较失败，则抛出异常。 断言类更详细地描述这些方法。Android测试支持库Android测试支持库提供了一组API，允许您快速构建和运行应用程序的测试代码，包括JUnit 4和功能UI测试。 库包括以下基于工具的API，当您想要自动化测试时，这些API是有用的： AndroidJUnitRunner适用于Android的JUnit 4兼容测试运行器。espresso一个UI测试框架; 适用于在应用程序内的功能UI测试。UI automator适用于系统和已安装应用程序之间跨应用程序功能UI测试的UI测试框架。 断言类由于Android测试支持库API扩展JUnit，因此可以使用断言方法显示测试结果。断言方法将测试返回的实际值与预期值进行比较，如果比较测试失败，则抛出AssertionException异常。使用断言比记录更方便，并提供更好的测试性能。 为了简化测试开发，您应该使用Hamcrest库，它允许您使用Hamcrest匹配器API创建更灵活的测试。 Monkey 和 monkeyrunnerAndroid SDK包含两个用于功能级应用测试的工具： Monkey这是一个命令行工具，用于向设备发送按键，触摸和手势的伪随机流。您使用Android Debug Bridge（adb）工具运行它，并使用它来压力测试您的应用程序，报告所遇到的错误，或通过使用相同的随机数种子多次运行该工具来重复事件流。monkeyrunner此工具是用Python编写的测试程序的API和执行环境。 API包括用于连接到设备，安装和卸载包，截取屏幕截图，比较两个图像以及针对应用运行测试包的功能。使用API​​，您可以编写大量，强大和复杂的测试。您使用monkeyrunner命令行工具运行使用API​​的程序。 构建Android测试的指南以下文档提供了有关如何构建和运行各种测试类型的更多详细信息： 建立本地单元测试构建单元测试没有依赖或只有简单的依赖，你可以mock，它运行在本地JVM上。建筑仪表单元测试使用Android依赖项构建复杂的单元测试，这对于在硬件设备或模拟器上运行的模拟对象无法满足。自动化用户界面测试创建测试以验证用户界面在单个应用程序内的用户交互或多个应用程序之间的交互正确运行。测试应用程序集成验证用户不直接与之交互的组件（例如服务或内容提供者）的行为。测试显示性能编写测试应用程序UI性能的测试，以确保持续流畅的用户体验。ok 我们已经看完了 怎么开始android测试，我想大家一定有了很深入的了解了吧让我们进入正题 配置espresso在Android应用程序模块的build.gradle文件中，必须为Espresso引入jar依赖： 1234dependencies &#123; // Other dependencies ... androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'&#125; 关闭测试设备上的动画 - 在测试设备中打开系统动画可能会导致意外的结果，或可能导致测试失败。 通过打开开发者选项并关闭所有以下选项，从设置中关闭动画： 在设备上的设置-&gt;开发者选项中禁用一下三项设置： &gt; 窗口动画缩放 &gt; 过渡动画缩放 &gt; 动画程序时长缩放 确保你已经安装了最新的 Extras 下的 Android Support Repository设置junit为测试驱动框架在build.gradle 中 添加testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;完整的build.gradle 示例文件如下1234567891011121314151617181920212223242526272829303132​android.defaultConfigpply plugin: 'com.android.application'android &#123; compileSdkVersion 24 buildToolsVersion rootProject.buildToolsVersion defaultConfig &#123; applicationId \"com.example.android.testing.espresso.BasicSample\" minSdkVersion 10 targetSdkVersion 24 versionCode 1 versionName \"1.0\" testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" &#125; lintOptions &#123; abortOnError false &#125; productFlavors &#123; &#125;&#125;dependencies &#123; // App dependencies compile 'com.android.support:support-annotations:' + rootProject.supportLibVersion; compile 'com.google.guava:guava:18.0' // Testing-only dependencies // Force usage of support annotations in the test app, since it is internally used by the runner module. androidTestCompile 'com.android.support:support-annotations:' + rootProject.supportLibVersion; androidTestCompile 'com.android.support.test:runner:' + rootProject.runnerVersion; androidTestCompile 'com.android.support.test:rules:' + rootProject.rulesVersion; androidTestCompile 'com.android.support.test.espresso:espresso-core:' + rootProject.espressoVersion;&#125; 之后我们只需要在命令行中输入gradle就会帮我们下载依赖运行测试了，对了记着要安装gradle到你的系统中.","categories":[],"tags":[{"name":"android自动化","slug":"android自动化","permalink":"http://yoursite.com/tags/android自动化/"}],"keywords":[]},{"title":"从QA的角度来谈谈代码质量的改进","slug":"qaquilty","date":"2016-10-31T14:15:46.000Z","updated":"2017-09-21T07:40:24.000Z","comments":true,"path":"2016/10/31/qaquilty/","link":"","permalink":"http://yoursite.com/2016/10/31/qaquilty/","excerpt":"","text":"大部分人看到这个题目时，直接的反应是QA关心代码质量干嘛，能看懂代码吗？怎么给dev feedback？ 如果还有人持这样的观点后，那么我只能说too young too simple。首先我们得谈谈什么是代码质量？创建优秀的代码涉及到正确性、可维护性甚至优美性。正确性，最起码你的代码实现的业务逻辑是正确的。可维护性，公司中其他的小伙伴能看看懂你的代码逻辑，便于修改代码。优美性，符合各种代码规范，其他人看到代码后惊为天人。但是要做到以上几点绝非易事，首先你得有高超的编程能力，其次你对前端或后端的代码规范有深刻的理解，但是能有这样能力的人又有多少呢？我们都知道软件开发是团队合作才能完成的工作。那么项目的质量与客户的需求才是项目生存下去的关键。所以怎么才能改进项目代码的质量？我们先看看业界巨头公司都是如何做的？ microsoft怎么做？ 我们都知道微软是做操作系统出身的，其实微软的测试能力与测试工具都是业界中领先的，以下是两张表展示的是微软如何从visual studio与开发过程中提高代码质量 Visual Studio 标准 描述 使用代码分析工具分析应用程序质量 静态代码分析工具可查找 C++ 和托管代码里的设计、使用、可维护性和样式问题。 其中的许多问题可能导致难以在标准测试环境中重现的 bug。 单元测试代码 “测试资源管理器”可以在开发实践中轻松地集成单元测试。 可以使用 Microsoft 单元测试框架或若干第三方和开源框架之一。 测量托管代码的复杂性和可维护性 代码度量是一组软件度量值，使开发人员可以更好地了解他们正在开发的代码。 度量值包括函数和类的可维护性指数、函数的圈复杂度、类的继承深度和类耦合度的数值。 使用代码克隆检测功能查找重复代码 代码克隆工具可用于在整个 Visual Studio 解决方案内搜索 Visual C# 和 Visual Basic 项目中重复或高度相似的代码。 可以经常重构代码以消除重复代码，从而创建更易于维护的解决方案。 PreEmptive Analytics for Team Foundation Server PreEmptive Analytics for TFS CE 有助于将反馈驱动的开发过程集成到开发工作流中。 当应用程序在执行过程中发生错误时，它会自动将异常报告数据发回给 PreEmptive Analytics 服务。 然后，该服务将根据你定义的规则和阈值创建或更新 Microsoft Team Foundation Server 中的工作项。 PreEmptive Dotfuscator 和 Analytics CE PreEmptive Dotfuscator 是 .NET 模糊处理程序和压缩程序，有助于防止程序遭遇反向工程，同时使程序更小更高效。 开发过程中改进代码质量 标准 描述 设计和代码的检查准则 提供若干帮助进行设计和代码检查的技术，通过让其他同事检查代码来发现 bug 和不正确的假设。 安全代码编写准则 描述编写安全代码的技术和策略。 高质量代码签入准则 列出以不同方式检查代码以确保代码实现您的预期高质量设计目的的准则。 代码分析工具使用准则 提供几条使用代码分析工具的准则。 检测和更正 C/C++ 代码缺陷 描述如何使用用于托管代码的代码分析工具检测和更正代码缺陷。 代码分析签入策略 描述如何创建与 Team Foundation 源控件签入关联的自定义签入策略。 调试准则 提供几条查找代码缺陷的准则。 google 又是怎么做？ 代码审查。在你提交任何代码改动之前，你得找去代码“主人”签字确认。为了实现，评审者（被鼓励去）建议大修代码，而不是让它成为根本没有经过思考的“图章”代码。 按语言可读性要求坚持代码风格指南（请参阅这里）。除了让我们代码有统一的外观（所以我们能快速识别方法、变了等），我们的风格指南禁止了一些复杂、混乱、易出错的 C++ 特性（比如：class 类型的静态和全局变量）。 整个团队都致力改进我们代码库的质量，维护我们的核心库，不断做出更好的工具。 一个活跃的“code health”课题组。 发布软件时，不对外部期限承担责任。一般而言，这让我们可以正确做事，而非为了期限内完成任务把乱七八糟的代码拼凑起来。 “Fix it.” 例如，一个工程师或许说，“我认为我们真应该别再用过时的 Cruft Map 类（class）了。我打算在 1 月 20 日组织一次 Fix it。” 当 1 月 20 日来临时，大家应当暂停其正常运作，把他们代码中的 Cruft Maps 都换掉。在 1 月 21 日，Google 就永远和 Cruft Map 说拜拜了！不过最近，核心库团队已经很优秀了，貌似没有啥东西可再值得类似的 fix it 了。 测试文化。单元测试覆盖率可能接近 100%，我们有持续构建/整合/测试，还有知名的 “Testing on the Toilet” (请参见Google Testing Blog) facebook 呢？ 又有什么不一样 开发对质量负责： 开发从设计，实现，测试，到部署都要自己做。其它做工具，流程的工程师通过开发工具和流程来帮助开发人员更为简单方便地做测试，做部署和做监控。每个开发人员有自己单独的测试环境，测试环境就是运行在开发本地机器上，部署非常简单快速。测试环境用的是真实的用户数据。 持续集成和测试自动化：每周发布一次。星期天晚上，要发布的构建从主线上分支出来到发布分支，到星期二的中午如果没有大的问题，就可以上线了。所有的测试运行控制在10分钟以内，所以不需要考虑不运行哪些测试用例。运行所有测试用例。 （只是听说，没有经过考证。） 严格实施代码审计：在Facebook 做 code review时间大约占50%，管理者对代码质量负有一定责任 。甚至代码质量高于一切：Facebook Code review是重点KPI考核的对象，实行连坐制，如果因为代码质量问题，那么产生的KPI责任包括领导30％、程序员50％、审核人员20％。 在代码checkin之前，都要由专人进行review。Facebook 创始人兼 CEO 马克扎克伯格会亲自对 News Feed 每个代码更新把关。在 Facebook，所有重大升级的代码都进行强制评估，任何一个改动都至少由一人把关。但是，无论工程师对 News Feed 做出任何改动，都将由扎克伯格亲自把关。 内测 （dog food）：发布之前，公司员工使用要发布的功能。2－3天之内可以有几百个或上千个人在使用新功能。负责要发布功能的开发人员在星期天晚上到星期二中午之间会做大量的测试 。 通过灰度发布控制风险：新功能本身质量可能有问题，新功能也可能影响其它现有功能。为了减少或控制这些风险。Facebook开发了一整套完善的发布，控制，监控流程和工具。做到：1.测试通过后，产品质量基本有保证。2.即使有漏测的bug，只会影响很少量的用户。3.及时监控到问题。4.及时修复。 产品监控：通过社区讨论的正负面舆情，及与历史应用数据的对比情况，监控产品的系统的运行状态技术修复。thoughtworks 业界以敏捷著称的软件企业又是如何改进的 项目的初期，dev,BA,QA就会做到一起IPM,让不同的角色都能了解story，让dev尽早的分析story以及采用那种技术去完成工作。 开发阶段，dev会采用pair的方式，和QA，其他dev共同完成story，这样的好处是，一让不熟悉的新人尽快的了解项目架构，二与QApair,QA将会提供dev考虑不足的点，一起编写单元测试以及feature test。 当dev完成代码工作后，会在github上发出pull request 或邀请其他dev，一起评审代码。 各个项目都有自己完备的cd流程，确保发布过程的正确性，减少人为手工操作的失误。 从以上业界代表公司的改进方式，我们可以看出它们都是从以下几点出发的： 完整的单元测试覆盖率UI自动化测试的覆盖率很难被保证，不断的改变的ui,使使用UI测试来验证产品的功能变得十分麻烦，但是单元测试则不同，各种语言都有自己的测试工具以及测试覆盖率工具帮助我们更好的完善我们的代码质量，我们也可以用接口测试与pact测试来保证第三方集成服务的正确性，所以高覆盖率的单元测试时产品的质量的基础。 严格的代码审查机制facebook，google，微软等公司严格的代码审查机制，是确保代码不被破坏的关键点，不会因为团队成员的某次粗心的提交，造成整个项目的失败。 强大的代码分析工具代码级别的规范化，以及动态与静态扫描，进一步的帮助软件开发人员、质量保证人员查找代码中存在的结构性错误、安全漏洞等问题，从而保证软件的整体质量。与CI,CD的集成，能够让我们尽早的发现代码中存在的错误。 规范化的测试流程各个公司规范化的测试流程，保证项目在每一阶段都能够输出高质量的代码。 完善的风险控制完善的风险控制，不仅仅表现的google与Facebook的A/B测试，也表现在当有任何重大问题时，能够随意的切换到旧的版本，保证产品不因为该问题，就造成宕机。 实时的监控这些行业的巨头，都有着非常强大的运维团队，从产品的开发阶段就开始实施了各种监控手段，监控范围包括编译阶段，部署阶段，产品环境，硬件服务器的状态等，帮助项目的中所有成员及时的发现产品中存在的问题，快速跟踪以及定位问题。 第一篇分析各个公司都采取了那些代码质量改进措施完毕，接下来我会从不同的角度去详细介绍这些改进措施。","categories":[],"tags":[{"name":"QA","slug":"QA","permalink":"http://yoursite.com/tags/QA/"}],"keywords":[]},{"title":"capybara5--实现你第一个自动化场景","slug":"capybara5","date":"2016-09-01T14:31:15.000Z","updated":"2017-09-21T07:44:40.000Z","comments":true,"path":"2016/09/01/capybara5/","link":"","permalink":"http://yoursite.com/2016/09/01/capybara5/","excerpt":"","text":"实现你第一个自动化场景万事俱备，只欠东风，让我们来实现我们一个自动化测试场景，百度上搜索capybara。 123456789101112131415describe \"i want search capybara\", :type =&gt; :feature do context 'i need to open browser' do it 'should be has an browser' end context 'when i input baidu url into the browser textarea' do it 'should be redirect to the baidu homepage' end context 'when i input the capybara into search text ' do it 'responds with 200 and show the result' endend rspec 与 cucumber完整的使用指南并不包含在本书的范畴，但我会给大家讲解基本的项目架构与语法，帮助大家更好的理解capybara和自动化测试的规范。 rspec方式对于基于rspec框架的项目，我们首先需要创建spec目录，来将我们的测试文件放置当中，这样做使我们项目代码结构更加清晰。此外我们还需要创建spec/rspec_help.rb文件帮助我们设置测试的配置信息。 如果你的项目是基于rails的，那么就更简单了，你只需要执行以下命令，系统就帮助我们完成这些基础配置和文件的生成 1rails generate rspec:install 123.rspecspec/spec_helper.rbspec/rails_helper.rb 让我正式开始首先我们需要配置spec_helper.rb文件，将以下内容复制到spec_helper.rb中，稍后章节中我将具体介绍配置文件中每条代码实际的作用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117require \"capybara/rspec\"require \"capybara\"require \"rspec\"require 'pry'Capybara.default_driver = :seleniumCapybara.app_host = 'http://www.baidu.com'Capybara.register_driver :selenium do |app| Capybara::Selenium::Driver.new(app, :browser =&gt; :chrome )end# This file was generated by the `rspec --init` command. Conventionally, all# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.# The generated `.rspec` file contains `--require spec_helper` which will cause# this file to always be loaded, without a need to explicitly require it in any# files.## Given that it is always loaded, you are encouraged to keep this file as# light-weight as possible. Requiring heavyweight dependencies from this file# will add to the boot time of your test suite on EVERY test run, even for an# individual file that may not need all of that loaded. Instead, consider making# a separate helper file that requires the additional dependencies and performs# the additional setup, and require it from the spec files that actually need# it.## The `.rspec` file also contains a few flags that are not defaults but that# users commonly want.## See http://rubydoc.info/gems/rspec-core/RSpec/Core/ConfigurationRSpec.configure do |config| # rspec-expectations config goes here. You can use an alternate # assertion/expectation library such as wrong or the stdlib/minitest # assertions if you prefer. config.expect_with :rspec do |expectations| # This option will default to `true` in RSpec 4. It makes the `description` # and `failure_message` of custom matchers include text for helper methods # defined using `chain`, e.g.: # be_bigger_than(2).and_smaller_than(4).description # # =&gt; \"be bigger than 2 and smaller than 4\" # ...rather than: # # =&gt; \"be bigger than 2\" expectations.include_chain_clauses_in_custom_matcher_descriptions = true end # rspec-mocks config goes here. You can use an alternate test double # library (such as bogus or mocha) by changing the `mock_with` option here. config.mock_with :rspec do |mocks| # Prevents you from mocking or stubbing a method that does not exist on # a real object. This is generally recommended, and will default to # `true` in RSpec 4. mocks.verify_partial_doubles = true end # This option will default to `:apply_to_host_groups` in RSpec 4 (and will # have no way to turn it off -- the option exists only for backwards # compatibility in RSpec 3). It causes shared context metadata to be # inherited by the metadata hash of host groups and examples, rather than # triggering implicit auto-inclusion in groups with matching metadata. config.shared_context_metadata_behavior = :apply_to_host_groups# The settings below are suggested to provide a good initial experience# with RSpec, but feel free to customize to your heart's content.=begin # This allows you to limit a spec run to individual examples or groups # you care about by tagging them with `:focus` metadata. When nothing # is tagged with `:focus`, all examples get run. RSpec also provides # aliases for `it`, `describe`, and `context` that include `:focus` # metadata: `fit`, `fdescribe` and `fcontext`, respectively. config.filter_run_when_matching :focus # Allows RSpec to persist some state between runs in order to support # the `--only-failures` and `--next-failure` CLI options. We recommend # you configure your source control system to ignore this file. config.example_status_persistence_file_path = \"spec/examples.txt\" # Limits the available syntax to the non-monkey patched syntax that is # recommended. For more details, see: # - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/ # - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/ # - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode config.disable_monkey_patching! # This setting enables warnings. It's recommended, but in some cases may # be too noisy due to issues in dependencies. config.warnings = true # Many RSpec users commonly either run the entire suite or an individual # file, and it's useful to allow more verbose output when running an # individual spec file. if config.files_to_run.one? # Use the documentation formatter for detailed output, # unless a formatter has already been configured # (e.g. via a command-line flag). config.default_formatter = 'doc' end # Print the 10 slowest examples and example groups at the # end of the spec run, to help surface which specs are running # particularly slow. config.profile_examples = 10 # Run specs in random order to surface order dependencies. If you find an # order dependency and want to debug it, you can fix the order by providing # the seed, which is printed after each run. # --seed 1234 config.order = :random # Seed global randomization in this process using the `--seed` CLI option. # Setting this allows you to use `--seed` to deterministically reproduce # test failures related to randomization by passing the same `--seed` value # as the one that triggered the failure. Kernel.srand config.seed=endend 我们执行以下命令来运行我们的测试 123456789101112131415161718192021# lqi @ CNlqi in ~/work/test/capybara_demo on git:master x [22:00:31]$ rspec ./spec/features/baidusearch_spec.rb***Pending: (Failures listed here are expected and do not affect your suite's status) 1) i want search capybara i need to open browser should be has an browser # Not yet implemented # ./spec/features/bb_spec.rb:9 2) i want search capybara when i input baidu url into the browser textarea should be redirect to the baidu homepage # Not yet implemented # ./spec/features/bb_spec.rb:16 3) i want search capybara when i input the capybara into search text responds with 200 and show the result # Not yet implemented # ./spec/features/bb_spec.rb:20Finished in 0.00059 seconds (files took 1.37 seconds to load)3 examples, 0 failures, 3 pending 我们从测试结果能看出，我们并没有实现任何具体操作步骤，接下就让我们完成这些工作。将我们测试文件baidusearch_spec.rb修改为以下内容 12345678910111213141516171819202122232425262728describe \"i want search capybara\", :type =&gt; :feature do context \"the page\" do before do page.driver.browser.manage.window.resize_to(1440,900) #Mention it here visit \"/\" end context 'i need to open browser' do it 'should be has an browser' do expect(page.driver.browser.browser).to eq :chrome end end context 'when i input baidu url into the browser textarea' do it 'should be redirect to the baidu homepage' do expect(page.driver.current_url).to eq('https://www.baidu.com/') endend context 'when i input the capybara into search text ' do it ' show search the result' do fill_in 'kw', :with =&gt; 'capybara' click_button '百度一下' expect(page).to have_content 'Capybara - Wikipedia, the free encyclopedia' end end endend 再次运行测试这时浏览器打开并且按照我们测试文件中具体步骤一步一步进行操作和验证，全部通过 123456# lqi @ CNlqi in ~/work/test/capybara_demo on git:master x [22:26:15] C:1$ rspec ./spec/features/baidusearch_spec.rb...Finished in 5.46 seconds (files took 3.81 seconds to load)3 examples, 0 failures cucumber方式首先我们运行cucumber查看cucumber是否安装正确123# lqi @ CNlqi in ~/work/test/capybara_demo on git:master x [13:42:41]$ cucumberNo such file or directory - features. You can use `cucumber --init` to get started. 当我们看到以上提示没有文件或者目录时，我们就可以确认cucumber安装成功接下来让我们初始化cucumber测试目录结构123456# lqi @ CNlqi in ~/work/test/capybara_demo on git:master x [11:24:56] C:2$ cucumber --init create features create features/step_definitions create features/support create features/support/env.rb 这样就完成目录结构的初始化，我们要将所有feature文件都放到features目录下support目录下，使我们需要的一些配置文件. stepdefinitions目录下，是对feature文件中的具体操作实现。因为我们都知道feature文件中只是做了一些描述，具体的执行是放到step definitions下面的文件里面的。接下来，我们用cucumber完成和上面spec一样的场景。12345Feature: Search for capybara on baidu Scenario: Search for website of baidu Given I am on the baidu home page When I search for \"capybara\" Then website of search result are returned 在命令行中运行cucumber命令，运行上述测试用例，便可以看到下列输出，你可以使用下面的代码段实现步骤定义：1234567891011121314151617181920212223242526# lqi @ CNlqi in ~/work/test/capybara_demo on git:master x [14:25:16] C:1$ cucumberFeature: Search for capybara on baidu Scenario: Search for website of baidu # features/baidu_search_capybara.feature:2 Given I am on the baidu home page # features/baidu_search_capybara.feature:3 When I search for \"capybara\" # features/baidu_search_capybara.feature:4 Then website of search result are returned # features/baidu_search_capybara.feature:51 scenario (1 undefined)3 steps (3 undefined)0m0.395sYou can implement step definitions for undefined steps with these snippets:Given(/^I am on the baidu home page$/) do pending # Write code here that turns the phrase above into concrete actionsendWhen(/^I search for \"([^\"]*)\"$/) do |arg1| pending # Write code here that turns the phrase above into concrete actionsendThen(/^website of search result are returned$/) do pending # Write code here that turns the phrase above into concrete actionsend 复制以上代码到具体step.rb文件中，我们新建文件capybara_search_step.rb。再次运行cucumber命令现在,您将看到命令行报告,这些步骤已经存在但没有实现:123456789101112131415# lqi @ CNlqi in ~/work/test/capybara_demo on git:master x [14:25:22]$ cucumberFeature: Search for capybara on baidu Scenario: Search for website of baidu # features/baidu_search_capybara.feature:2 Given I am on the baidu home page # features/step_definitions/capybara_search_step.rb:1 TODO (Cucumber::Pending) ./features/step_definitions/capybara_search_step.rb:2:in `/^I am on the baidu home page$/' features/baidu_search_capybara.feature:3:in `Given I am on the baidu home page' When I search for \"capybara\" # features/step_definitions/capybara_search_step.rb:5 Then website of search result are returned # features/step_definitions/capybara_search_step.rb:91 scenario (1 pending)3 steps (2 skipped, 1 pending)0m0.152s 接下来，我们通过增加少量的代码来使我们自动化运行起来。首先确保你的env.rb文件配置如下：12require 'capybara/cucumber'Capybara.default_driver = :selenium 首先，我们在文件中添加require ‘capybara/cucumber’;这是我们必须需要加载文件。之后我们需要告诉capybara使用selenium驱动：1Capybara.default_driver = :selenium 再次重申，capybara只是充当一个中间件，适配不同的dirver,使我们能够兼容任何的驱动程序,例如（Selecting the Driver，RackTest，Selenium，Capybara-webkit，Poltergeist）这里我们选择selemium webdriver 是因为它是目前最流行的开源浏览器自动化工具，很多公司的自动化框架都是基于它之上的二次开发而成，例如appium，淘宝的Automan X,网易Dagger等。 如果我们不设置驱动，将会得到以下错误123456789101112131415161718192021# lqi @ CNlqi in ~/work/test/capybara_demo on git:master x [17:13:47] C:2$ cucumberrack-test requires a rack application, but none was given (ArgumentError)/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/capybara-2.8.0/lib/capybara/rack_test/driver.rb:17:in `initialize'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/capybara-2.8.0/lib/capybara.rb:509:in `new'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/capybara-2.8.0/lib/capybara.rb:509:in `block in &lt;top (required)&gt;'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/capybara-2.8.0/lib/capybara/session.rb:85:in `call'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/capybara-2.8.0/lib/capybara/session.rb:85:in `driver'/Users/lqi/work/test/capybara_demo/features/support/env.rb:12:in `&lt;top (required)&gt;'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/cucumber-2.4.0/lib/cucumber/rb_support/rb_language.rb:96:in `load'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/cucumber-2.4.0/lib/cucumber/rb_support/rb_language.rb:96:in `load_code_file'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/cucumber-2.4.0/lib/cucumber/runtime/support_code.rb:142:in `load_file'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/cucumber-2.4.0/lib/cucumber/runtime/support_code.rb:84:in `block in load_files!'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/cucumber-2.4.0/lib/cucumber/runtime/support_code.rb:83:in `each'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/cucumber-2.4.0/lib/cucumber/runtime/support_code.rb:83:in `load_files!'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/cucumber-2.4.0/lib/cucumber/runtime.rb:253:in `load_step_definitions'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/cucumber-2.4.0/lib/cucumber/runtime.rb:61:in `run!'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/cucumber-2.4.0/lib/cucumber/cli/main.rb:32:in `execute!'/Users/lqi/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/cucumber-2.4.0/bin/cucumber:8:in `&lt;top (required)&gt;'/Users/lqi/.rbenv/versions/2.2.2/bin/cucumber:23:in `load'/Users/lqi/.rbenv/versions/2.2.2/bin/cucumber:23:in `&lt;main&gt;' 默认情况下，capybara被用来测试rack 应用。rack 是一个设计非常巧妙的中间件，被用作在rails与sinatra框架做全栈的Client/Server集成测试，并且没有什么HTTP的开销，从而是测试能够快速运行。稍后，我们将详细介绍capybara如何测试在rails与sinatra的应用测试。接下来我们的任务就是你在步骤定义用Ruby代码调用capybaraAPI驱动测试。将以下代码复制到你的capybara_search_step.rb中12345678910111213Given(/^I am on the baidu home page$/) do visit 'https://www.baidu.com/'endWhen(/^I search for \"([^\"]*)\"$/) do |search_term| fill_in 'kw', :with =&gt; search_term click_on 'su'endThen(/^website of search result are returned$/) do page.should have_content 'capybara'end 在我们分析代码之前,让我们先运行测试,看看会发生什么。像往常一样,在命令行中输入cucumber。希望你能看到chrome打开，并且跳转到baidu首页，之后搜索到capybara结果并返回。恭喜你，你已经利用capybara完成了第一个全栈的集成测试。 在我们深入了解capybara丰富的API之前，让我们简要的回顾一下每个步骤的内容，这里你可以看到capybra如何优雅而简洁使用api，代码字面含义已经向我们展示它在干什么，不需要多解释。cucumber和capybra配合起来使用，具有良好的可读性，项目中的任何一个角色都能够当前场景做了哪些事情，非常适合应用于自动化和维护工作。第一行代码告诉capybara通知driver（selenium webdriver）打开一个浏览器并跳转到我们提供的链接地址：1visit 'https://www.baidu.com/' 接下来，我们需要输入查询条件，点击搜索按钮，所以我们告诉capybara去让driver在页面上查找搜输入栏，并填写搜索条件。 123fill_in 'kw', :with =&gt; search_termclick_on 'su' 这里唯一的困惑是fill_in 方法中使用’kw’这个关键字，当你代码告诉capybara去在页面上寻找这个关键字时，capybara使用了一种’猜测’的机制。也就是说capybra试图在DOM元素各种属性中找到你要求的。在这个例子中,我们知道baidu搜索表栏的id属性kw，这是我们需要在代码中提供的。最后,我们需要检查返回的搜索结果是否正确。为此,我们使用capybara的内置RSpec匹配器。如果你不知道RSpec,rspec官方文档是你最好的选择(http://rspec.info/),与传统断言不同是当条件不满足时，会抛出异常，而不是只是返回false 1page.should have_content 'capybara' 最后需要注意的是,have_content方法的匹配器内置了一个默认的等待。这是非常有用的,因为如果查找的内容我是通过JavaScript异步加载而成的话(而不是在初始页面就加载完成),capybara在我们设置默认等待时间重试,看它是否存在。我们将在后面的章节介绍如何处理异步JavaScript的问题。 总结，本章目标是让你认识capybra，以及配置它的运行环境，ruby和rubygems以及相关依赖。最后，我们通过一个简单的场景来编写自动化，来加强我们的学习。","categories":[],"tags":[{"name":"rails","slug":"rails","permalink":"http://yoursite.com/tags/rails/"},{"name":"webdriver","slug":"webdriver","permalink":"http://yoursite.com/tags/webdriver/"}],"keywords":[]},{"title":"capybara4--安装cucumber","slug":"capybara4","date":"2016-08-30T07:54:19.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2016/08/30/capybara4/","link":"","permalink":"http://yoursite.com/2016/08/30/capybara4/","excerpt":"","text":"capybara是一个简单的API,它提供了抽象层在你真实自动化库之上。如果它帮助,认为capybara是你的翻译,你告诉它做一些事情，它将优雅的将命令转换为你应用驱动的API。 所以当我们使用capybara进行翻译时，我们需要告诉capybara做什么并且需要一个API自动化库去进行翻译。capybara是一个非常灵活的库,通过这本书我们将看到它在各种场景中应用。然而。目前为止最常见的情景是应用cucumber作为capybara测试驱动，去驱动selenium webdriver 开展浏览器自动化。当cucumber被调用来解析这些简单易懂的英语场景时，它将使用正则表达式去将这些匹配 cucumber介绍cucumber是一种可以使用文本描述语言来执行自动测试用例的工具，使用的语言叫做Gherkin. Gherkin用于描述软件的行为而不需要了解具体的实现，使用Gherkin主要有两个目的文档和自动测试用例（我们希望能够和手工测试用例也统一）。 Gherkin支持超过40种语言，包括英文、中文。 Gherkin可以在任何地方新增注释，注释以#开头，每一个文件都是已.feature结尾，在feature文件中输入功能描述、场景、步骤，当执行这个功能时每一个步骤都需要编写ruby代码块来实现具体的功能，当前cucumber支持多种语言，除了ruby还可以使用java、javascript来编写具体定义层的实现。 以下是一个cucumber 场景的例子 Feature: Search for Videos on Baidu Scenario: Search for Videos Given I am on the baidu home page When I search for &quot;capybara&quot; Then search result are returned 我们设置可以采用中文实现场景中文的话最前面必须增加# language: zh-CN 12345678910111213# language: zh-CN功能:第一个中文程序中文实现场景:中文实现场景假如当前是中文当输入是测试那么能看到中文测试 下面的流程图说明了从cucumber到底层驱动如何实现，capybara在整个流程里面充当是中间价的作用。 安装1gem install cucumber 如果你使用的是 bundler，只是需要添加以下代码到Gemfile: 123group :test do gem 'cucumber'end 初始化features目录：1cucumber --init 查看完帮助列表：1cucumber --help 运行所有features：1cucumber Cucumber-Rails如果你使用capybara 来测试rails应用，你应该安装cucumber－rails gem 而不是标准的rails gem。这个gem需要capybara和cucumber作为依赖。所以当你安装cucumber－rails gem时，会自动安装这些依赖，我们只需要运行以下命令1gem install cucumber-rails 如果你使用bundle，只需要将以下代码添加进gemfile:12345group :test, :development do gem 'cucumber-rails', :require =&gt; false # database_cleaner is not required, but highly recommended gem 'database_cleaner'end 然后运行1bundle install 运行生成器帮助我们生成目录1rails generate cucumber:install","categories":[],"tags":[{"name":"capybara - rails - webdriver","slug":"capybara-rails-webdriver","permalink":"http://yoursite.com/tags/capybara-rails-webdriver/"}],"keywords":[]},{"title":"capybara3--rspec配置","slug":"capybara3","date":"2016-08-30T04:42:49.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2016/08/30/capybara3/","link":"","permalink":"http://yoursite.com/2016/08/30/capybara3/","excerpt":"","text":"rspec配置我们知道Capybara 只是是一个用来以模拟用户对web应用的操作来测试web应用的工具包，不能真正的称之为测试框架，它需要其他的测试驱动框架来帮助我们完成测试工作。所以我们需要一个测试驱动框架. RSpec由Steven Baker开发并在2005年发布，全面支持Ruby程序的BDD开发测试方式，并且对于Rails程序有着良好的支持，针对View，Controller和Model每一层都有良好的支持。RSpec目前的最新版本是：3.5。 它在 BDD 流程的开发中被用来写高可读性的测试，引导并验证你开发的应用程序。 minitest与rspec都是ruby和rails比较流行的框架。这里我们选择rspec。 安装rspec很简单,打开command line运行一下操作：1gem install rspec 或者将rspec 添加到gemfile里1gem 'rspec' 执行bundle install 来安装如果你的项目采用的时rails,那么rspec-rails 或许更适合你 在gemfile里添加123group :development, :test do gem 'rspec-rails', '~&gt; 3.4'end 执行 bundle install 初始化测试目录 1rails generate rspec:install 这增加了以下文件用于配置:123.rspecspec/spec_helper.rbspec/rails_helper.rb","categories":[],"tags":[{"name":"capybara - rails - webdriver","slug":"capybara-rails-webdriver","permalink":"http://yoursite.com/tags/capybara-rails-webdriver/"}],"keywords":[]},{"title":"capybara2--准备环境","slug":"capybara2","date":"2016-08-26T14:48:50.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2016/08/26/capybara2/","link":"","permalink":"http://yoursite.com/2016/08/26/capybara2/","excerpt":"","text":"ruby环境配置capycaraCapybara 需要 Ruby 1.9.3或之后的版本. 所以首先我们需要在我们的操作系统中，配置ruby运行环境 windows 下载 &amp; 安装 Ruby从http://rubyinstaller.org/或者 http://railsinstaller.org/ 下载已经打包好的安装程序。1.1安装 ruby版本 安装 DevKit从 http://rubyinstaller.org/downloads/下载安装DevKit2.1 RubyInstaller Development Kit (DevKit)的安装在使用RubyGems安装Ruby on Rails的同时，还有几个一起被安装的类库。这些类库中，有一些是保持C语言编写的代码的形式来发布的，它们需要通过使用“gcc”编译器等结合环境一起来编译，但在Windows上是不能用gcc来编译的。安装了本次所介绍的“RubyInstaller Development Kit (DevKit)”后，编译器就可以很容易地安装使用所需的类库。 Ruby环境配置 在windows中配置环境变量 RUBY_HOME=rubyinstaller_dir （实际的ruby所在路径） 在path中添加 %RUBY_HOME%\\bin 在命令行下运行 ruby –version，如果显示ruby版本信息说明安装正常。 多版本ruby环境配置 利用uru，这个工具可以帮助我们在windows系统上 管理多个ruby版本下载安装uru 安装uru解压uru到某一目录例如C:\\tools下运行以下命令安装 1C:\\tools&gt; uru_rt admin install 安装ruby版本，可以安装任意个ruby版本 在uru中注册ruby版本 1234567C:\\&gt; uru admin add c:\\ruby\\jruby-1.7.18\\bin\\---&gt; Registered jruby at `c:\\ruby\\jruby-1.7.18\\bin` as `1718`C:\\&gt; uru ls 1718 : jruby 1.7.18 (1.9.3p551) 2014-12-22 625381c on Java HotSpot(TM) ... 193 : ruby 1.9.3p551 (2014-11-13) [i386-mingw32] 215 : ruby 2.1.5p273 (2014-11-13 revision 48405) [x64-mingw32] 详细操作命令查看http://www.neverletdown.net/2015/08/managing-multiple-ruby-versions-with-uru.html 强烈不建议用windows来开发,原因请查看https://bitbucket.org/jonforums/uru linux（Ubuntu）或者mac os更适合你用来开发。详细请看 https://ruby-china.org/topics/1020 linux-ubuntuInstalling Ruby 第一步安装配置ruby环境所需要的一些基础库12sudo apt-get updatesudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev 利用工具来管理的ruby版本，rbenv 就是一个很好的工具1234567891011121314cdgit clone https://github.com/rbenv/rbenv.git ~/.rbenvecho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' &gt;&gt; ~/.bashrcecho 'eval \"$(rbenv init -)\"' &gt;&gt; ~/.bashrcexec $SHELLgit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-buildecho 'export PATH=\"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"' &gt;&gt; ~/.bashrcexec $SHELLrbenv install 2.3.1rbenv global 2.3.1ruby -vhttps://gorails.com/setup/ubuntu/16.10 mac os利用homebrew 来安装管理mac的应用安装 Homebrew 首先，我们需要安装homebrew。homebrew 允许我们方便从源码安装和编译软件包当homebrew需要安装xcode 命令行工具，输入yes.打开命令行并且运行以下命令：1ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" Installing Ruby 1brew install rbenv ruby-build Add rbenv to bash so that it loads every time you open a terminal 12echo 'if which rbenv &gt; /dev/null; then eval \"$(rbenv init -)\"; fi' &gt;&gt; ~/.bash_profilesource ~/.bash_profile Install Ruby 123rbenv install 2.3.1rbenv global 2.3.1ruby -v 安装capybara安装系统依赖库在某些操作系统中ruby环境可能需要一些第三方库的支持，通常是出于性能方面的原因，ruby是一种解释性语言所以在处理某些任务时，例如解析XML会非常慢，这时把这些任务交给第三方库处理，效率就会成倍增加。对于windows平台，你不用担心第三依赖库的问题，不过你要确保您已经安装了Ruby DevKit;详细说明如何做到这一点，请参阅http://rubyinstaller.org/add-ons/ devkit capybara依赖于nokogirl，一个流行的基于ruby的XML的解析器，该库可能需要以下第三方库的支持：• libxml2• libxml2-dev • libxslt• libxslt-dev对于不同的操作系统安装这些库的方式可能略有不同，对于linux 例如Ubuntu 可以使用apt-get ，对于redhat 请使用yum install 对于mac os x 那么brew 是你最好的选择。完成这些第三方依赖后 我们就可以安装capybara了 添加以下的代码到你的Gemfile里，并且运行bundle install。1gem 'capybara' 什么是Bundle相当于多个RubyGems批处理运行。在配置文件gemfilel里说明你的应用依赖哪些第三方包，他自动帮你下载安装多个包，并且会下载这些包依赖的包.http://bundler.io/","categories":[],"tags":[{"name":"capybara - rails - webdriver","slug":"capybara-rails-webdriver","permalink":"http://yoursite.com/tags/capybara-rails-webdriver/"}],"keywords":[]},{"title":"capybara1-capybara简介","slug":"capybara1","date":"2016-08-26T06:17:36.000Z","updated":"2017-09-21T07:45:08.000Z","comments":true,"path":"2016/08/26/capybara1/","link":"","permalink":"http://yoursite.com/2016/08/26/capybara1/","excerpt":"","text":"capybara简介capybara是一个ruby的gem,它是一个用来测试web应用的工具包，使用它可以模拟用户对web应用的操作。它可以通过CSS或xpath选择器选中页面上的元素，然后对这些元素应用一些操作，从而实现模拟用户行为。 底层driver的实现基于底层driver的基础上，提供一套统一的 界面交互api，如visit, right_click，hover等。它内置 Rack::Test 和 Selenium 支持，也支持其他驱动。WebKit 通过外部 gem 的形式支持。 底层的driver有很多，可以是完全打开浏览器方式的driver(如：RackTest，selenium-webdriver)，也可以是基于headless webkit 的 driver(如：capybara-webkit, poltergeist). capybara 优点 ● 无需配置 对于 Rails 和 Rack 应用而言，开箱即用。 ● 符合直觉的 API 模拟真实用户行为。 ● 可替换后端 可以替换测试后端，例如从快速的 headless 模式切换到实际的浏览器，无需更改测试。 ● 强力同步 你不用手动等待异步过程结束。 因为capyybara提供了以下好处： ● 这是一个更高层次的API，这意味着当你使用不同driver时，例如（headless或者browser）可以使用同样的API处理动态页面或静态HTML. ● 它是专门为U自动化测试web应用而设计的程序, ● 因此它拥有十分有用的断言的方法判断页面是否正确。 ● 当我们测试真实的浏览器时，他会自动帮助我们处理许多棘手的异步问题 ● 它被设计用于测试机架的应用，因此它会开机并为您管理后台服务器 ● 它为设计为rack应用的测试框架,所以它将引导和管理后台服务。","categories":[],"tags":[{"name":"rails","slug":"rails","permalink":"http://yoursite.com/tags/rails/"},{"name":"webdriver","slug":"webdriver","permalink":"http://yoursite.com/tags/webdriver/"}],"keywords":[]},{"title":"gatling官方文档翻译5","slug":"gatling5","date":"2016-06-29T09:45:25.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2016/06/29/gatling5/","link":"","permalink":"http://yoursite.com/2016/06/29/gatling5/","excerpt":"","text":"第五篇 http://gatling.io/docs/2.2.2/migration_guides/2.0-to-2.1.html Migrating from 2.0 to 2.1Global changesScala 2.11Gatling is now built with Scala 2.11. If you’re using Scala IDE, make sure you’re using a version compatible with Scala 2.11. Compiler runs standaloneGatling itself doesn’t compile the Simulations anymore and expects that the simulations are already compiled. This means that gatling.sh/gatling.bat and the Maven plugin runs the compiler prior to running Gatling. Consequently, a few options in gatling.conf have been removed: gatling.core.disableCompilergatling.core.zinc.jvmArgsPlease note that, as this change implied that the Maven Plugin was heavily modified so that it compiles the simulations separately prior to running Gatling, you’ll need to upgrade the Maven Plugin to its version 2.1.0 too. PercentilesGatling now publishes 4 percentiles instead of 2. These percentiles are published in the reports and in the Graphite integration module. Beware that keys in gatling.conf file have been translated: Gatling 2.0:percentile1 = 95percentile2 = 99Gatling 2.1+:percentile1 = 50percentile2 = 75percentile3 = 95percentile4 = 99CoreMute modeThe “mute mode” option, which was previously restricted to the SBT Plugin, is now also usable by the bundle scripts and the Maven Archetype. AssertionsValidating assertions in combination with the reports-only / ro option does not require to pass the simulation (using -s) for which the assertions will be validated anymore. ThrottlingThrottling now automatically adds a maxDuration of either the simulation throttling duration, or the minimum of the scenarios throttling durations. HTTPParametersForm parameters are no longer specific to POST method, you can use them with all methods. Request Bodies DirectoryThe directory name was changed from request-bodies to bodies as it now can host both request bodies and response bodies. The latter one are now captured by the recorder, and can be used as template for checking the response body. CLI option was renamed from rbf to bdf. ChecksDeprecated dontValidate was dropped in 2.1 as previously announced. Please use optional instead. ProtocolDeprecated baseHeaders was dropped in 2.1 as previously announced. Please use headers instead. Maven ArchetypeDue to some necessary changes to allow Gatling to use Scala 2.11, you’ll have to update IDEPathHelper.scala, Engine.scala and Recorder.scala if you’re using the Maven archetype. Either generate a new project with the 2.1.1 archetype (there was a bug in 2.1), or override your classes with the ones here. If you choose the latter, don’t forget to fix the simulationPackage in Recorder.scala. SBT PluginThe SBT Plugin’s test framework has been moved to the core project in 2.1. As a consequence, the test framework name has be modified to follow the naming conventions of all core modules and share its versionning. The SBT Plugin will also share the same versionning schema as all other Gatling modules, and has been renamed to ‘gatling-sbt’. The new coordinates are therefore : “io.gatling” % “gatling-sbt” % “2.1.0” for the SBT Plugin“io.gatling” % “gatling-test-framework” % “2.1.0” for the testing framework. 从2.0 合并到2.1全局变化Scala 2.11gatling 现在用2.11 构建，如果你使用Scala IDE, 确认你是使用的版本能够兼容scala2.11. Compiler runs standalone编译器独立的运行 gatling本身不再编译模拟器和预测模拟已经编译。 这就意味着 gatling.sh/gatling.bat 和maven插件编译在运行gatling之前。因此,一些选项在gatling.conf 已经被移除 请注意，这种变化意味着Maven插件大量修改，单独编译仿真运行gatling之前，你需要升级版本2.1.0的Maven插件。 Percentilesgatling 发布4位百分数来代替2位。这些百分位数发布在生成的报告和图表的集成模块注意键在gatling.conf 文件已经被翻译。 Gatling 2.0:percentile1 = 95percentile2 = 99Gatling 2.1+:percentile1 = 50percentile2 = 75percentile3 = 95percentile4 = 99Core Mute mode “静音模式”选项,该选项以前局限于SBT插件,现在也可用bundle的脚本和Maven Archetype。Assertions 验证断言结合the reports-only / ro option不需要通过仿真(using- s)的断言将被验证了。 Throttling节流现在自动添加一个maxDuration仿真节流的持续时间、节流时间或最低的场景。HTTPParameters形式参数不再是特定于POST方法,您可以使用它们在全部的方法。Request Bodies Directory目录更名从请求体的body,因为它现在可以主机请求body和响应。后者现在被记录,并可以用作模板检查响应的body。 CLI option被重新命名从 rbf 到 bdf. Checks此前宣布弃用dontValidate下降2.1。请使用optional。 Protocol此前宣布弃用baseHeaders下降2.1。请使用headers。 Maven Archetype 由于一些必要的改变,允许gatling使用Scala 2.11中,你将不得不更新IDEPathHelper.scala, Engine.scala and Recorder.scala。如果你使用Maven archetype 。 SBT PluginSBT插件的测试框架已经被转移到2.1的核心项目。因此,测试框架的名称已被修改遵循所有核心模块的命名约定和分享它的版本。 SBT插件还将共享相同的版本模式和其他gatling模块,并重新命名为“gatling-sbt”。因此,新坐标:“io.gatling” % “gatling-sbt” % “2.1.0” 关于 the SBT 插件“io.gatling” % “gatling-test-framework” % “2.1.0” 关于测试框架.","categories":[],"tags":[{"name":"gatling","slug":"gatling","permalink":"http://yoursite.com/tags/gatling/"}],"keywords":[]},{"title":"gatling官方文档翻译4","slug":"gatling3-1","date":"2016-06-15T09:54:52.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2016/06/15/gatling3-1/","link":"","permalink":"http://yoursite.com/2016/06/15/gatling3-1/","excerpt":"","text":"第四篇 http://gatling.io/docs/2.2.1/migration_guides/2.0.0-M3a-to-2.0.htmlMigrating from 2.0.0-M3a to 2.0Global changesGatling requires at least JDK7u6As targeting newer JDKs provides bug fixes, speed improvements and opens opportunities for optimization, Gatling now requires at least a JDK7u6 (released almost two years ago already). Gatling is now available on Maven CentralGatling releases are now available on Maven Central, and snapshots are deployed on each successful build by Travis CI to Sonatype’s snapshots repository. If you were using Gatling with its Maven plugin, you no longer need to add the Excilys repository in your pom.xml. SimulationNecessary importsimport bootstrap. and import assertions. are now unnecessary and have to be removed.import io.gatling.http.Headers.Names. is now unnecessary, headers names are now directly available from HeaderNames.import io.gatling.http.Headers.Values. is now unnecessary, headers values are now directly available from HeaderValues.Injection DSLramp(10 users) becomes rampUsers(10)heaviside(10 users) becomes heavideUsers(10)atOnce(10 users) becomes atOnceUsers(10)constantRate(10 usersPerSec) becomes constantUsersPerSec(10)rampRate(10 usersPerSec) becomes rampUsersPerSec(10)split(10 users) becomes splitUsers(10)CoreStructure ElementsIn asLongAs, exitASAP now defaults to true. For more information on the change of behaviour it introduces, see asLongAs documentation. Checkswhatever has been renamed to optional.transform now no longer takes and returns an Option[T] and takes and returns plain types, but transformOption provides the same functionality as transform did.HTTPForm parameters (for POST requests)Renamed Methods for adding form parameters to the request have been renamed: param =&gt; formParammultiValuedParam =&gt; multiValuedFormParamMiscrequestInfoExtractor and responseInfoExtractor have been merged into a single extraInfoExtractor, which takes a ExtraInfo =&gt; List[Any] function.gatling.http.ahc.useRawUrl configuration parameter was removed, please use disableUrlEncoding instead, as described here.For more information on extraInfoExtractor, please refer to its documentation. Logssimulation.log has been redesigned. If you wrote your own specific simulation.log parser, you’ll need to migrate it to the new structure. RecorderUntil now, when setting up the Recorder, you had to setup two ports for the Recorder’s local proxy: one for HTTP, one for HTTPS. This is not needed anymore, as the Recorder handles itself the switch to an HTTPS connection if necessary, and only a single port needs to be specified. Maven PluginThe … and … configuration options have been removed. Should you want to select a specific simulation to run, you can use the … config option to do so. For more information, see the Maven plugin documentation. Migrating from 2.0.0-M3a to 2.0从2.0.0-M3a 合并到2.0 全局改变Gatling 需要至少JDK7u6版本 因为心得JDKs修复一些问题，速度得到改善，优化了处理，gatling 现在需要至少JDK7u6(2年前已经发布) gatling 现在同样在maven cetral 适用 gatling 现在同样在maven cetral 适用，并且快照都会部署到 Sonatype’s snapshots repository 当每次 Travis ci 构建成功后。如果你使用maven插件版gatling，你不需要添加the Excilys repository 在你的pom.xml中。 模拟器Necessary importsimport bootstrap. and import assertions. 现在已经不需要并且被移除import io.gatling.http.Headers.Names. 已经不需要， headers names被 HeaderNames代替.import io.gatling.http.Headers.Values. 已经不需要, headers values 被 HeaderValues代替. Injection DSLramp(10 users) 变为 rampUsers(10)heaviside(10 users) 变为 heavideUsers(10)atOnce(10 users)变为 atOnceUsers(10)constantRate(10 usersPerSec) 变为 constantUsersPerSec(10)rampRate(10 usersPerSec)变为 rampUsersPerSec(10)split(10 users) 变为 splitUsers(10)Core Structure Elements结构化组件 在 asLongAs, exitASAP 默认为trule。有关的行为改变的更多信息介绍,请看asLongAs文档。 Checks whatever 已经被重新命名为 optional.transform now no longer takes and returns an Option[T] and takes and returns plain types, but transformOption provides the same functionality as transform did.transform现在不再需要现在返回一个Option[T],并返回plain类型,但transformOption和transform提供了相同的功能。HTTPForm parameters (关于 POST 请求)重命名 adding form parameters 方法请求已经被重命名: param =&gt; formParammultiValuedParam =&gt; multiValuedFormParam MiscrequestInfoExtractor 和 responseInfoExtractor 已经合并为 extraInfoExtractor, which takes a ExtraInfo =&gt; List[Any] function.gatling.http.ahc.useRawUrl 配置参数已经被移除, 请用 disableUrlEncoding 代替, 描述如下.更多关于 extraInfoExtractor信息, 请参照这个文档. Logs simulation.log 已经被重新设计. 如果你写自己的simulation.log解析器,您需要它迁移到新结构 Recorder Until now, 当你设置 Recorder时, 你必须设置两个端口记录器的当地代理:一个用于HTTP,HTTPS。 这再也不需要了, 因为record处理本身转向一个HTTPS连接如果必要,并且只需要指定一个单独的端口。 Maven Plugin The &lt;includes&gt;...&lt;/includes&gt; 和 &lt;excludes&gt;...&lt;/excludes&gt; 配置项 已经被移除. 如果你需要选择一个特殊的模拟运行, 你可以使用 &lt;simulationClass&gt;...&lt;/simulationClass&gt; 去配置. 更多的信息, 查阅 Maven plugin 文档.","categories":[],"tags":[{"name":"gatling","slug":"gatling","permalink":"http://yoursite.com/tags/gatling/"}],"keywords":[]},{"title":"gatling官方文档翻译3","slug":"gatling3","date":"2016-06-08T15:22:40.000Z","updated":"2017-09-21T07:39:12.000Z","comments":true,"path":"2016/06/08/gatling3/","link":"","permalink":"http://yoursite.com/2016/06/08/gatling3/","excerpt":"","text":"第三篇http://gatling.io/docs/2.2.1/migration_guides/1.5.x-to-2.0.html Migrating from 1.5.x to 2.0Global changesGatling requires at least JDK7u6As targeting newer JDKs provides bug fixes, speed improvements and opens opportunities for optimization, Gatling now requires at least a JDK7u6 (released almost two years ago already). Scala 2.10Gatling is built with Scala 2.10. If you’re using Scala IDE, make sure you’re using a version compatible with Scala 2.10. Gatling is now available on Maven CentralGatling releases are now available on Maven Central, and snapshots are deployed on each successful build by Travis CI to Sonatype’s snapshots repository. If you were using Gatling with its Maven plugin, you no longer need to add the Excilys repository in your pom.xml. Package and GroupId changesGatling’s artifacts groupId and package are now io.gatling. You’ll have to : Update your build scripts to change the groupId of Gatling’s dependencies from com.excilys.ebi.gatling to io.gatlingUpdate your simulations to replace the com.excilys.ebi.gatling part in the imports by io.gatlingSimulationNecessary importsakka.util.duration classes have been ported to the scala.concurrent.duration package. Simply replace import akka.util.duration. by import scala.concurrent.duration..import bootstrap. and import assertions. are now unnecessary and have to be removed.import com.excilys.ebi.gatling.http.Headers.Names. is now unnecessary, headers names are now directly available from HeaderNames.import com.excilys.ebi.gatling.http.Headers.Values. is now unnecessary, headers values are now directly available from HeaderValues.Protocols setupProtocols are no longer configured by scenario and are now configured by simulation, using the protocols method. A 1.4.x-1.5.x setUp like this one: setUp(scn.(…).protocolConfig(httpConfig))would now be with Gatling 2.0: setUp(scn.(…)).protocols(httpConfig)Assertions setupThe assertThat method has been removed, assertions are now configured using assertions in the same fashion as protocols are, e.g. setup(scn.(…).protocolConfig(httpConfig)) assertThat(global.responseTime.max.lessThan(1000))becomes: setup(scn.(…)) .protocols(httpConfig) .assertions(global.responseTime.max.lessThan(1000)New Injection DSLThe users, ramp and delay methods to configure the injection profile for your scenario have been removed in favor of a full-blown dedicated DSL. Injection steps are now configured using the inject method available on your configured scenario. Migrating users // With Gatling 1.5.XsetUp(scn.users(10)…) // With Gatling 2.0setUp(scn.inject(atOnceUsers(10))…Migrating ramp // With Gatling 1.5.XsetUp(scn.users(10).ramp(30)…) // With Gatling 2.0setUp(scn.inject(rampUsers(10) over (30 seconds))…Migrating delay // With Gatling 1.5.XsetUp(scn.users(10).delay(5)…) // With Gatling 2.0setUp(scn.inject(nothingFor(5 seconds), atOnceUsers(10))…For more information on the new Injection DSL, please consult the Injection DSL reference documentation. CoreCheckswhatever has been renamed to optional. Structure ElementsThe first parameter of foreach is now an Expression (e.g. a Gatling EL string), not the name of the attribute to loop over.For example, if you have a list attribute in the user’s session holding a list of values: .foreach(“list”, “elem”) { …}becomes: .foreach(“${list}”, “elem”) { …}In asLongAs, exitASAP now defaults to true. For more information on the change of behaviour it introduces, see asLongAs documentation.SessionSession has been under major refactoring: session.get(“foobar”) becomes session(“foobar”)session.getTypedAttributeT becomes session(“foobar”).as[T]session.getAttributeAsOptionT becomes session(“foobar”).asOption[T]session.setAttribute(“foobar”, 1234) becomes session.set(“foobar”, 1234)session.setAttributes(Map(“foo” -&gt; 1, “bar” -&gt; 2) becomes session.setAll(“foo” -&gt; 1, “bar” -&gt; 2)session.removeAttribute(“foobar”) becomes session.remove(“foobar”)session.isAttributeDefined(“foobar”) becomes session.contains(“foobar”)HTTPProtocolHTTP protocol bootstrapper, httpProtocol, has been renamed to http. Query parametersRemoved Versions of queryParam and multivaluedQueryParam that took no other parameters than the key (resolving the value from the session, using the key’s name to find the attribute with the same name) have been removed. Modified multivaluedQueryParam can now resolve the values directly from the session, using Gatling’s EL. Form parameters (for POST requests)Renamed Methods for adding form parameters to the request have been renamed: param =&gt; formParammultiValuedParam =&gt; multivaluedFormParamRemoved Versions of queryParam and multivaluedQueryParam that took no other parameters than the key (resolving the value from the session, using the key’s name to find the attribute with the same name) have been removed. Modified multivaluedFormParam can now resolve the values directly from the session, using Gatling’s EL. Request bodiesScalate templates support has been dropped. ElFileBody (see below) is the best suited to replace your existing Scalate templates.The API for setting request bodies on request has changed. Instead of having several methods like body, fileBody and byteArrayBody, there is a now a single method, body(…) in which you set the type of body to send.Migrating .body(body) .body(body) has been replaced by .body(StringBody(body)). http(“my post request”) .post(“http://www.example.org“) .body(“Look Ma, I’m a request body !”)becomes: http(“my post request”) .post(“http://www.example.org“) .body(StringBody(“Look Ma, I’m a request body !”))Migrating .fileBody(filePath) .fileBody(filePath) has been replaced by .body(RawFileBody(filePath)). http(“my post request”) .post(“http://www.example.org“) .fileBody(“my_upload.xslx”)becomes: http(“my post request”) .post(“http://www.example.org“) .body(FileBody(“my_upload.xslx”))Migrating .fileBody(filePath, values) .fileBody(filePath, values) has been replaced by .body(ElFileBody(filePath)). values are now directly resolved from the virtual user’s session’s content. http(“my post request”) .post(“http://www.example.org“) .fileBody(“my_template.txt”, Map(“userName” -&gt; “user123”)becomes: http(“my post request”) .post(“http://www.example.org“) .body(ElFileBody(“my template.txt”))If my template.txt contains: Hi, my name is ${userName}and the virtual user’s session has an attribute userName set to user123, Then the effectively sent request body would be: Hi, my name is user123Migrating .byteArrayBody(byteArray) .byteArrayBody(byteArray) has been replaced by .body(ByteArrayBody(bytes)). http(“my post request”) .post(“http://www.example.org“) .byteArrayBody(Array(1, 2, 3, 4))becomes: http(“my post request”) .post(“http://www.example.org“) .body(ByteArrayBody(Array(1, 2, 3, 4)))For more information, see the Request bodies reference section. MiscExtendedResponse has been renamed into Response.requestInfoExtractor and responseInfoExtractor have been merged into a single extraInfoExtractor, which takes a ExtraInfo =&gt; List[Any] function.For more information on extraInfoExtractor, please refer to its documentation. Logssimulation.log has been redesigned. If you wrote your own specific simulation.log parser, you’ll need to migrate it to the new structure. RecorderUntil now, when setting up the Recorder, you had to setup two ports for the Recorder’s local proxy: one for HTTP, one for HTTPS. This is not needed anymore, as the Recorder handles itself the switch to an HTTPS connection if necessary, and only a single port needs to be specified. Maven PluginThe … and … configuration options have been removed. Should you want to select a specific simulation to run, you can use the … config option to do so. For more information, see the Maven plugin documentation. 从1.5迁移到2.0 全局变化gatling至少需要JDK7u6 提供新jdk针对的是bug修复、优化速度和打开优化速度,gatling现在至少需要JDK7u6(大约两年前已经发布)。Scala 2.10 gatling使用Scala 2.10。如果你使用Scala的IDE,确保您正在使用一个版本能与Scala 2.10兼容。gatling现在可用在Maven中央库 galtling版本现在可以使用Maven中央,以及快照部署在每个成功构建了 Travis CI Sonatype快照存储库。如果你是使用gatling的Maven插件,您不再需要添加pom.xml Excilys存储库。 package和GroupId变化 gatling的groupId和package现在io.gatling组件。你必须:更新您的构建脚本改变从com.excilys.ebi groupId gatling的依赖关系。gatling,io.gatling更新你的模拟来代替com.excilys.ebi。io.gatling更新你的模拟器来代替com.excilys.ebi.io.gatling部分通过引入io.gatling akka.util.duration 类 已经移植到 scala.concurrent.duration 包中。简单从 import akka.util.duration. 替换到 import scala.concurrent.duration.. import bootstrap. 和 import assertions. 现在不是必须的，已经被移除. import com.excilys.ebi.gatling.http.Headers.Names._ 现在不是必须的, headers 名字 直接使用HeaderNames. import com.excilys.ebi.gatling.http.Headers.Values._ 现在不是必须的, headers 值 直接使用HeaderValues. 协议设置协议已经不再配置场景,现在配置模拟器,使用协议的方法。 A 1.4.x-1.5.x 设置如下: setUp(scn.(…).protocolConfig(httpConfig)) Gatling 2.0将会这样设置: setUp(scn.(…)).protocols(httpConfig) Assertions 设置 assertThat方法已经被移除，assertions配置使用assertions以相同的方式作为协议.如下 setup(scn.(…).protocolConfig(httpConfig)) assertThat(global.responseTime.max.lessThan(1000)) 改变setup(scn.(…)) .protocols(httpConfig) .assertions(global.responseTime.max.lessThan(1000)新的DSL语言注入 通过用户、增长和延迟来配置你的场景注入剖面的方法已被拆除,取而代之的是一个完整的专用的DSL。 注入步骤现在使用注射方法配置可用的配置。 合并 users // With Gatling 1.5.XsetUp(scn.users(10)…) // With Gatling 2.0setUp(scn.inject(atOnceUsers(10))…合并 ramp // With Gatling 1.5.XsetUp(scn.users(10).ramp(30)…) // With Gatling 2.0setUp(scn.inject(rampUsers(10) over (30 seconds))…合并 delay // With Gatling 1.5.XsetUp(scn.users(10).delay(5)…) // With Gatling 2.0setUp(scn.inject(nothingFor(5 seconds), atOnceUsers(10))… 新注入的DSL的更多信息,请查阅注入DSL参考文档。 核心Checkswhatever 现在被改名为 optional. Structure Elements The first parameter of foreach is now an Expression (e.g. a Gatling EL string), not the name of the attribute to loop over. foreach现在是一个表达式的第一个参数(如gatling EL string),不是遍历属性的名称。 For example, if you have a list attribute in the user’s session holding a list of values: 例如,如果您有一个属性列表在用户的会话持有的值列表: .foreach(“list”, “elem”) { …}变为: .foreach(“${list}”, “elem”) { …}In asLongAs, exitASAP now defaults to true. For more information on the change of behaviour it introduces, see asLongAs documentation. 在 asLongAs exitASAP 现在默认设置是true.有关的行为改变的更多信息介绍,请看asLongAs文档。 Session 会话已经作为主要的重构: session.get(“foobar”) becomes session(“foobar”)session.getTypedAttributeT becomes session(“foobar”).as[T]session.getAttributeAsOptionT becomes session(“foobar”).asOption[T]session.setAttribute(“foobar”, 1234) becomes session.set(“foobar”, 1234)session.setAttributes(Map(“foo” -&gt; 1, “bar” -&gt; 2) becomes session.setAll(“foo” -&gt; 1, “bar” -&gt; 2)session.removeAttribute(“foobar”) becomes session.remove(“foobar”)session.isAttributeDefined(“foobar”) becomes session.contains(“foobar”) HTTP协议HTTP协议启动加载器、httpProtocol已经更名为HTTP。Query 参数移除版本的queryParam和multivaluedQueryParam,没有其他比的关键参数(解决会话中的值,使用关键的名字找到具有相同名称的属性)已被移除。 Modified multivaluedFormParam现在可以解决直接从会话值,使用gatling的EL。 Request bodies Scalate templates support has been dropped.对Scalate templates 支持已经放弃。 ElFileBody (如下) 是当前代替Scalate templates最佳方案 api的请求体的设置意境改变。现在用这几个方法来代替body fileBody byteArrayBody.现在有一个单独的方法。body(…)通过你设置的类型的body来发送。合并 .body(body) body(body) 已经被 .body(StringBody(body))代替. http(“my post request”) .post(“http://www.example.org“) .body(“Look Ma, I’m a request body !”)变成： http(“my post request”) .post(“http://www.example.org“) .body(StringBody(“Look Ma, I’m a request body !”)) 合并 .fileBody(filePath) .fileBody(filePath) 被 .body(RawFileBody(filePath))代替. http(“my post request”) .post(“http://www.example.org“) .fileBody(“my_upload.xslx”)becomes: http(“my post request”) .post(“http://www.example.org“) .body(FileBody(“my_upload.xslx”)) 合并 .fileBody(filePath, values) .fileBody(filePath, values) 已经被 .body(ElFileBody(filePath))代替.值现在直接解决虚拟用户会话的内容。 http(“my post request”) .post(“http://www.example.org“) .fileBody(“my_template.txt”, Map(“userName” -&gt; “user123”) 变为 http(“my post request”) .post(“http://www.example.org“) .body(ElFileBody(“my template.txt”)) 如果 template.txt 包含: Hi, my name is ${userName} 和虚拟用户的会话属性的用户名设置为user123, 然后将发送有效地请求主体:Hi, my name is user123 合并 .byteArrayBody(byteArray) .byteArrayBody(byteArray) 被 .body(ByteArrayBody(bytes))代替. http(“my post request”) .post(“http://www.example.org“) .byteArrayBody(Array(1, 2, 3, 4)) 变为： http(“my post request”) .post(“http://www.example.org“) .body(ByteArrayBody(Array(1, 2, 3, 4))) 更多有关信息,请参见请求机构引用部分。 MiscExtendedResponse已经重命名为响应。requestInfoExtractor和responseInfoExtractor已经合并成一个单一的extraInfoExtractor,ExtraInfo =&gt; List[Any] function.。在extraInfoExtractor的更多信息,请参阅文档。 Logssimulation.log 被重新设计。 If you wrote your own specific simulation.log parser, you’ll need to migrate it to the new structure.如果你写自己的simulation.log解析器,您需要它迁移到新结构 Recorder录制器Until now, 当你设置 Recorder时, 你必须设置两个端口记录器的当地代理:一个用于HTTP,HTTPS。 这再也不需要了, 因为record处理本身转向一个HTTPS连接如果必要,并且只需要指定一个单独的端口。","categories":[],"tags":[{"name":"gatling","slug":"gatling","permalink":"http://yoursite.com/tags/gatling/"}],"keywords":[]},{"title":"gatling官方文档翻译2","slug":"gatling2","date":"2016-06-02T14:37:03.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2016/06/02/gatling2/","link":"","permalink":"http://yoursite.com/2016/06/02/gatling2/","excerpt":"","text":"第二篇http://gatling.io/docs/2.2.1/whats_new/2.2.html What’s New in 2.2JDKGatling now requires JDK8. JVM default tuning uses G1 Garbage Collector, so we strongly advice you use a very up-to-date JDK, not early versions. CoreFeeder ShuffleYou can now shuffle a feeder content before enqueuing its content, see Feeder documentation for more details. AssertionsGatling now supports “per-million” assertions, similar to “percent” ones. Conditional Checks (since 2.2.1)It’s now possible to only perform a given check when a given condition is met. See Conditional Checks documentation for more details. HTTPNative TransportGatling is now based on Netty 4 that provide an optional native epoll-based NIO re-implementation (different from JDK NIO) which can give better throughput. This option is only available on Linux. See Netty documentation for more details. Gatling ships with the required jar, but the option is turned down by default. In order to enable it, set gatling.http.ahc.useNativeTransport to true in gatling.conf. OpenSSL SupportNetty 4 also provides a support for OpenSSL and BoringSSL. See Netty documentation for more details. Gatling doesn’t ship the required jar and it depends on your operating system and if you want static or dynamic binding. You’re expected to manually add the suited library to Gatling’s classpath. In order to enable it, set gatling.http.ahc.useOpenSsl to true in gatling.conf. Forms SupportYou can now use the form(“cssSelector”).saveAs(“myForm”) check to capture a Map[String, Seq[String]] of all the inputs of an HTML form at once. You can then feed them back to a later request. See HTTP request documentation for more details. Polling SupportGatling now supports HTTP polling, see HTTP polling documentation for more details. Hostname ResolutionBy default, virtual users now use a shuffled list of the DNS records Gatling gets from the JDK. If you use DNS round-robin, this will balance your virtual users amongst the nodes of a static cluster. Alternatively, you can enable perUserNameResolution on the HTTP protocol and have each virtual user perform DNS resolution on its own. This, way, your virtual users would be properly balanced if your cluster grows elastically under load. See HTTP protocol documentation for more details. We also support DNS fail-over, meaning that virtual users will try the next DNS record of they couldn’t connect to the first address. Hostname AliasingYou can bypass hostname resolution and define aliases in hostNameAliases on the HTTP protocol. See HTTP protocol documentation for more details. Local AddressesIt’s now possible to pass multiple local addresses to the HTTP protocol in localAddresses. See HTTP protocol documentation for more details. ReportsJUnit Format Report FileGatling now generates a JUNIt format report file based on the assertions in your simulation. This file is generated as /js/assertions.xml. Groups DurationYou can switch from Group cumulated response times to duration when generating the reports. See gatling.charting.useGroupDurationMetric option in gatling.conf Maven PluginThe Gatling Maven plugin now provides test and integration-test that are bound to the phases of the same name. It also now provides a useOldJenkinsJUnitSupport that exposes our JUnit file to Jenkins. At some point, we’ll provide a native support. 在2.2的新增了那些功能JDKgatling现在需要JDK8支持。 JVM默认调整使用G1垃圾收集器，因此我们强烈建议您升级到最新的JDK，而不是早期版本。 核心Feeder Shuffle（不会翻…）现在，You can now shuffle a feeder content before enqueuing its content，请参阅Feeder文档了解更多信息。 断言gatling现在支持“per-million”的断言，类似于“percent”。 条件检查（自2.2.1）现在只要当给定条件满足时就可以执行一个给定的检查。有关详细信息，请参阅条件检查文档。 HTTP本机传输虽然我也不知道 epoll-based NIO是什么。。。 gatling现在基于Netty 4提供一个可选的基于原生的epoll-NIO重新实现（从JDK NIO不同），它可以提供更好的吞吐量。此选项仅在Linux上可用。详见的Netty文档,了解更多信息。 gatling不需要携带需要的jar包，它取决于你的操作系统,如果你想要静态或动态绑定。你需要手动配置需要的jar的path到gatling的classpath。加特林附带所需的jar,但默认选项是关闭的。 为了启用它,设置gatling.http.ahc。在gatling.conf useNativeTransport为true。 为了启用他，需要在gatling.conf里将 gatling.http.ahc.useOpenSsl设置为true。 表单支持您现在可以使用的form(“cssSelector”).saveAs（“myForm”）检查捕捉Map[String, Seq[String]]在HTML表单的所有输入。 然后，您可以传递给以后的请求。见HTTP请求的文档了解更多信息。 轮训支持gatling现在支持HTTP轮询，请参阅HTTP轮询文档了解更多信息。 hostname解析默认情况下，, virtual users now use a shuffled list of the DNS records Gatling gets from the JDK. If you use DNS round-robin。如果您使用DNS循环，这将你的虚拟用户的静态群集的节点之间平衡。 或者，也可以在HTTP协议使用perUserNameResolution，并让每个虚拟用户自身进行DNS解析。这样，如果你的集群负载下的弹性增长时，你的虚拟用户会保持良好的平衡。见HTTP协议文档了解更多信息。 我们也支持DNS故障转移，这意味着虚拟用户会尝试下一个DNS记录，当他们无法连接到第一个地址时。 别名主机名您可以绕过主机名解析和HTTP协议定义hostNameAliases别名。见HTTP协议文档了解更多信息。 本地地址它现在可以将多个本地地址传递给在localAddresses HTTP协议。见HTTP协议文档了解更多信息。 报告JUnit的格式报告文件加特林现在根据你的模拟断言产成一个JUnit格式的报告文件。此文件将生成如/js/assertions.xml。 group持续时间您可以切换组累计响应时间当时间生成报告时。见gatling.conf gatling.charting.useGroupDurationMetric选项 Maven插件gatling Maven插件现在提供测试和集成测试绑定到同名的阶段。 它还现在提供一个公开的JUnit我们的文件，jenkins一useOldJenkinsJUnitSupport。在某些时候，我们将提供原生支持。","categories":[],"tags":[{"name":"gatling","slug":"gatling","permalink":"http://yoursite.com/tags/gatling/"}],"keywords":[]},{"title":"gatling官方文档翻译","slug":"gatling","date":"2016-05-31T06:56:38.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2016/05/31/gatling/","link":"","permalink":"http://yoursite.com/2016/05/31/gatling/","excerpt":"","text":"第一篇 http://gatling.io/docs/2.2.1/index.htmlGatling is a highly capable load testing tool. It is designed for ease of use, maintainability and high performance. Out of the box, Gatling comes with excellent support of the HTTP protocol that makes it a tool of choice for load testing any HTTP server. As the core engine is actually protocol agnostic, it is perfectly possible to implement support for other protocols. For example, Gatling currently also ships JMS support. The Quickstart has an overview of the most important concepts, walking you through the setup of a simple scenario for load testing an HTTP server. Having scenarios that are defined in code and are resource efficient are the two requirements that motivated us to create Gatling. Based on an expressive DSL, the scenarios are self explanatory. They are easy to maintain and can be kept in a version control system. Gatling’s architecture is asynchronous as long as the underlying protocol, such as HTTP, can be implemented in a non blocking way. This kind of architecture lets us implement virtual users as messages instead of dedicated threads, making them very resource cheap. Thus, running thousands of concurrent virtual users is not an issue. Migrating from a Previous Version of GatlingIf you’re migrating from Gatling 2.1 to Gatling 2.2, please check the dedicated migration guide.Otherwise, please follow the previous migration guides.User’s guideWhat’s NewMigration GuidesQuickstartAdvanced TutorialGeneralSessionHTTPJMSRealtime monitoringExtensionsCookbookInformation for Gatling DevelopersProject Information gatling是一个的高性能压力测试工具。它设计的初衷是易用性、可维护性和高性能。gatling开箱即用的,并且很好的支持HTTP协议,使其成为你测试任何HTTP服务器负载的工具选择之一。作为核心引擎实际上是协议无关,这是完全有可能实现并支持其他协议。例如,gatling目前还对JMS支持。 快速入门是对于最重要的概念有一个回顾,通过设置一个简单的场景的来对一个HTTP服务器完成负载测试。在代码中定义测试场景和资源利用率两方面的需求,激励我们创造gatling。基于可表述的DSL语言,所以场景易于叙述和理解的。他们很容易维护,并且可以保存在一个版本控制系统。 gatling的架构和底层协议均采用异步方式设计。比如HTTP、可以利用一个非阻塞的方式来实现。这种架构可以让我们实现虚拟用户的消息而不是专用的线程,让他们成为非常廉价资源。因此,运行数千并发虚拟用户不是什么问题。 从之前的版本中合并gatling 如果你从gatling2.1迁移到2.2gatling,请检查专用的合并指南。否则,请安装的合并指南。 用户手册 新事物 合并手册 快速入门 高级教程 通用 消息 Http JMS 实时监测 扩展 cookbook gatling 开发者信息 项目信息","categories":[],"tags":[{"name":"gatling","slug":"gatling","permalink":"http://yoursite.com/tags/gatling/"}],"keywords":[]},{"title":"前端测试工具集锦","slug":"front-end-tools","date":"2016-05-24T12:47:35.000Z","updated":"2017-09-21T07:42:16.000Z","comments":true,"path":"2016/05/24/front-end-tools/","link":"","permalink":"http://yoursite.com/2016/05/24/front-end-tools/","excerpt":"","text":"总结最近了解的前端测试的相关内容，发现前端这里真的是太庞大了，而且各种测试工具层出不穷，需要总结东西太多了，如有遗漏请大家见谅。 TDD vs BDD：TDD与BDD概念不再描述了，直奔主题。 前端BDD测试框架jasmineInstallation install -g jasmine12345```InitializingTo initialize a project for Jasmine```jasmine init To seed your project with some examples examples1234```UsageTo run your test suite``` jasmine 12345describe(\"A suite\", function() &#123; it(\"contains spec with an expectation\", function() &#123; expect(true).toBe(true); &#125;);&#125;); mocha(推荐,简洁明了) Installation Install with npm:1$ npm install -g mocha Getting Started123$ npm install -g mocha$ mkdir test$ $EDITOR test/test.js In your editor:123456789var assert = require('chai').assert;describe('Array', function() &#123; describe('#indexOf()', function () &#123; it('should return -1 when the value is not present', function () &#123; assert.equal(-1, [1,2,3].indexOf(5)); assert.equal(-1, [1,2,3].indexOf(0)); &#125;); &#125;);&#125;); you need to install chai.Back in the terminal:12345678910 $ mocha . ✔ 1 test complete (1ms)``` ### 前端TDD测试框架QunitInstallation $ npm i qunit 1234567891011121314151617181920212223242526272829303132333435363738API http://api.qunitjs.comQunit是一款强大的用于帮助调试代码的，JavaScript单元测试框架。QUnit由jQuery团队成员编写，是jQuery的官方测试套件，不仅如此，QUnit还可以测试任何常规JavaScript代码，甚至可以通过一些像Rhino或者V8这样的JavaScript引擎，测试服务端JavaScript代码。可以想象其跟jquery UI及jquery animation等库结局一样，逃脱不了各种被后来的库全方位的比较和“超越”.## Unit TestingMocha &amp;&amp; JasmineMocha 跟 Jasmine 是目前最火的两个单元测试框架，基本上目前前端单元测试就在这两个库之间选了，下面是这两个库的区别，大家可以根据自己的需求进行选择：mocha： 优点： 终端显示友好 灵活，扩展性好 缺点： 自身集成度不高（没有断言，spy，异步等），而且经常要配合Chai，Sinon等库使用 配置相对麻烦一点点Jasmine: 优点： 集成度高，自带BBD，spy，方便的异步支持(2.0) 配置方便 缺点： 相对不太灵活 由于各种功能内建，断言方式或者异步等风格相对比较固定 没有自带mockserver， 如果需要这功能的得另外配置jestJest 是Facebook的一个专门进行Javascript单元测试的工具.它是在Jasmine测试框架上演变开发而来，使用了我们熟知的expect(value).toBe(other) 这种断言格式。First install Jest with npm by running: npm install --save-dev jest-cli 12Great! Now let's get started by writing a test for a hypothetical sum.js file: function sum(a, b) { return a + b; } module.exports = sum; 1Create a directory __tests__/ with a file sum-test.js: jest.unmock(&apos;../sum&apos;); // unmock to use the actual implementation of sum describe(&apos;sum&apos;, () =&gt; { it(&apos;adds 1 + 2 to equal 3&apos;, () =&gt; { const sum = require(&apos;../sum&apos;); expect(sum(1, 2)).toBe(3); }); }); 1Add the following to your package.json: &quot;scripts&quot;: { &quot;test&quot;: &quot;jest&quot; } 1Run npm test: [PASS] __tests__/sum-test.js (0.010s) 12345678910111213141516171819202122## 代码覆盖率工具jscoverjscover是一个用来显示JavaScript项目代码覆盖率的工具，它是继承于JSCoverage的，用C++/SpiderMonkey 取代了Java/Rhino但是已经沦落到淘汰的边缘Istanbul(推荐目前最强大前端代码覆盖率工具)Istanbul 是 JavaScript 程序的代码覆盖率工具,能产生 Statements/Lines/Functions/Branches 等指标报表，并以各种格式导出。http://qaseven.github.io/2016/01/25/gulp_for_qa/ 这篇文章里已经详细介绍了。blanketjsblanketjs是一个易于安装,易于配置和易于使用的JavaScript代码覆盖库 对于nodejs和浏览器都支持的不错。NodeJS (Powered by Mocha)Install from npm. npm install blanket 123456789101112131415161718192021Make sure you require Blanket before you require or run any of the code you want covered require(\"blanket\")(&#123; /* optional options */ &#125;), require(\"src/myscripttotest\");Run your tests using mocha and take advantage of the json-cov and html-cov reporters to output the coverage results.## e2e testuiwebdriverio这个库是nodejs的一个webdriver模块(浏览器自动化)。你可以用它写超级简单Selenium测试在你最喜欢的BDD / TDD测试框架中,并且可以在本地运行或在云端中， Sauce Lab,BrowserStack或TestingBot。webdriverio 支持 Cucumber, Jasmine and Mocha+Chai 这些测试框架nightwatchNightwatch.js 是一个易于使用的，基于 Node.js 平台的浏览器自动化测试解决方案。它使用强大的 Selenium WebDriver API 来在 DOM 元素上执行命令和断言。 语法简单但很强大，使您可以快速编写测试。只需使用 Javascript 和 CSS 选择器，不需要初始化其他对象和类，您只需要编写测试规范。内置命令行测试运行器，使您能够运行整体测试，分组测试或者单个测试。 this.demoTestGoogle = function (browser) { browser .url(“http://www.google.com”) .waitForElementVisible(&apos;body&apos;, 1000) .setValue(&apos;input[type=text]&apos;, &apos;nightwatch&apos;) .waitForElementVisible(&apos;button[name=btnG]&apos;, 1000) .click(&apos;button[name=btnG]&apos;) .pause(1000) .assert.containsText(&apos;#main&apos;, &apos;The Night Watch&apos;) .end(); }; 123456当涉及异步调用时，基于链式的队列是个糟糕的模式CodeceptJSCodeceptJS是一个基于WebDriver全新的端到端测试框架。它们从用户角度简单描述用户操作步骤来编写测试脚本 Feature(&apos;CodeceptJS Demonstration&apos;); Scenario(&apos;test some forms&apos;, (I) =&gt; { I.amOnPage(&apos;http://simple-form-bootstrap.plataformatec.com.br/documentation&apos;); I.fillField(&apos;Email&apos;, &apos;hello@world.com&apos;); I.fillField(&apos;Password&apos;, &apos;123456&apos;); I.checkOption(&apos;Active&apos;); I.checkOption(&apos;Male&apos;); I.click(&apos;Create User&apos;); I.see(&apos;User is valid&apos;); I.dontSeeInCurrentUrl(&apos;/documentation&apos;); }); 12345protractor(angluarjs亲儿子，由angluarjs核心人物开发的e2e测试工具)protractor 是 AngularJS 团队构建的一个端对端的测试运行工具，模拟用户交互，帮助你验证你的Angular应用的运行状况。Protractor使用Jasmine测试框架来定义测试,当然你也可以选择其他测试框架来定义测试，如mocha。Protractor为不同的页面交互提供一套健壮的API。 var chai = require(&apos;chai&apos;); var chaiAsPromised = require(&apos;chai-as-promised&apos;); chai.use(chaiAsPromised); var expect = chai.expect; describe(&apos;angularjs 首页&apos;, function() { it(&apos;应该欢迎一个具名的用户&apos;, function() { //要求浏览器访问网址http://www.angularjs.org browser.get(&apos;http://www.angularjs.org&apos;); //找到ng-model名为&apos;youname&apos;的HTML元素，要求浏览器键入名字 element(by.model(&apos;yourName&apos;)).sendKeys(&apos;tanshuai&apos;); var greeting = element(by.binding(&apos;yourName&apos;)); //取得结果并作断言测试 expect(greeting.getText()).to.eventually.equal(&apos;Hello tanshuai!&apos;); }); }); 1234567891011## headlessPhantomJSPhantomJS 是一个基于 WebKit 的服务器端 JavaScript API。它全面支持web而不需浏览器支持，其快速，原生支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG。 PhantomJS 可以用于 页面自动化 ， 网络监测 ， 网页截屏 ，以及 无界面测试 等。很多其它的测试框架都是基于PhantomJS二次开发的,例如下面要讲的casperjs，nightmarenightmarenightmare是一个高级浏览器自动化依赖库。 var Nightmare = require(‘nightmare’); var expect = require(‘chai’).expect; // jshint ignore:line describe(&apos;test yahoo search results&apos;, function() { it(&apos;should find the nightmare github link first&apos;, function*() { var nightmare = Nightmare() var link = yield nightmare .goto(&apos;http://yahoo.com&apos;) .type(&apos;form[action*=&quot;/search&quot;] [name=p]&apos;, &apos;github nightmare&apos;) .click(&apos;form[action*=&quot;/search&quot;] [type=submit]&apos;) .wait(&apos;#main&apos;) .evaluate(function () { return document.querySelector(&apos;#main .searchCenterMiddle li a&apos;).href }) expect(link).to.equal(&apos;https://github.com/segmentio/nightmare&apos;); }); }); 1234casperjsCasperJS 是一个开源的导航脚本和测试工具，使用 JavaScript 基于 PhantomJS 编写，用于测试 Web 应用功能，Phantom JS是一个服务器端的 JavaScript API 的 WebKit。其支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG. var casper = require(‘casper’).create(); var fs = require(‘fs’) casper.start(‘https://github.com/login/‘); casper.waitForSelector(‘input.btn.btn-primary.btn-block’); // wait for the form node to be added casper.then(function() { this.fillSelectors(‘.auth-form-body’, { ‘#login_field’: ‘qileilove’, ‘#password’: ‘*‘ }); this.click(‘input.btn.btn-primary.btn-block’); // Click the login button instead of submitting the form this.echo(‘Browser Cookie: ‘ + this.evaluate(function() { return document.cookie; })); casper.run(function() { var cookies = JSON.stringify((this.page.cookies)); fs.write(&apos;cookie.txt&apos;, cookies, &apos;w&apos;); this.exit(); }); casper.wait(3000); // Wait for ajax form submission casper.then(function() { this.capture(&apos;logged-in.png&apos;) }); casper.run(); 123456## visual regression-testbackstopjsBackstopJS 是自动 CSS 回归测试工具，它通过比较不同视窗大小的 DOM 截图来回应你所测试的 Web 界面。可以识别出两个不同视角上的网页差异。 &quot;scenarios&quot;: [ { &quot;label&quot;: &quot;My Local Test&quot;, &quot;url&quot;: &quot;../../index.html&quot;, &quot;hideSelectors&quot;: [], &quot;removeSelectors&quot;: [ ], &quot;selectors&quot;: [ &quot;nav&quot;, &quot;.jumbotron&quot;, &quot;body .col-md-4:nth-of-type(1)&quot;, &quot;body .col-md-4:nth-of-type(2)&quot;, &quot;body .col-md-4:nth-of-type(3)&quot;, &quot;footer&quot; ], &quot;readyEvent&quot;: null, &quot;delay&quot;: 0, &quot;onReadyScript&quot;: null, &quot;onBeforeScript&quot;: null } ], 12345678910111213141516 viff 咱们公司的 基于selenium的，已经废了。。。 2年多没更新了 success Succss is a command line tool built to find image-based differences between website updates. Succss relies on npm and is installed globally. https://github.com/B2F/Succss 也一年没更新了.. phantomcssPhantomCSS 是 CSS 回归测试工具。一个通过 PhantomJS 或者 SlimerJS 和 Resemble.js 进行自动视觉回归测试的 CasperJS 模块。 casper. start( url ). then(function(){ // do something casper.click(&apos;button#open-dialog&apos;); // Take a screenshot of the UI component phantomcss.screenshot(&apos;#the-dialog&apos;, &apos;a screenshot of my dialog&apos;); }); 1234567891011121314151617181920212223242526##JavaScript验证工具eslintjshintjslint三者比较的文章https://www.sitepoint.com/comparison-javascript-linting-tools/## 前端mock工具Mock.js Mockjs是个能够拦截页面ajax请求并模拟返回数据的小工具，借助Mockjs，前端开发中在后台测试接口还没有给的时候就可以自己拦截请求模拟数据进行愉快的开发了，所以只要制定好了协议，前后端分离开发的成本可以降到基本为0，也不需要联调工具了。sinon.js为Javascript提供独立的spies，stubs和mocks。没有任何依赖，可以与任何单元测试框架协同工作。## api测试工具SuperTest基于SuperAgent ，提供对HTTP测试的高度抽象.能嵌入各类测试框架，提供语义良好的断言. var app = require(&apos;../app&apos;); var request = require(&apos;supertest&apos;); describe(&apos;router testing&apos;, function () { it(&apos;site root response&apos;, function (done) { request(app) .get(&apos;/&apos;) .expect(&apos;Content-Type&apos;, &apos;text/html; charset=utf-8&apos;) .expect(200) .end(function(err, res){ if (err) throw err; done(); }); }); ```利用Mocha + Chai + SuperTest就可以搭建一套 前端rest－api测试框架","categories":[],"tags":[{"name":"前端测试","slug":"前端测试","permalink":"http://yoursite.com/tags/前端测试/"}],"keywords":[]},{"title":"appium并发测试","slug":"appium","date":"2016-05-05T05:53:59.000Z","updated":"2017-09-21T07:50:18.000Z","comments":true,"path":"2016/05/05/appium/","link":"","permalink":"http://yoursite.com/2016/05/05/appium/","excerpt":"","text":"appium 介绍Appium 是一个开源的，跨平台的自动化测试工具。 它支持模拟器（iOS，FirefoxOS，Android）和真机（iOS， Android， FirefoxOS）上的原生应用，混合应用和移动 web 应用。 appium 工作原理 Android在Android端，appium基于WebDriver协议，利用Bootstrap.jar，最后通过调⽤用UiAutomator的命令，实现App的自动化测试。 UiAutomator测试框架是Android SDK自带的App UI自动化测试Java库。 另外由于UiAutomator对H5的支持有限，appium引入了chromedriver以及safaridriver等来实现基于H5的自动化。 appium 在android端工作流 client端也就是我们 test script是我们的webdriver测试脚本。 中间是起的Appium的服务，Appium在服务端起了一个Server（4723端口），跟seleniumWebdriver测试框架类似， Appium⽀持标准的WebDriver JSONWireProtocol。在这里提供它提供了一套REST的接口,Appium Server接收web driver client标准rest请求，解析请求内容，调⽤用对应的框架响应操作。 appium server会把请求转发给中间件Bootstrap.jar ，它是用java写的，安装在手机上.Bootstrap监听4724端口并接收appium 的命令，最终通过调⽤用UiAutomator的命令来实现。 最后Bootstrap将执行的结果返回给appium server。 appium server再将结果返回给 appium client。 ios在IOS端，appium同样使⽤WebDriver的一套协议。 与Android端测试框架不同的是，appium ios封装了apple的 Instruments框架，主要用了Instrument里的UI Automation（Apple的⾃自动化测试框架），然后在设备中注⼊入bootstrap.js进⾏行监听。 appium 在ios端工作流 client端 依然是 test script是我们的webdriver测试脚本。 中间是起的Appium的服务，Appium在服务端起了一个Server（4723端口），跟seleniumWebdriver测试框架类似， Appium⽀持标准的WebDriver JSONWireProtocol。在这里提供它提供了一套REST的接口,Appium Server接收web driver client标准rest请求，解析请求内容，调⽤用对应的框架响应操作。 appium server调用instruments.js 启动⼀一个socket server，同时分出一个⼦子进程运⾏instruments.app，将bootstrap.js（一个UIAutomation脚本）注⼊入到device⽤于和外界进行交互 最后Bootstrap.js将执行的结果返回给appium server appium server再将结果返回给 appium client。 所以我们可以看到android与ios区别在于appium 将请求转发到bootstrap.js或者bootstrap.jar.然后由bootstrap 驱动UIAutomation和UiAutomator去devices上完成具体的动作。 appium 并发 关于appium并发，我将之分为2类，第一类单机并发。第二类基于selenium grid 多节点并发测试,也可称之为云测。 appium 单机并发Android并发测试Appium提供了在一台设备上启动多个Android会话的方案。 appium -p 4492 -bp 2251 -U 32456 启动多个Android会话的重要指令包括： 指令 功能 -p Appium的主要端口 -U 设备id -bp Appium bootstrap端口 –chromedriver-port chromedriver端口（当使用了webviews或者chrome） –selendroid-port selendroid端口（当使用了selendroid） iOS并发测试 不幸的是，IOS不能进行本地并发测试。跟Android不一样，IOS在同一时间只能启动一个版本的模拟器来运行多个测试。 总结:单机并发目前只能在android实现，且必须启动n个appium server 对应不同devices，这里devices可以是真机或模拟器。但是必须保证端口后没有重复使用。接下来工作就是利用测试框架(testng,jasmine,rspec,cucumber等)将测试分发到不同appium server上。 代码示例 github 代码解析： 首先让我们来看下代码中的AppiumParallelTest这个类，他们先判断操作系统，并获取操作系统上连接的devices。利用AndroidDeviceConfiguration.java 与 IOSDeviceConfiguration.java 中的getIOSUDID，getDevices方法分别获取真机与模拟器的id. 然后利用startAppiumServer方法启动appium server, 利用appiumServerForAndroid()或者appiumServerForIOS(). aa appium grid 分布式并发 start selenium grid sever 1java -jar selenium-server-standalone-2.47.1.jar -port 4444 -role hub -hub http://192.168.199.140:4444/grid/registe Registered appium server as the grid node 1appium --nodeconfig appium_node_S3.json -p 4823 -bp 3356 -U \"192.168.99.104:5555\" --chromedriver-port 4738 Configure the test script,run the tests 123456789@BeforeTest @Parameters(&#123;\"deviceName\"&#125;) public void setUp(String deviceName) throws Exception &#123; capabilities.setCapability(\"deviceName\",deviceName); capabilities.setCapability(\"platformVersion\", \"5.0\"); capabilities.setCapability(\"app\", getApp(\"ContactManager.apk\")); setUpAndroidDriver(); &#125; GRID NODE CONFIGURATION EXAMPLE JSON FILE12345678910111213141516171819202122232425&#123; \"capabilities\": [ &#123; \"deviceName\": \"192.168.56.101:5555\", \"browserName\": \"&lt;e.g._iPhone5_or_iPad4&gt;\", \"version\":\"&lt;version_of_iOS_e.g._7.1&gt;\", \"maxInstances\": 1, \"platform\":\"&lt;platform_e.g._MAC_or_ANDROID&gt;\" &#125; ], \"configuration\": &#123; \"cleanUpCycle\":2000, \"timeout\":30000, \"proxy\": \"org.openqa.grid.selenium.proxy.DefaultRemoteProxy\", \"url\":\"http://&lt;host_name_appium_server_or_ip-address_appium_server&gt;:&lt;appium_port&gt;/wd/hub\", \"host\": &lt;host_name_appium_server_or_ip-address_appium_server&gt;, \"port\": &lt;appium_port&gt;, \"maxSession\": 1, \"register\": true, \"registerCycle\": 5000, \"hubPort\": &lt;grid_port&gt;, \"hubHost\": \"&lt;Grid_host_name_or_grid_ip-address&gt;\" &#125;&#125; 未完待续","categories":[],"tags":[{"name":"appium","slug":"appium","permalink":"http://yoursite.com/tags/appium/"},{"name":"automation","slug":"automation","permalink":"http://yoursite.com/tags/automation/"}],"keywords":[]},{"title":"前端性能分析优化","slug":"前端性能分析优化","date":"2016-02-23T13:05:28.000Z","updated":"2017-09-21T07:40:39.000Z","comments":true,"path":"2016/02/23/前端性能分析优化/","link":"","permalink":"http://yoursite.com/2016/02/23/前端性能分析优化/","excerpt":"","text":"分析问题我们并不仅仅关注页面资源的解析和展示响应时间，而是要关注总时间；我们进行web前端性能测试的目的是计算出包含页面渲染、网络传输以及服务器端解析等综合因素在内的加载时间等指标，对该页面性能进行评估分析，找出影响性能的主要因素和瓶颈，并在此结果的基础上，给出一定的优化建议和解决方案，从而提升用户体验。 根据雅虎团队经验：网站页面性能优化的34条黄金守则，我们逐条分析。 性能黄金法则 只有10%-20%的最终用户响应时间花在接收请求的HTML文档上，剩下的80%-90%时间花在HTML文档所引用的所有组件(图片，script，css，flash等等)进行的HTTP请求上。 尽量减少HTTP请求次数 合并文件. 例如将项目中用的资源文件合并。所有的CSS文件都放入一个样式表中.或者将js文件合并压缩 利用gulp,grunt,webpack等构建工具将项目资源文件整合 利用CSS Sprites 减少图像请求. 通过使用合并图片，通过指定css的backgroud-image和backgroud-position来显示元素。 启用浏览器缓存 要利用浏览器缓存存储可缓存的资源 在HTTP标头中为静态资源设置有效期或最长存在时间，可指示浏览器从本地磁盘中加载以前下载的资源而不是从网络中加载。 减少DNS查找 DNS缓存 当客户端的DNS缓存为空时，DNS查找的数量与Web页面中唯一主机名的数量相等。减少唯一主机名的数量就可以减少DNS查找的数量。 使用内容分发网络 页面静态化,取决于发布系统 按页面内容划分域名，在合适的资源服务器上存放文件 避免404错误 避免内部无效的链接 避免重定向 压缩组件 精简Javascript和Css 尽量缩减页面大小 页面必须小于150K(不含图片） a) 静态文件是否gzip b) 图片是否压缩优化过 预处理 浏览器空闲时请求将来可能会用到的页面内容 无条件加载：触发onload事件时，直接加载额外的页面内容 有预期的加载：载入重新设计过的页面时使用预加载。 移除重复脚本 使iframe的数量最小 异步加载 js 开发规范 代码逻辑分层 避免全局变量 便于多人协作开发 各部分代码模块化，可以按需加载 利用requirejs和seajs等模块化工具加载 保持全局变量的清洁 可进行单元测试 参考 yahoo前端性能优化指南中文版 yahoo前端性能优化指南","categories":[],"tags":[{"name":"性能测试","slug":"性能测试","permalink":"http://yoursite.com/tags/性能测试/"}],"keywords":[]},{"title":"前端性能测试之分析篇","slug":"前端性能测试之分析篇","date":"2016-02-23T03:31:51.000Z","updated":"2017-09-21T07:40:48.000Z","comments":true,"path":"2016/02/23/前端性能测试之分析篇/","link":"","permalink":"http://yoursite.com/2016/02/23/前端性能测试之分析篇/","excerpt":"","text":"引言前一章，我们讲了browser的工作原理,那么怎么样才能让了解整个主站前端的性能呢？监控！ 对，是的，我们可以利用各种工作对我们的website进行实时的监控,目前监控的方式有两种。 类型 优点 缺点 示例 非侵入式 指标齐全、客户端主动监测、竞品监控 无法知道性能影响用户数、采样少容易失真、无法监控复杂应用与细分功能 Pagespeed、yslow、PhantomJS、webpagetest、sitespeedio 侵入式 真实海量用户数据、能监控复杂应用与业务功能、用户点击与区域渲染 需插入脚本统计、网络指标不全、无法监控竞品 new relic、Google analyse、oneapm 前端性能分析工具那有哪些简易便利的工具能帮助我们更好的进行测试呢？ok，工具集锦来临。 浏览器插件类 FireBug它可以对页面进行调试，可以记录所有网页的访问耗时，下载的资源等 Page Speed Yslow page performance performance analyse 在线网站类 WebPageTest showslow sitespeed.io 平台类收费服务平台 google_analytics new relic oneapm 开源平台 InfluxDB + Grafana参考文章 InfluxDB + Grafana 快速搭建自己的 NewRelic，分析应用运行情况 OBIEE Monitoring and Diagnostics with InfluxDB and Grafana Nagios Zabbix","categories":[],"tags":[{"name":"性能测试","slug":"性能测试","permalink":"http://yoursite.com/tags/性能测试/"}],"keywords":[]},{"title":"前端性能测试分析","slug":"前端性能测试分析_原理篇","date":"2016-02-23T02:12:40.000Z","updated":"2017-09-21T07:40:59.000Z","comments":true,"path":"2016/02/23/前端性能测试分析_原理篇/","link":"","permalink":"http://yoursite.com/2016/02/23/前端性能测试分析_原理篇/","excerpt":"","text":"原理篇browser工作原理web浏览器与web服务器之间通过HTTP协议进行通信的过程。所以，web C/S之间握手的协议就是HTTP协议。 页面的请求过程请求阶段 browser send url request 递归寻找DNS server 连接目标IP并建立TCP连接 向目标服务器发送http请求 web服务器接收请求后处理 web服务器返回相应的结果【无效、重定向、正确页面等】 浏览器接收返回的http内容 前端解析阶段渲染引擎—通过网络获得所请求文档的内容, 解析html以构建dom树-&gt;构建render树-&gt;布局render树-&gt;绘制render树 开始解析html文件，当然是自上而下，先是头部，后是body 当解析到头部css外部链接时，同步去下载，如果遇到外部js链接也是下载【不过js链接不建议放在头部，因为耽误页面第一展现时间】 接着解析body部分，边解析边开始生成对应的DOM树，同时等待css文件下载 一旦css文件下载完毕，那么就同步去用已经生成的DOM节点+CSS去生成渲染树 渲染树一旦有结构模型了，接着就会同步去计算渲染树节点的布局位置 一旦计算出来渲染的坐标后，又同步去开始渲染 4-6步进行过程中如果遇到图片则跳过去渲染下面内容，等待图片下载成功后会返回来在渲染原来图片的位置 同7步，如果渲染过程中出现js代码调整DOM树结构的情况，暂停其它渲染，再次重新来过，从修改DOM那步开始 最终所有节点和资源都会渲染完成 分析结束 渲染完成后开始page的onload事件 整个页面load完成 参考 浏览器工作原理","categories":[],"tags":[{"name":"性能测试","slug":"性能测试","permalink":"http://yoursite.com/tags/性能测试/"}],"keywords":[]},{"title":"前端测试进化论2","slug":"前端测试进化论2","date":"2016-01-26T10:01:07.000Z","updated":"2017-09-21T07:41:54.000Z","comments":true,"path":"2016/01/26/前端测试进化论2/","link":"","permalink":"http://yoursite.com/2016/01/26/前端测试进化论2/","excerpt":"","text":"前端测试进化论2============= 说完了，前端技术的发展史，那么对应的前端测试发展史也随之发展。 石器时代——纯手工测试早期的页面基本都是静态化的页面，只有几个链接或者图片，那么相对测试工作量不大，只需要我们打开页面查看加载是否正确。 铁器时代–xunit到了javascript时代，随着其他语言xunit 风靡天下,js 也出现了它的xunit 框架。 Jsunit，以往在测试js的时候，都是以alert方式来检测错误，很不专业。 2001年 jsunit 出现，让js调试称为可能。 Jsunit 主要参考junit的设计，只要你会使用junit 那么jsunit 对你来说，根本不是什么事，具体使用参考 http://llying.iteye.com/blog/258605DEMO: 测试代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"&gt;&lt;HTML&gt; &lt;HEAD&gt; &lt;TITLE&gt;testHtml&lt;/TITLE&gt; &lt;/HEAD&gt;&lt;script type=\"text/javascript\" src=\"myjs.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"jsunit\\app\\jsUnitCore.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt;&lt;!--function testAdd()&#123; var result = add(arg1,arg2); warn(\"result\", result); debug(\"result\", result); info(\"result\", result); assertEquals(6,result);&#125;function testMinus()&#123; var result = minus(arg1,arg2) assertEquals(2,result);&#125;function testMultiply()&#123; var result = multiply(arg1,arg2) assertEquals(8,result);&#125;function testDivide()&#123; var result = divide(arg1,arg2) assertEquals(\"4 divide 2 is 2\",2,result);&#125;function setUpPage()&#123; arg1 = 4; arg2 = 2; setUpPageStatus = \"complete\";&#125;function exposeTestFunctionNames()&#123; var tests = new Array(); tests[0]=\"testAdd\"; tests[1]=\"testMinus\"; tests[2]=\"testMultiply\"; return tests;&#125;//--&gt;&lt;/SCRIPT&gt; &lt;BODY&gt; &lt;/BODY&gt;&lt;/HTML&gt; 测试驱动 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"&gt;&lt;HTML&gt; &lt;HEAD&gt; &lt;TITLE&gt;suit test&lt;/TITLE&gt; &lt;/HEAD&gt;&lt;script type=\"text/javascript\" src=\"jsunit\\app\\jsUnitCore.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt;&lt;!--function suite()&#123; var testSuite = new top.jsUnitTestSuite(); //增加的测试页面的路径是相对于测试运行器的路径的（testRunner.html），而不是相对于当前的页面 testSuite.addTestPage(\"../mytest1.html\"); //套件里还可以在包含套件 testSuite.addTestSuite(Suite2()); return testSuite;&#125;function Suite2() //需要与suite定义在同一个页面中&#123; var testSuite = new top.jsUnitTestSuite(); testSuite.addTestPage(\"../mytest2.html\"); return testSuite;&#125;//--&gt;&lt;/SCRIPT&gt; &lt;BODY&gt; &lt;/BODY&gt;&lt;/HTML&gt; http://www.jsunit.net/ 工业革命–ajax流行随着ajax的流行，jquery框架在前端开发中的普及，让开发者看到了前端的新纪元，jquery 团队也为广大开发人员开发了Qunit.QUnit 是一款强大而且容易使用的JavaScript 测试框架，它被用于jQuery 与其插件的测试，同时它也同样可以测试普通的JavaScript 代码. TDD的时代来临 QUnit框架版本将要被测试的代码需要添加到myProject.js中，并且你的测试用例应该插入到myTest.js。要运行这些测试，只需在一个浏览器中打开这个html文件。现在需要写一些测试用例了。 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;QUnit Test Suite&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"http://github.com/jquery/qunit/raw/master/qunit/qunit.css\" mce_href=\"http://github.com/jquery/qunit/raw/master/qunit/qunit.css\" type=\"text/css\" media=\"screen\"&gt; &lt;mce:script type=\"text/javascript\" src=\"http://github.com/jquery/qunit/raw/master/qunit/qunit.js\" mce_src=\"http://github.com/jquery/qunit/raw/master/qunit/qunit.js\"&gt;&lt;/mce:script&gt; &lt;!-- Your project file goes here --&gt; &lt;mce:script type=\"text/javascript\" src=\"myProject.js\" mce_src=\"myProject.js\"&gt;&lt;/mce:script&gt; &lt;!-- Your tests file goes here --&gt; &lt;mce:script type=\"text/javascript\" src=\"myTests.js\" mce_src=\"myTests.js\"&gt;&lt;/mce:script&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 id=\"qunit-header\"&gt;QUnit Test Suite&lt;/h1&gt; &lt;h2 id=\"qunit-banner\"&gt;&lt;/h2&gt; &lt;div id=\"qunit-testrunner-toolbar\"&gt;&lt;/div&gt; &lt;h2 id=\"qunit-userAgent\"&gt;&lt;/h2&gt; &lt;ol id=\"qunit-tests\"&gt;&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt; 参考http://www.cnblogs.com/nuaalfm/archive/2010/02/26/1674235.htmlhttp://qunitjs.com/ 现代化技术-BBD紧着angluar react 等框架大行其道的同时，bdd也在开发中兴起，基于bdd的测试框架开始在前端如雨后春笋般冒出,jasmine,mocha,karma都是其中的代表，但是各得其道，到底谁好，没惹能说得清楚。但google 在前端测试的贡献，绝对是业界良心。 http://jasmine.github.io/ https://karma-runner.github.io/0.13/index.html https://mochajs.org/ 这些框架本人就不举列子了，会在以后的篇章里面一一介绍。 前端的未来未来，我希望有一种框架能够解救苦逼的qa,简单的语法与api，使得我们能够处理所有前端框架而不用考虑控件问题，良好的性能，支持并发，跑ui和单元测试都在秒级，当然越快越好，最好能够自动更新ui自动化中页面对象的路径等等。也许只是个梦。Qa 还需努力。","categories":[],"tags":[{"name":"front-end","slug":"front-end","permalink":"http://yoursite.com/tags/front-end/"}],"keywords":[]},{"title":"前端测试进化论","slug":"前端测试进化论","date":"2016-01-25T07:36:44.000Z","updated":"2017-09-21T07:41:09.000Z","comments":true,"path":"2016/01/25/前端测试进化论/","link":"","permalink":"http://yoursite.com/2016/01/25/前端测试进化论/","excerpt":"","text":"前端测试进化论第一篇web 发展史这篇主要是帮助我们qa 了解前端的历史与现状。 测试工程师大部分时间可能关注的是feature正确性，而对于前端代码级别的测试基本没有关心过，随着各种前端框架在web和移动端大行其道，绽放各种高大上的功能时，我们渐渐的发现前端代码级别问题逐渐暴露出来，甚至超越后端之势。那么问题来了，为什么以前这种现象出现呢？我们现来看看前端技术发展史。 ##石器时代——开荒阶段 带有简单逻辑的界面最早期的Web界面基本都是在互联网上使用，而且基本都是静态页面展示，人们浏览某些内容，填写几个表单并且提交。当时的界面以浏览为主，基本都是HTML代码，我们来看一个最简单的HTML文件：123456789&lt;html&gt; &lt;head&gt; &lt;title&gt;开荒时代&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;静态页面&lt;/h1&gt; &lt;p&gt;这是个测试&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 带有简单逻辑的界面接下来我们发现使用一些工具可以帮助我们做一些业务处理，这时javascript到来了，开始大放异彩。这时的代码的组织比较简单，而且CSS的运用也是比较少的。譬如：下面这个文档将带有一段JavaScript代码，用于拼接两个输入框中的字符串，并且弹出窗口显示。1234567891011121314151617&lt;html&gt; &lt;head&gt; &lt;title&gt;javascript时代&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;input id=\"firstNameInput\" type=\"text\" /&gt; &lt;input id=\"lastNameInput\" type=\"text\" /&gt; &lt;input type=\"button\" onclick=\"greet()\" /&gt; &lt;script language=\"JavaScript\"&gt; function greet() &#123; var firstName = document.getElementById(\"firstNameInput\").value; var lastName = document.getElementById(\"lastNameInput\").value; alert(\"Hello, \" + firstName + \".\" + lastName); &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 结合了服务端技术的混合编程由于静态界面不能实现保存数据等功能，出现了很多服务端技术，早期的有CGI（Common Gateway Interface，多数用C语言或者Perl实现的），ASP（使用VBScript或者JScript），JSP（使用Java），PHP等等，Python和Ruby等语言也常被用于这类用途。 1234567891011121314151617&lt;html&gt;&lt;head&gt;&lt;title&gt;Using GET Method to Read Form Data&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt;&lt;h1&gt;Using GET Method to Read Form Data&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;First Name:&lt;/b&gt; &lt;%= request.getParameter(\"first_name\")%&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Last Name:&lt;/b&gt; &lt;%= request.getParameter(\"last_name\")%&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 铁器时代—Ajax席卷全世界AJAX由于Ajax的出现，规模更大，效果更好的Web程序逐渐出现，在这些程序中，JavaScript代码的数量迅速增加。出于代码组织的需要，“JavaScript框架”这个概念逐步形成。 JavaScript基础库—jqueryPrototype框架主要是为JavaScript代码提供了一种组织方式，对一些原生的JavaScript类型提供了一些扩展，比如数组、字符串，又额外提供了一些实用的数据结构，如：枚举，Hash等，除此之外，还对dom操作，事件，表单和Ajax做了一些封装。 Mootools框架的思路跟Prototype很接近，它对JavaScript类型扩展的方式别具一格，所以在这类框架中，经常被称作“最优雅的”对象扩展体系。从这两个框架的所提供的功能来看，它们的定位是核心库，在使用的时候一般需要配合一些外围的库来完成。 jQuery与这两者有所不同，它着眼于简化DOM相关的代码。 DOM的选择 jQuery提供了一系列选择器用于选取界面元素，在其他一些框架中也有类似功能，但是一般没有它的简洁、强大。 12345$(\"*\") //选取所有元素$(\"#lastname\") //选取id为lastname的元素$(\".intro\") //选取所有class=\"intro\"的元素$(\"p\") //选取所有&amp;lt;p&amp;gt;元素$(\".intro.demo\") //选取所有 class=\"intro\"且class=\"demo\"的元素 链式表达式 在jQuery中，可以使用链式表达式来连续操作dom，比如下面这个例子： 1$(\"p.neat\").addClass(\"ohmy\").show(\"slow\"); 除此之外，jQuery还提供了一些动画方面的特效代码，也有大量的外围库，比如jQuery UI这样的控件库，jQuery mobile这样的移动开发库等等。 模块代码加载方式–Requirejs以上这些框架提供了代码的组织能力，但是未能提供代码的动态加载能力。动态加载JavaScript为什么重要呢？因为随着Ajax的普及，jQuery等辅助库的出现，Web上可以做很复杂的功能，因此，单页面应用程序（SPA，Single Page Application）也逐渐多了起来。 单个的界面想要做很多功能，需要写的代码是会比较多的，但是，并非所有的功能都需要在界面加载的时候就全部引入，如果能够在需要的时候才加载那些代码，就把加载的压力分担了，在这个背景下，出现了一些用于动态加载JavaScript的框架，也出现了一些定义这类可被动态加载代码的规范。 在这些框架里，知名度比较高的是RequireJS，它遵循一种称为AMD（Asynchronous Module Definition）的规范。例如下列是一个js代码保存为adder.js文件1234567define([\"math\"], function(math) &#123; return &#123; addTen : function(x) &#123; return math.add(x, 10); &#125; &#125;;&#125;); 当我们需要使用这个模块时，我们只需引入就好 123456&lt;script src=\"require.js\"&gt;&lt;/script&gt;&lt;script&gt; require([\"adder\"], function(adder) &#123; //使用这个adder &#125;);&lt;/script&gt; RequireJS除了提供异步加载方式，也可以使用同步方式加载模块代码。AMD规范除了使用在前端浏览器环境中，也可以运行于nodejs等服务端环境，nodejs的模块就是基于这套规范定义的。（修订，这里弄错了，nodejs是基于类似的CMD规范的） 工业革命—前端框架这个时期，随着Web端功能的日益复杂，人们开始考虑这样一些问题： • 如何更好地模块化开发 • 业务数据如何组织 • 界面和业务数据之间通过何种方式进行交互 在这种背景下，出现了一些前端MVC、MVP、MVVM框架，我们把这些框架统称为MV*框架。这些框架的出现，都是为了解决上面这些问题，具体的实现思路各有不同，主流的有Backbone，AngularJS，Ember，Spine等等，本文主要选用Backbone和AngularJS来讲述以下场景。 数据模型在这些框架里，定义数据模型的方式与以往有些差异，主要在于数据的get和set更加有意义了，比如说，可以把某个实体的get和set绑定到RESTful的服务上，这样，对某个实体的读写可以更新到数据库中。另外一个特点是，它们一般都提供一个事件，用于监控数据的变化，这个机制使得数据绑定成为可能。在一些框架中，数据模型需要在原生的JavaScript类型上做一层封装，比如Backbone的方式是这样：1234567891011121314151617181920212223242526var Todo = Backbone.Model.extend(&#123; // Default attributes for the todo item. defaults : function() &#123; return &#123; title : \"empty todo...\", order : Todos.nextOrder(), done : false &#125;; &#125;, // Ensure that each todo created has `title`. initialize : function() &#123; if (!this.get(\"title\")) &#123; this.set(&#123; \"title\" : this.defaults().title &#125;); &#125; &#125;, // Toggle the 'done' state of this todo item. toggle : function() &#123; this.save(&#123; done : !this.get(\"done\") &#125;); &#125;&#125;); 控制器在Backbone中，是没有独立的控制器的，它的一些控制的职责都放在了视图里，所以其实这是一种MVP（Model View Presentation）模式，而AngularJS有很清晰的控制器层。 还是以这个todo为例，在AngularJS中，会有一些约定的注入，比如$scope，它是控制器、模型和视图之间的桥梁。在控制器定义的时候，将$scope作为参数，然后，就可以在控制器里面为它添加模型的支持。12345678910111213141516171819202122232425262728293031323334function TodoCtrl($scope) &#123; $scope.todos = [&#123; text : 'learn angular', done : true &#125;, &#123; text : 'build an angular app', done : false &#125;]; $scope.addTodo = function() &#123; $scope.todos.push(&#123; text : $scope.todoText, done : false &#125;); $scope.todoText = ''; &#125;; $scope.remaining = function() &#123; var count = 0; angular.forEach($scope.todos, function(todo) &#123; count += todo.done ? 0 : 1; &#125;); return count; &#125;; $scope.archive = function() &#123; var oldTodos = $scope.todos; $scope.todos = []; angular.forEach(oldTodos, function(todo) &#123; if (!todo.done) $scope.todos.push(todo); &#125;); &#125;;&#125; 视图在这些主流的MV*框架中，一般都提供了定义视图的功能。在Backbone中，是这样定义视图的： 12345678910111213141516171819202122232425262728293031323334353637383940// The DOM element for a todo item...var TodoView = Backbone.View.extend(&#123; //... is a list tag. tagName : \"li\", // Cache the template function for a single item. template : _.template($('#item-template').html()), // The DOM events specific to an item. events : &#123; \"click .toggle\" : \"toggleDone\", \"dblclick .view\" : \"edit\", \"click a.destroy\" : \"clear\", \"keypress .edit\" : \"updateOnEnter\", \"blur .edit\" : \"close\" &#125;, // The TodoView listens for changes to its model, re-rendering. Since there's // a one-to-one correspondence between a **Todo** and a **TodoView** in this // app, we set a direct reference on the model for convenience. initialize : function() &#123; this.listenTo(this.model, 'change', this.render); this.listenTo(this.model, 'destroy', this.remove); &#125;, // Re-render the titles of the todo item. render : function() &#123; this.$el.html(this.template(this.model.toJSON())); this.$el.toggleClass('done', this.model.get('done')); this.input = this.$('.edit'); return this; &#125;, //...... // Remove the item, destroy the model. clear : function() &#123; this.model.destroy(); &#125;&#125;); 参考文献：http://any9.com/1524.htmlhttp://blog.jobbole.com/45169/http://blog.jobbole.com/45170/http://blog.jobbole.com/41988/我毕竟不是一个前端dev，有所疏漏尽请原谅，还有转载和抄录了一些人的blog 也请大家谅解，只是想写一些前端的文章给qa用。","categories":[],"tags":[{"name":"front-end","slug":"front-end","permalink":"http://yoursite.com/tags/front-end/"}],"keywords":[]},{"title":"gulp_for_qa","slug":"gulp_for_qa","date":"2016-01-25T07:13:20.000Z","updated":"2017-09-25T09:15:50.000Z","comments":true,"path":"2016/01/25/gulp_for_qa/","link":"","permalink":"http://yoursite.com/2016/01/25/gulp_for_qa/","excerpt":"","text":"gulp 介绍 什么是gulp?这和我们qa有什么关系？Gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。入门指南 全局安装 gulp： 1$ npm install --global gulp 作为项目的开发依赖（devDependencies）安装： 1$ npm install --save-dev gulp 在项目根目录下创建一个名为 gulpfile.js 的文件： 12345var gulp = require('gulp');gulp.task('default', function() &#123; // 将你的默认的任务代码放在这&#125;); 运行 gulp： 1$ gulp 默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。想要单独执行特定的任务（task），请输入 gulp 。 官网:http://www.gulpjs.com.cn/docs/getting-started/ gulp api 非常简单，只有5个task，run，watch，src，和dest. 是的 你只需要搞懂这5个api 完全够用。 Gulp 能帮助我们更好更快的进行测试，制定标准等工作。 eslintJavascript代码验证工具,这种工具可以检查你的代码并提供相关的代码改进意见最大卖点，可以通过插件实现自定义规则 例如 gc 这边用的angluar https://www.npmjs.com/package/eslint-plugin-angular 使用npm 安装jslint 插件 1$ npm install gulp-eslint --save-dev 配置 .eslintrc文件 设置js规范的文件 1234567891011121314151617&#123; \"env\": &#123; \"browser\": true, &#125;, \"globals\": &#123; \"angular\": true, &#125;, \"rules\": &#123; \"camelcase\": 2, \"curly\": 2, \"brace-style\": [2, \"1tbs\"], \"quotes\": [2, \"single\"], \"semi\": [2, \"always\"], \"space-in-brackets\": [2, \"never\"], \"space-infix-ops\": 2, &#125;&#125; 配置 gulpfile 123456789var eslint = require('gulp-eslint')gulp.task('lint', function() &#123; return gulp.src(path.JS) .pipe(eslint()) .pipe(eslint.format());&#125;);$ gulp lint 参考：运行 gulp lint 命令 http://www.jianshu.com/p/c599185a0d84 jshint jslint jscs eslint的对比 http://developer.51cto.com/art/201506/481510.htmhttp://www.sitepoint.com/comparison-javascript-linting-tools/ ##browersync Browsersync能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试。您可以想象一下：“假设您的桌子上有pc、ipad、iphone、android等设备，同时打开了您需要调试的页面，当您使用browsersync后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。无论您是前端还是后端工程师，使用它将提高您30%的工作效率。 1$ npm install browser-sync gulp --save-dev 配置gulpfile123456789101112131415161718192021222324252627282930313233343536373839var path = &#123; HTML : \"html/*.html\", LESS : \"less/*.less\", CSS : \"css/*.css\", JS : \"js/*.js\" &#125;;gulp.task(\"serve\", [\"less\", \"js-watch\", \"html\"], function() &#123; browserSync.init(&#123; server : \"./\" &#125;); gulp.watch(path.LESS, [\"less\"]); gulp.watch(path.JS, [\"js-watch\"]); gulp.watch(path.HTML, [\"html\"]); gulp.watch(path.HTML).on(\"change\", function() &#123; browserSync.reload; &#125;);&#125;);gulp.task(\"less\", function() &#123; gulp.src(path.LESS) .pipe(less()) .pipe(gulp.dest(path.CSS)) .pipe(browserSync.stream());&#125;)gulp.task(\"js-watch\", function() &#123; gulp.src(path.JS) .pipe(browserSync.stream());&#125;)gulp.task(\"html\", function() &#123; gulp.src(path.HTML) .pipe(browserSync.stream());&#125;) 运行命令就可以看到代码变更对不同浏览器页面造成的影响了。 参考文档http://www.browsersync.cn/docs/gulp/ 开启代理模式123browser-sync start --proxy \"http://localhost:3000/products/voip-phones/yealink-t20p\" --host \"http://localhost:3001/products/voip-phones/yealink-t20p\" gulp-istanbul ##Istanbul 是 JavaScript 程序的代码覆盖率工具• 行覆盖率（line coverage）：是否每一行都执行了？ • 函数覆盖率（function coverage）：是否每个函数都调用了？ • 分支覆盖率（branch coverage）：是否每个if代码块都执行了？ • 语句覆盖率（statement coverage）：是否每个语句都执行了？ 配置gulpfile文件123456789101112131415161718gulp.task('pre-test', function () &#123; return gulp.src(['js/*.js']) // Covering files .pipe(istanbul()) // Force `require` to return covered files .pipe(istanbul.hookRequire());&#125;);gulp.task('test', ['pre-test'], function () &#123; return gulp.src(['test/*.js']) .pipe(mocha()) // Creating the reports after tests ran .pipe(istanbul.enforceThresholds(&#123; thresholds: &#123; global: 90 &#125; &#125;)) .pipe(istanbul.writeReports(&#123; dir: './assets/unit-test-coverage', reporters: [ 'lcov' ], reportOpts: &#123; dir: './assets/unit-test-coverage'&#125; &#125;));&#125;); 运行gulp 命令 ####参考：http://www.ruanyifeng.com/blog/2015/06/istanbul.html http://blog.oskoui-oskoui.com/?p=8478 https://github.com/SBoudrias/gulp-istanbul ##所有例子用的repohttps://github.com/qileilove/gulp_qa","categories":[],"tags":[{"name":"gatling","slug":"gatling","permalink":"http://yoursite.com/tags/gatling/"}],"keywords":[]}]}