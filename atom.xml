<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QA seven&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-07T02:20:22.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>seven</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小QA学习前端系列之vue实战</title>
    <link href="http://yoursite.com/2017/10/31/vue11/"/>
    <id>http://yoursite.com/2017/10/31/vue11/</id>
    <published>2017-10-31T02:17:33.000Z</published>
    <updated>2017-11-07T02:20:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>##通过一个简单vue项目了解vue整个流程<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/shinygang/</span>Vue-cnodejs.git</div></pre></td></tr></table></figure></p><p>大神写的一个高仿cnodejs<br>直接clone<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">yarn</span></div></pre></td></tr></table></figure></p><p>启动服务(<a href="http://localhost:8020" target="_blank" rel="external">http://localhost:8020</a>)<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">run</span><span class="bash"> dev</span></div></pre></td></tr></table></figure></p><p>然而我们并不是让你们看如何这个页面如何好看，那没啥用<br>还是进入code中，才能理解其中的玄学<br>好的编辑器是成功的一半，所以我选vscode，你呢 哈哈<br>好了 进入主题  先看项目结构</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="/image/项目结构.png" alt="项目结构"><br>采用 vue2 vue-router2 vuex 组件思想构建了整个项目<br>先来看看 main.js  main文件为整个文件的入口<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'webpack-zepto'</span>;</div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</div><div class="line"><span class="keyword">import</span> filters <span class="keyword">from</span> <span class="string">'./filters'</span>;</div><div class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./routers'</span>;</div><div class="line"><span class="keyword">import</span> Alert <span class="keyword">from</span> <span class="string">'./libs/alert'</span>;</div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./vuex/user'</span>;</div><div class="line"><span class="keyword">import</span> FastClick <span class="keyword">from</span> <span class="string">'fastclick'</span>;</div><div class="line"><span class="comment">//引入Vuerouter</span></div><div class="line">Vue.use(VueRouter);</div><div class="line"><span class="comment">//引入alert</span></div><div class="line">Vue.use(Alert);</div><div class="line"></div><div class="line">$.ajaxSettings.crossDomain = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// 实例化Vue的filter</span></div><div class="line"><span class="built_in">Object</span>.keys(filters).forEach(<span class="function"><span class="params">k</span> =&gt;</span> Vue.filter(k, filters[k]));</div><div class="line"></div><div class="line"><span class="comment">// 实例化VueRouter</span></div><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">    mode: <span class="string">'history'</span>,</div><div class="line">    routes</div><div class="line">&#125;);</div><div class="line"><span class="comment">//FastClick是一个非常方便的库，在移动浏览器上发生介于轻敲及点击之间的指令时，能够让你//摆脱300毫秒的延迟。FastClick可以让你的应用程序更加灵敏迅捷。</span></div><div class="line"></div><div class="line">FastClick.attach(<span class="built_in">document</span>.body);</div><div class="line"></div><div class="line"><span class="comment">// 处理刷新的时候vuex被清空但是用户已经登录的情况</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.sessionStorage.user) &#123;</div><div class="line">    store.dispatch(<span class="string">'setUserInfo'</span>, <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.sessionStorage.user));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 登录中间验证，页面需要登录而没有登录的情况直接跳转登录</span></div><div class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 处理左侧滚动不影响右边</span></div><div class="line">    <span class="comment">// $('html, body, #page').removeClass('scroll-hide');</span></div><div class="line">    $(<span class="string">'body'</span>).css(<span class="string">'overflow'</span>, <span class="string">'auto'</span>);</div><div class="line">    <span class="keyword">if</span> (to.matched.some(<span class="function"><span class="params">record</span> =&gt;</span> record.meta.requiresAuth)) &#123;</div><div class="line">        <span class="keyword">if</span> (store.state.userInfo.userId) &#123;</div><div class="line">            next();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            next(&#123;</div><div class="line">                path: <span class="string">'/login'</span>,</div><div class="line">                query: &#123; <span class="attr">redirect</span>: to.fullPath &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        next();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    router,</div><div class="line">    store</div><div class="line">&#125;).$mount(<span class="string">'#app'</span>);</div></pre></td></tr></table></figure></p><p>这就是整个main文件 只是将vuex store 与router 最后都实例化到vue对象中并挂在到id为app的节点下</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> <span class="built_in">require</span>.ensure 是 Webpack 的特殊语法，用来设置 code-split point</div><div class="line">const Home = resolve =&gt; &#123;</div><div class="line">    <span class="built_in">require</span>.ensure([<span class="string">'./views/index.vue'</span>], <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        resolve(<span class="built_in">require</span>(<span class="string">'./views/index.vue'</span>));</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const List = resolve =&gt; &#123;</div><div class="line">    <span class="built_in">require</span>.ensure([<span class="string">'./views/list.vue'</span>], <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        resolve(<span class="built_in">require</span>(<span class="string">'./views/list.vue'</span>));</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const routers = [&#123;</div><div class="line">    path: <span class="string">'/'</span>,</div><div class="line">    name: <span class="string">'home'</span>,</div><div class="line">    component: Home</div><div class="line">&#125;, &#123;</div><div class="line">    path: <span class="string">'/cnodevue'</span>,</div><div class="line">    name: <span class="string">'cnodevue'</span>,</div><div class="line">    component: Home</div><div class="line">&#125;, &#123;</div><div class="line">    path: <span class="string">'/list'</span>,</div><div class="line">    name: <span class="string">'list'</span>,</div><div class="line">    component: List</div><div class="line">&#125;, &#123;</div><div class="line">    path: <span class="string">'/topic/:id'</span>,</div><div class="line">    name: <span class="string">'topic'</span>,</div><div class="line">    component(resolve) &#123;</div><div class="line">        <span class="built_in">require</span>.ensure([<span class="string">'./views/topic.vue'</span>], <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            resolve(<span class="built_in">require</span>(<span class="string">'./views/topic.vue'</span>));</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;, &#123;</div><div class="line">    path: <span class="string">'/add'</span>,</div><div class="line">    name: <span class="string">'add'</span>,</div><div class="line">    component(resolve) &#123;</div><div class="line">        <span class="built_in">require</span>.ensure([<span class="string">'./views/new.vue'</span>], <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            resolve(<span class="built_in">require</span>(<span class="string">'./views/new.vue'</span>));</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    meta: &#123; requiresAuth: <span class="literal">true</span> &#125;</div><div class="line">&#125;, &#123;</div><div class="line">    path: <span class="string">'/message'</span>,</div><div class="line">    name: <span class="string">'message'</span>,</div><div class="line">    component(resolve) &#123;</div><div class="line">        <span class="built_in">require</span>.ensure([<span class="string">'./views/message.vue'</span>], <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            resolve(<span class="built_in">require</span>(<span class="string">'./views/message.vue'</span>));</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    meta: &#123; requiresAuth: <span class="literal">true</span> &#125;</div><div class="line">&#125;, &#123;</div><div class="line">    path: <span class="string">'/user/:loginname'</span>,</div><div class="line">    name: <span class="string">'user'</span>,</div><div class="line">    component(resolve) &#123;</div><div class="line">        <span class="built_in">require</span>.ensure([<span class="string">'./views/user.vue'</span>], <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            resolve(<span class="built_in">require</span>(<span class="string">'./views/user.vue'</span>));</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;, &#123;</div><div class="line">    path: <span class="string">'/about'</span>,</div><div class="line">    name: <span class="string">'about'</span>,</div><div class="line">    component(resolve) &#123;</div><div class="line">        <span class="built_in">require</span>.ensure([<span class="string">'./views/about.vue'</span>], <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            resolve(<span class="built_in">require</span>(<span class="string">'./views/about.vue'</span>));</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;, &#123;</div><div class="line">    path: <span class="string">'/login'</span>,</div><div class="line">    name: <span class="string">'login'</span>,</div><div class="line">    component(resolve) &#123;</div><div class="line">        <span class="built_in">require</span>.ensure([<span class="string">'./views/login.vue'</span>], <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            resolve(<span class="built_in">require</span>(<span class="string">'./views/login.vue'</span>));</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;, &#123;</div><div class="line">    path: <span class="string">'*'</span>,</div><div class="line">    component: Home</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> routers;</div></pre></td></tr></table></figure><p>上面定义了系统所有的路由路径，以及需要实现懒加载的路由</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>我们先看看系统由多少组件组合而成<br><img src="/image/component.png" alt="/image/component.png"><br>再来看看 views<br><img src="/image/view.png" alt="/image/view.png"><br>回到我们的router 当我们进入一个应用时，首先呈现在我们眼前的应该是index.<br>我们看看router的代码<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">path</span>: <span class="string">'/'</span>,</div><div class="line">  <span class="attribute">name</span>: <span class="string">'home'</span>,</div><div class="line">  <span class="attribute">component</span>: Home</div></pre></td></tr></table></figure></p><p>而component 则是来自 index.vue<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">require</span>.ensure([<span class="string">'./views/index.vue'</span>], <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        resolve(<span class="built_in">require</span>(<span class="string">'./views/index.vue'</span>));</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>ok 我们看看 index.vue<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"index"</span> <span class="attr">src</span>=<span class="string">"../assets/images/index.png"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="built_in">require</span>(<span class="string">'../assets/scss/CV.scss'</span>);</span></div><div class="line"><span class="javascript">    <span class="built_in">require</span>(<span class="string">'../assets/scss/iconfont/iconfont.css'</span>);</span></div><div class="line"><span class="javascript">    <span class="built_in">require</span>(<span class="string">'../assets/scss/github-markdown.css'</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></div><div class="line"><span class="undefined">        mounted() &#123;</span></div><div class="line"><span class="javascript">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></div><div class="line"><span class="actionscript">                <span class="keyword">this</span>.$router.push(&#123;</span></div><div class="line"><span class="actionscript">                    name: <span class="string">'list'</span></span></div><div class="line"><span class="undefined">                &#125;);</span></div><div class="line"><span class="undefined">            &#125;, 2000);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-class">.index</span> &#123;</span></div><div class="line"><span class="undefined">        width: 100%;</span></div><div class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></div><div class="line"><span class="undefined">        margin-top: 40%;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p><p>index.vue 只是利用mount去向$router push一个{    name: ‘list’}对象<br>设置了一个异步操作 2秒后 跳转到list页面<br>在来看看 index.html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue.js-Cnodejs社区<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, minimal-ui"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"yes"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black-translucent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"black"</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>他是整个SPA的基础页面</p><p>将真个应用会挂载的id 为app 这个节点下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##通过一个简单vue项目了解vue整个流程&lt;br&gt;&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小QA学习前端系列之vue  router</title>
    <link href="http://yoursite.com/2017/10/30/vue10/"/>
    <id>http://yoursite.com/2017/10/30/vue10/</id>
    <published>2017-10-30T01:47:00.000Z</published>
    <updated>2017-10-30T03:46:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><p> 首先引入vue.js和vue-router.js：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">npm install vue-router <span class="params">--save</span></div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">...</span></div><div class="line">    <span class="string">"vue-router"</span>: <span class="string">"^2.1.1"</span></div><div class="line">    <span class="string">...</span></div><div class="line">  &#125;,</div><div class="line">或者</div><div class="line">  npm install vue-router <span class="params">--save-dev</span></div></pre></td></tr></table></figure></p><p>然后创建两个组件构造器Home和About：<br>App.vue<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id="app"&gt;</div><div class="line">    &lt;router-link to="/"&gt;1&lt;/router-link&gt;</div><div class="line">    &lt;router-link to="/2"&gt;2&lt;/router-link&gt;</div><div class="line">    &lt;br/&gt;</div><div class="line">    &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure></p><ol><li>创建Router<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"><span class="keyword">import</span> Page1 <span class="keyword">from</span> <span class="string">'./components/page1'</span></div><div class="line"><span class="keyword">import</span> Page2 <span class="keyword">from</span> <span class="string">'./components/page2'</span></div><div class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">    routes</div><div class="line">&#125;)</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,</div><div class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</div><div class="line">  components: &#123; App &#125;,</div><div class="line">  router</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ol><p>调用构造器VueRouter，创建一个路由器实例router。</p><ol><li>映射路由<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const routes = [</div><div class="line">  &#123; <span class="string">path:</span> <span class="string">'/'</span>, <span class="string">component:</span> Page1 &#125;,</div><div class="line">  &#123; <span class="string">path:</span> <span class="string">'/2'</span>, <span class="string">component:</span> Page2 &#125;,</div><div class="line">]</div></pre></td></tr></table></figure></li></ol><p>page1.vue</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>page2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><p>page2.vue<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>page2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p><p>实现步骤：</p><pre><code>* npm安装vue-router* Vue.use(VueRouter)全局安装路由功能* 定义路径数组routes并创建路由对象router* 将路由注入到Vue对象中* 在根组件中使用&lt;router-link&gt;定义跳转路径* 在根组件中使用&lt;router-view&gt;来渲染组件* 创建子组件</code></pre><h2 id="路由的跳转"><a href="#路由的跳转" class="headerlink" title="路由的跳转"></a>路由的跳转</h2><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><p>router-link标签用于页面的跳转<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/page1"</span>&gt;</span>page1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div></pre></td></tr></table></figure></p><p>当点击这个router-link标签时 router-view就会渲染路径为/page1的页面。<br>注意：router-link默认是一个a标签的形式，如果需要显示不同的样子，可以在router-link标签中写入不同标签元素，如下显示为button按钮。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/04"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>to04<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div></pre></td></tr></table></figure></p><p><router-link> 会被渲染为 <a> 标签， to 会被渲染为 href，当 <router-link> 被点击的时候，url 会发生相应的改变</router-link></a></router-link></p><p>如果使用 v-bind 指令，还可以在 to 后面接变量，配合 v-for 指令可以渲染导航菜单<br>如果对于所有 ID 各不相同的用户，都要使用 home 组件来渲染，可以在 routers.js 中添加动态参数：</p><p>{<br>    path: ‘/home/:id’,<br>    component: Home<br>}</p><p>这样 “/home/user01”、”/home/user02”、”/home/user03” 等路由，都会映射到 Home 组件</p><p>然后还可以使用 $route.params.id 来获取到对应的 id</p><h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>  </span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/foo/post/123"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>  </span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/bar/post/456"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span>  </span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span></div><div class="line"><span class="xml">  </span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">'user'</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>User:</span><span class="template-variable">&#123;&#123; $route.params.id &#125;&#125;</span><span class="xml">,Post:</span><span class="template-variable">&#123;&#123;$route.params.post_id&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></div></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 定义组件。  </span></div><div class="line"><span class="keyword">const</span> User = &#123;  </div><div class="line">    template:<span class="string">'#user'</span>,  </div><div class="line">    watch:&#123;  </div><div class="line">        <span class="string">'$route'</span>(to,<span class="keyword">from</span>)&#123;  </div><div class="line">            console.log(<span class="string">'从'</span>+<span class="keyword">from</span>.<span class="keyword">params</span>.id+<span class="string">'到'</span>+to.<span class="keyword">params</span>.id);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;;  </div><div class="line"><span class="comment">// 2. 创建路由实例 (可设置多段路径参数)  </span></div><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;  </div><div class="line">    routes:[  </div><div class="line">        &#123; path:<span class="string">'/user/:id/post/:post_id'</span>,component:User &#125;  </div><div class="line">    ]  </div><div class="line">&#125;);  </div><div class="line"><span class="comment">//3. 创建和挂载根实例  </span></div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123; router:router &#125;).$mount(<span class="string">'#app'</span>);</div></pre></td></tr></table></figure><h3 id="编程式导航-router-push"><a href="#编程式导航-router-push" class="headerlink" title="编程式导航 router.push"></a>编程式导航 router.push</h3><p>也可以通过JS代码控制路由的界面渲染，方法如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串</span></div><div class="line"><span class="selector-tag">router</span><span class="selector-class">.push</span>(<span class="string">'home'</span>)</div><div class="line"><span class="comment">// 对象</span></div><div class="line"><span class="selector-tag">router</span><span class="selector-class">.push</span>(&#123; <span class="attribute">path</span>: <span class="string">'home'</span> &#125;)</div><div class="line"><span class="comment">// 命名的路由</span></div><div class="line"><span class="selector-tag">router</span><span class="selector-class">.push</span>(&#123; <span class="attribute">name</span>: <span class="string">'user'</span>, <span class="attribute">params</span>: &#123; <span class="attribute">userId</span>: <span class="number">123</span> &#125;&#125;)</div><div class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></div><div class="line"><span class="selector-tag">router</span><span class="selector-class">.push</span>(&#123; <span class="attribute">path</span>: <span class="string">'register'</span>, <span class="attribute">query</span>: &#123; <span class="attribute">plan</span>: <span class="string">'private'</span> &#125;&#125;)</div></pre></td></tr></table></figure></p><p>实际情况下，有很多按钮在执行跳转之前，还会执行一系列方法，这时可以使用 this.$router.push(location) 来修改 url，完成跳转<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span> <span class="attr">class</span>=<span class="string">"登录"</span> @<span class="attr">click</span>=<span class="string">"go"</span>&gt;</span> <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">Vue</span>(&#123;</div><div class="line">  <span class="attribute">el</span>: <span class="string">'#app'</span>,</div><div class="line"> method: &#123;</div><div class="line">     go:()=&gt;&#123;</div><div class="line">         this.$router.<span class="built_in">push</span>(&#123;path:<span class="string">"/home/test"</span>&#125;)</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>  </span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>  </span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/foo/profile"</span>&gt;</span>Go to profile<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>  </span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/foo/posts"</span>&gt;</span>Go to posts<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span>  </span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span></div><div class="line"><span class="xml">  </span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">'user'</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>  </span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>User:</span><span class="template-variable">&#123;&#123; $route.params.id &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>  </span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span>  </span></div><div class="line"><span class="xml">  </span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"userHome"</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span>  </span></div><div class="line"><span class="xml">  </span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"userProfile"</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>概况<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span>  </span></div><div class="line"><span class="xml">  </span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"userPosts"</span>&gt;</span>  </span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>登录信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></div></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">/ <span class="number">1.</span> 定义组件。  </div><div class="line"><span class="keyword">const</span> User = &#123;  </div><div class="line">    <span class="keyword">template</span>:<span class="string">'#user'</span>  </div><div class="line">&#125;;  </div><div class="line"><span class="keyword">const</span> UserHome = &#123;  </div><div class="line">    <span class="keyword">template</span>:<span class="string">'#userHome'</span>  </div><div class="line">&#125;;  </div><div class="line"><span class="keyword">const</span> UserProfile = &#123;  </div><div class="line">    <span class="keyword">template</span>:<span class="string">'#userProfile'</span>  </div><div class="line">&#125;;  </div><div class="line"><span class="keyword">const</span> UserPosts = &#123;  </div><div class="line">    <span class="keyword">template</span>:<span class="string">'#userPosts'</span>  </div><div class="line">&#125;;  </div><div class="line"><span class="comment">// 2. 创建路由实例  </span></div><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;  </div><div class="line">    routes:[  </div><div class="line">        &#123; path:<span class="string">'/user/:id'</span>, component:User,  </div><div class="line">            children:[  </div><div class="line">                <span class="comment">// 当 /user/:id 匹配成功，  </span></div><div class="line">                <span class="comment">// UserHome 会被渲染在 User 的 &lt;router-view&gt; 中  </span></div><div class="line">                &#123; path: <span class="string">''</span>, component: UserHome&#125;,  </div><div class="line">                <span class="comment">// 当 /user/:id/profile 匹配成功，  </span></div><div class="line">                <span class="comment">// UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中  </span></div><div class="line">                &#123; path:<span class="string">'profile'</span>, component:UserProfile &#125;,  </div><div class="line">                <span class="comment">// 当 /user/:id/posts 匹配成功  </span></div><div class="line">                <span class="comment">// UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中  </span></div><div class="line">                &#123; path: <span class="string">'posts'</span>, component: UserPosts &#125;  </div><div class="line">            ]  </div><div class="line">        &#125;  </div><div class="line">    ]  </div><div class="line">&#125;);  </div><div class="line"><span class="comment">//3. 创建和挂载根实例  </span></div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123; router:router &#125;).$mount(<span class="string">'#app'</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建组件&quot;&gt;&lt;a href=&quot;#创建组件&quot; class=&quot;headerlink&quot; title=&quot;创建组件&quot;&gt;&lt;/a&gt;创建组件&lt;/h2&gt;&lt;p&gt; 首先引入vue.js和vue-router.js：&lt;br&gt;&lt;figure class=&quot;highlight jboss-c
      
    
    </summary>
    
    
      <category term="router" scheme="http://yoursite.com/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>小QA学习前端系列之vue 组件</title>
    <link href="http://yoursite.com/2017/10/26/vue9/"/>
    <id>http://yoursite.com/2017/10/26/vue9/</id>
    <published>2017-10-26T02:03:14.000Z</published>
    <updated>2017-10-30T01:47:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h1><p> 组件可以扩展HTML元素，封装可重用的HTML代码，我们可以将组件看作自定义的HTML元素。</p><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><p> 要注册一个全局组件，可以使用 Vue.component(tagName, options)。例如：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Vue</span><span class="selector-class">.component</span>(<span class="string">'my-component'</span>, &#123;</div><div class="line">  <span class="comment">// 选项</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>组件在注册之后，便可以作为自定义元素 <my-component></my-component> 在一个实例的模板中使用。注意确保在初始化根实例之前注册组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"example"</span>&gt;</div><div class="line">  &lt;my-component&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 注册</span></div><div class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</div><div class="line">  template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 创建根实例</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#example'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><p>你不必把每个组件都注册到全局。你可以通过某个 Vue 实例/组件的实例选项 components 注册仅在其作用域中可用的组件：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Child = &#123;</div><div class="line">  template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  components: &#123;</div><div class="line">    <span class="comment">// &lt;my-component&gt; 将只在父组件模板中可用</span></div><div class="line">    <span class="string">'my-component'</span>: Child</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>这种封装也适用于其它可注册的 Vue 功能，比如指令。<br>DOM 模板解析注意事项</p><p>当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像 <ul>、<ol>、<table>、<select> 这样的元素里允许包含的元素有限制，而另一些像 <option> 这样的元素只能出现在某些特定元素的内部。</option></select></table></ol></ul></p><p>在自定义组件中使用这些受限制的元素时会导致一些问题，例如：</p><table><br>  <my-row>…</my-row><br></table><p>自定义组件 <my-row> 会被当作无效的内容，因此会导致错误的渲染结果。变通的方案是使用特殊的 is 特性：</my-row></p><table><br>  <tr is="my-row"></tr><br></table><p>应当注意，如果使用来自以下来源之一的字符串模板，则没有这些限制：</p><pre><code>&lt;script type=&quot;text/x-template&quot;&gt;JavaScript 内联模板字符串.vue 组件</code></pre><p>因此，请尽可能使用字符串模板。</p><h2 id="data-必须为函数"><a href="#data-必须为函数" class="headerlink" title="data 必须为函数"></a>data 必须为函数</h2><p>构造 Vue 实例时传入的各种选项大多数都可以在组件里使用。只有一个例外：data 必须是函数。实际上，如果你这么做：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Vue</span><span class="selector-class">.component</span>(<span class="string">'my-component'</span>, &#123;</div><div class="line">  <span class="attribute">template</span>: <span class="string">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span>,</div><div class="line">  <span class="attribute">data</span>: &#123;</div><div class="line">    <span class="attribute">message</span>: <span class="string">'hello'</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>那么 Vue 会停止运行，并在控制台发出警告，告诉你在组件实例中 data 必须是一个函数。但理解这种规则为何存在也是很有益处的，所以让我们先作个弊：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-2"</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">simple-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">simple-counter</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">simple-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">simple-counter</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">simple-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">simple-counter</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">var data = </span><span class="template-variable">&#123; counter: 0 &#125;</span><span class="xml"></span></div><div class="line"><span class="xml">Vue.component('simple-counter', </span><span class="template-variable">&#123;</span></div><div class="line"><span class="template-variable">  template: '&lt;button v-on:click="counter += 1"&gt;&#123;&#123; counter &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></div><div class="line"><span class="xml">  // 技术上 data 的确是一个函数了，因此 Vue 不会警告，</span></div><div class="line"><span class="xml">  // 但是我们却给每个组件实例返回了同一个对象的引用</span></div><div class="line"><span class="xml">  data: function () </span><span class="template-variable">&#123;</span></div><div class="line"><span class="template-variable">    return data</span></div><div class="line"><span class="template-variable">  &#125;</span><span class="xml"></span></div><div class="line"><span class="xml">&#125;)</span></div><div class="line"><span class="xml">new Vue(</span><span class="template-variable">&#123;</span></div><div class="line"><span class="template-variable">  el: '#example-2'</span></div><div class="line"><span class="template-variable">&#125;</span><span class="xml">)</span></div></pre></td></tr></table></figure></p><p>由于这三个组件实例共享了同一个 data 对象，因此递增一个 counter 会影响所有组件！这就错了。我们可以通过为每个组件返回全新的数据对象来修复这个问题：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data: <span class="keyword">function</span> <span class="title"></span>() &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">&#123;</span></div><div class="line">    counter: <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>由于这三个组件实例共享了同一个 data 对象，因此递增一个 counter 会影响所有组件！这就错了。我们可以通过为每个组件返回全新的数据对象来修复这个问题：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data: <span class="keyword">function</span> <span class="title"></span>() &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">&#123;</span></div><div class="line">    counter: <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="组件组合"><a href="#组件组合" class="headerlink" title="组件组合"></a>组件组合</h2><p>在 Vue 中，父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息。看看它们是怎么工作的。<br><img src="https://cn.vuejs.org/images/props-events.png" alt="https://cn.vuejs.org/images/props-events.png"></p><h3 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h3><p>使用 Prop 传递数据</p><p>组件实例的作用域是孤立的。这意味着不能 (也不应该) 在子组件的模板内直接引用父组件的数据。父组件的数据需要通过 prop 才能下发到子组件中。</p><p>子组件要显式地用 props 选项声明它预期的数据：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Vue</span><span class="selector-class">.component</span>(<span class="string">'child'</span>, &#123;</div><div class="line">  <span class="comment">// 声明 props</span></div><div class="line">  <span class="attribute">props</span>: [<span class="string">'message'</span>],</div><div class="line">  <span class="comment">// 就像 data 一样，prop 也可以在模板中使用</span></div><div class="line">  <span class="comment">// 同样也可以在 vm 实例中通过 this.message 来使用</span></div><div class="line">  <span class="attribute">template</span>: <span class="string">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>传递<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">message</span>=<span class="string">"hello!"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="camelCase-vs-kebab-case"><a href="#camelCase-vs-kebab-case" class="headerlink" title="camelCase vs. kebab-case"></a>camelCase vs. kebab-case</h2><p>HTML 特性是不区分大小写的。所以，当使用的不是字符串模板时，camelCase (驼峰式命名) 的 prop 需要转换为相对应的 kebab-case (短横线分隔式命名)：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml">Vue.component('child', &#123;</span></div><div class="line"><span class="xml">  // 在 JavaScript 中使用 camelCase</span></div><div class="line"><span class="xml">  props: ['myMessage'],</span></div><div class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; myMessage &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></div><div class="line"><span class="xml">&#125;)</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="comment">&lt;!-- 在 HTML 中使用 kebab-case --&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">child</span> <span class="attr">my-message</span>=<span class="string">"hello!"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>如果你使用字符串模板，则没有这些限制。</p><h2 id="动态-Prop"><a href="#动态-Prop" class="headerlink" title="动态 Prop"></a>动态 Prop</h2><p>与绑定到任何普通的 HTML 特性相类似，我们可以用 v-bind 来动态地将 prop 绑定到父组件的数据。每当父组件的数据变化时，该变化也会传导给子组件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"parentMsg"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind:my-message</span>=<span class="string">"parentMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>你也可以使用 v-bind 的缩写语法：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;child <span class="symbol">:my-message=<span class="string">"parentMsg"</span>&gt;&lt;/child&gt;</span></div></pre></td></tr></table></figure></p><p>如果你想把一个对象的所有属性作为 prop 进行传递，可以使用不带任何参数的 v-bind (即用 v-bind 而不是 v-bind:prop-name)。例如，已知一个 todo 对象：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">todo</span>: &#123;</div><div class="line">  <span class="attribute">text</span>: <span class="string">'Learn Vue'</span>,</div><div class="line">  isComplete: false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;todo-<span class="built_in">item</span> v-bind=<span class="string">"todo"</span>&gt;&lt;/todo-<span class="built_in">item</span>&gt;</div></pre></td></tr></table></figure></p><p>将等价于：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;todo-<span class="built_in">item</span></div><div class="line">  v-bind:<span class="built_in">text</span>=<span class="string">"todo.text"</span></div><div class="line">  v-bind:<span class="keyword">is</span>-complete=<span class="string">"todo.isComplete"</span></div><div class="line">&gt;&lt;/todo-<span class="built_in">item</span>&gt;</div></pre></td></tr></table></figure></p><h2 id="字面量语法-vs-动态语法"><a href="#字面量语法-vs-动态语法" class="headerlink" title="字面量语法 vs 动态语法"></a>字面量语法 vs 动态语法</h2><p>初学者常犯的一个错误是使用字面量语法传递数值：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 传递了一个字符串 "1" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">some-prop</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></div></pre></td></tr></table></figure></p><p>因为它是一个字面量 prop，它的值是字符串 “1” 而不是一个数值。如果想传递一个真正的 JavaScript 数值，则需要使用 v-bind，从而让它的值被当作 JavaScript 表达式计算：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 传递真正的数值 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-bind:some-prop</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h2><h3 id="Prop-验证"><a href="#Prop-验证" class="headerlink" title="Prop 验证"></a>Prop 验证</h3><p>我们可以为组件的 prop 指定验证规则。如果传入的数据不符合要求，Vue 会发出警告。这对于开发给他人使用的组件非常有用。</p><p>要指定验证规则，需要用对象的形式来定义 prop，而不能用字符串数组：</p><p>Vue.component(‘example’, {<br>  props: {<br>    // 基础类型检测 (<code>null</code> 指允许任何类型)<br>    propA: Number,<br>    // 可能是多种类型<br>    propB: [String, Number],<br>    // 必传且是字符串<br>    propC: {<br>      type: String,<br>      required: true<br>    },<br>    // 数值且有默认值<br>    propD: {<br>      type: Number,<br>      default: 100<br>    },<br>    // 数组/对象的默认值应当由一个工厂函数返回<br>    propE: {<br>      type: Object,<br>      default: function () {<br>        return { message: ‘hello’ }<br>      }<br>    },<br>    // 自定义验证函数<br>    propF: {<br>      validator: function (value) {<br>        return value &gt; 10<br>      }<br>    }<br>  }<br>})</p><p>type 可以是下面原生构造器：</p><pre><code>StringNumberBooleanFunctionObjectArraySymbol</code></pre><p>type 也可以是一个自定义构造器函数，使用 instanceof 检测。</p><p>当 prop 验证失败，Vue 会抛出警告 (如果使用的是开发版本)。注意 prop 会在组件实例创建之前进行校验，所以在 default 或 validator 函数里，诸如 data、computed 或 methods 等实例属性还无法使用。</p><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>我们知道，父组件使用 prop 传递数据给子组件。但子组件怎么跟父组件通信呢？这个时候 Vue 的自定义事件系统就派得上用场了。<br>使用 v-on 绑定自定义事件</p><p>每个 Vue 实例都实现了事件接口，即：</p><pre><code>使用 $on(eventName) 监听事件使用 $emit(eventName) 触发事件</code></pre><p>Vue 的事件系统与浏览器的 EventTarget API 有所不同。尽管它们的运行起来类似，但是 $on 和 $emit 并不是addEventListener 和 dispatchEvent 的别名。</p><p>另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。</p><p>不能用 $on 侦听子组件释放的事件，而必须在模板里直接用 v-on 绑定，参见下面的例子。</p><p>下面是一个例子：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"counter-event-example"</span>&gt;</div><div class="line">  <span class="symbol">&lt;p&gt;</span>&#123;&#123; total &#125;&#125;&lt;/<span class="keyword">p</span>&gt;</div><div class="line">  &lt;button-counter v-<span class="keyword">on</span>:increment=<span class="string">"incrementTotal"</span>&gt;&lt;/button-counter&gt;</div><div class="line">  &lt;button-counter v-<span class="keyword">on</span>:increment=<span class="string">"incrementTotal"</span>&gt;&lt;/button-counter&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">Vue.component(<span class="string">'button-counter'</span>, &#123;</div><div class="line">  template: <span class="string">'&lt;button v-on:click="incrementCounter"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</div><div class="line">  dat<span class="variable">a:</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      counter: <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  method<span class="variable">s:</span> &#123;</div><div class="line">    incrementCounter: <span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></div><div class="line">      this.counter += <span class="number">1</span></div><div class="line">      this.$emit(<span class="string">'increment'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="keyword">e</span><span class="variable">l:</span> <span class="string">'#counter-event-example'</span>,</div><div class="line">  dat<span class="variable">a:</span> &#123;</div><div class="line">    tota<span class="variable">l:</span> <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  method<span class="variable">s:</span> &#123;</div><div class="line">    incrementTota<span class="variable">l:</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></div><div class="line">      this.total += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h3 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a>.sync 修饰符</h3><p>我们可能会需要对一个 prop 进行“双向绑定”。<br>如下代码</p><comp :foo.sync="bar"></comp><p>会被扩展为：</p><comp :foo="bar" @update:foo="val => bar = val"></comp><p>当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：</p><p>this.$emit(‘update:foo’, newValue)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue组件&quot;&gt;&lt;a href=&quot;#vue组件&quot; class=&quot;headerlink&quot; title=&quot;vue组件&quot;&gt;&lt;/a&gt;vue组件&lt;/h1&gt;&lt;p&gt; 组件可以扩展HTML元素，封装可重用的HTML代码，我们可以将组件看作自定义的HTML元素。&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小QA学习前端系列之vue 表单输入绑定</title>
    <link href="http://yoursite.com/2017/10/25/vue8/"/>
    <id>http://yoursite.com/2017/10/25/vue8/</id>
    <published>2017-10-25T01:43:35.000Z</published>
    <updated>2017-10-25T03:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p>v-model 指令在表单控件元素上创建双向数据绑定。<br>v-model 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。<br> v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值。因为它会选择 Vue 实例数据来作为具体的值。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p><p>对于要求 IME (如中文、日语、韩语等) (IME 意为“输入法”)的语言，你会发现 v-model 不会在 ime 输入中得到更新。如果你也想实现更新，请使用 input 事件。</p><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: </span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div></pre></td></tr></table></figure><h2 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Multiline message is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"white-space: pre-line;"</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"add multiple lines"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></div></pre></td></tr></table></figure><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>单个勾选框，逻辑值：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span> id=<span class="string">"checkbox"</span> v-model=<span class="string">"checked"</span>&gt;</div><div class="line">&lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"checkbox"</span>&gt;&#123;&#123; checked &#125;&#125;&lt;/<span class="keyword">label</span>&gt;</div></pre></td></tr></table></figure></p><p>多个勾选框，绑定到同一个数组：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">'example-3'</span>&gt;</div><div class="line">  &lt;<span class="selector-tag">input</span> type=<span class="string">"checkbox"</span> id=<span class="string">"jack"</span> value=<span class="string">"Jack"</span> v-model=<span class="string">"checkedNames"</span>&gt;</div><div class="line">  &lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"jack"</span>&gt;Jack&lt;/label&gt;</div><div class="line">  &lt;<span class="selector-tag">input</span> type=<span class="string">"checkbox"</span> id=<span class="string">"john"</span> value=<span class="string">"John"</span> v-model=<span class="string">"checkedNames"</span>&gt;</div><div class="line">  &lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"john"</span>&gt;John&lt;/label&gt;</div><div class="line">  &lt;<span class="selector-tag">input</span> type=<span class="string">"checkbox"</span> id=<span class="string">"mike"</span> value=<span class="string">"Mike"</span> v-model=<span class="string">"checkedNames"</span>&gt;</div><div class="line">  &lt;<span class="selector-tag">label</span> <span class="keyword">for</span>=<span class="string">"mike"</span>&gt;Mike&lt;/label&gt;</div><div class="line">  &lt;br&gt;</div><div class="line">  &lt;span&gt;Checked names: &#123;&#123; checkedNames &#125;&#125;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">new Vue(&#123;</div><div class="line">  el: <span class="string">'#example-3'</span>,</div><div class="line">  data: &#123;</div><div class="line">    checkedNames: []</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-4"</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"one"</span> <span class="attr">value</span>=<span class="string">"One"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"one"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">value</span>=<span class="string">"Two"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"two"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: </span><span class="template-variable">&#123;&#123; picked &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">new Vue(</span><span class="template-variable">&#123;</span></div><div class="line"><span class="template-variable">  el: '#example-4',</span></div><div class="line"><span class="template-variable">  data: &#123;</span></div><div class="line"><span class="template-variable">    picked: ''</span></div><div class="line"><span class="template-variable">  &#125;</span><span class="xml"></span></div><div class="line"><span class="xml">&#125;)</span></div></pre></td></tr></table></figure><h2 id="选择列表"><a href="#选择列表" class="headerlink" title="选择列表"></a>选择列表</h2><p>单选列表：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-5"</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: </span><span class="template-variable">&#123;&#123; selected &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">new Vue(</span><span class="template-variable">&#123;</span></div><div class="line"><span class="template-variable">  el: '...',</span></div><div class="line"><span class="template-variable">  data: &#123;</span></div><div class="line"><span class="template-variable">    selected: ''</span></div><div class="line"><span class="template-variable">  &#125;</span><span class="xml"></span></div><div class="line"><span class="xml">&#125;)</span></div></pre></td></tr></table></figure></p><p>多选列表 (绑定到一个数组)：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-6"</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span> <span class="attr">multiple</span> <span class="attr">style</span>=<span class="string">"width: 50px;"</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: </span><span class="template-variable">&#123;&#123; selected &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">new Vue(</span><span class="template-variable">&#123;</span></div><div class="line"><span class="template-variable">  el: '#example-6',</span></div><div class="line"><span class="template-variable">  data: &#123;</span></div><div class="line"><span class="template-variable">    selected: []</span></div><div class="line"><span class="template-variable">  &#125;</span><span class="xml"></span></div><div class="line"><span class="xml">&#125;)</span></div></pre></td></tr></table></figure><p>动态选项，用 v-for 渲染：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;select v-model=<span class="string">"selected"</span>&gt;</div><div class="line">  &lt;<span class="keyword">option</span> v-for=<span class="string">"option in options"</span> v-bind:value=<span class="string">"option.value"</span>&gt;</div><div class="line">    &#123;&#123; option.text &#125;&#125;</div><div class="line">  &lt;/<span class="keyword">option</span>&gt;</div><div class="line">&lt;/select&gt;</div><div class="line">&lt;span&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/span&gt;</div><div class="line"></div><div class="line">new Vue(&#123;</div><div class="line">  el: <span class="string">'...'</span>,</div><div class="line">  data: &#123;</div><div class="line">    selected: <span class="string">'A'</span>,</div><div class="line">    options: [</div><div class="line">      &#123; text: <span class="string">'One'</span>, value: <span class="string">'A'</span> &#125;,</div><div class="line">      &#123; text: <span class="string">'Two'</span>, value: <span class="string">'B'</span> &#125;,</div><div class="line">      &#123; text: <span class="string">'Three'</span>, value: <span class="string">'C'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">&lt;!-- 当选中时，`picked` 为字符串 "a" --&gt;</div><div class="line">&lt;input type="radio" v-model="picked" value="a"&gt;</div><div class="line">&lt;!-- `toggle` 为 true 或 false --&gt;</div><div class="line">&lt;input type="checkbox" v-model="toggle"&gt;</div><div class="line">&lt;!-- 当选中时，`selected` 为字符串 "abc" --&gt;</div><div class="line">&lt;select v-model="selected"&gt;</div><div class="line">  &lt;option value="abc"&gt;ABC&lt;/option&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure><h2 id="复选框-1"><a href="#复选框-1" class="headerlink" title="复选框"></a>复选框</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;input</div><div class="line">  type=<span class="string">"checkbox"</span></div><div class="line">  v-model=<span class="string">"toggle"</span></div><div class="line">  v-bind:<span class="literal">true</span>-<span class="built_in">value</span>=<span class="string">"a"</span></div><div class="line">  v-bind:<span class="literal">false</span>-<span class="built_in">value</span>=<span class="string">"b"</span></div><div class="line">&gt;</div><div class="line"></div><div class="line">// 当选中时</div><div class="line">vm.toggle === vm.<span class="keyword">a</span></div><div class="line">// 当没有选中时</div><div class="line">vm.toggle === vm.b</div></pre></td></tr></table></figure><h2 id="单选按钮-1"><a href="#单选按钮-1" class="headerlink" title="单选按钮"></a>单选按钮</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"radio"</span> v-model=<span class="string">"pick"</span> v-<span class="keyword">bind</span>:value=<span class="string">"a"</span>&gt;</div><div class="line"></div><div class="line"><span class="comment">// 当选中时</span></div><div class="line">vm<span class="variable">.pick</span> === vm<span class="variable">.a</span></div></pre></td></tr></table></figure><h2 id="选择列表的选项"><a href="#选择列表的选项" class="headerlink" title="选择列表的选项"></a>选择列表的选项</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">select v-model=<span class="string">"selected"</span>&gt;</div><div class="line">    &lt;!-- 内联对象字面量 --&gt;</div><div class="line">  &lt;option v-bind:value=<span class="string">"&#123; number: 123 &#125;"</span>&gt;<span class="number">123</span>&lt;<span class="regexp">/option&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>select&gt;</div><div class="line"></div><div class="line"><span class="comment">// 当选中时</span></div><div class="line"><span class="keyword">typeof</span> vm.selected <span class="comment">// =&gt; 'object'</span></div><div class="line">vm.selected.number <span class="comment">// =&gt; 123</span></div></pre></td></tr></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">.lazy</div><div class="line"></div><div class="line">在默认情况下，v-model 在 <span class="selector-tag">input</span> 事件中同步输入框的值与数据 (除了 上述 IME 部分)，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：</div><div class="line"></div><div class="line">&lt;!-- 在 <span class="string">"change"</span> 而不是 <span class="string">"input"</span> 事件中更新 --&gt;</div><div class="line">&lt;<span class="selector-tag">input</span> v-model.lazy=<span class="string">"msg"</span> &gt;</div><div class="line"></div><div class="line">.number</div><div class="line"></div><div class="line">如果想自动将用户的输入值转为 Number 类型 (如果原值的转换结果为 NaN 则返回原值)，可以添加一个修饰符 number 给 v-model 来处理输入值：</div><div class="line"></div><div class="line">&lt;<span class="selector-tag">input</span> v-model.number=<span class="string">"age"</span> type=<span class="string">"number"</span>&gt;</div><div class="line"></div><div class="line">这通常很有用，因为在 type=<span class="string">"number"</span> 时 HTML 中输入的值也总是会返回字符串类型。</div><div class="line">.trim</div><div class="line"></div><div class="line">如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：</div><div class="line"></div><div class="line">&lt;<span class="selector-tag">input</span> v-model.trim=<span class="string">"msg"</span>&gt;</div><div class="line"></div><div class="line">v-model 与组件</div><div class="line"></div><div class="line">    如果你还不熟悉 Vue 的组件，跳过这里即可。</div><div class="line"></div><div class="line">HTML 内建的 <span class="selector-tag">input</span> 类型有时不能满足你的需求。还好，Vue 的组件系统允许你创建一个具有自定义行为可复用的 <span class="selector-tag">input</span> 类型，这些 <span class="selector-tag">input</span> 类型甚至可以和 v-model 一起使用！要了解更多，请参阅自定义 <span class="selector-tag">input</span> 类型。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础用法&quot;&gt;&lt;a href=&quot;#基础用法&quot; class=&quot;headerlink&quot; title=&quot;基础用法&quot;&gt;&lt;/a&gt;基础用法&lt;/h2&gt;&lt;p&gt;v-model 指令在表单控件元素上创建双向数据绑定。&lt;br&gt;v-model 本质上不过是语法糖，它负责监听用户的输入事件以
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小QA学习前端系列之vue 事件处理</title>
    <link href="http://yoursite.com/2017/10/24/vue7/"/>
    <id>http://yoursite.com/2017/10/24/vue7/</id>
    <published>2017-10-24T01:49:07.000Z</published>
    <updated>2017-10-24T02:23:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><h2 id="用-v-on-指令监听-DOM-事件来触发一些-JavaScript-代码。"><a href="#用-v-on-指令监听-DOM-事件来触发一些-JavaScript-代码。" class="headerlink" title="用 v-on 指令监听 DOM 事件来触发一些 JavaScript 代码。"></a>用 v-on 指令监听 DOM 事件来触发一些 JavaScript 代码。</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> id=<span class="string">"example-1"</span>&gt;</div><div class="line">  &lt;<span class="selector-tag">button</span> v-on:click=<span class="string">"counter += 1"</span>&gt;增加 <span class="number">1</span>&lt;/button&gt;</div><div class="line">  &lt;p&gt;这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line"><span class="selector-tag">var</span> example1 = new Vue(&#123;</div><div class="line">  el: <span class="string">'#example-1'</span>,</div><div class="line">  data: &#123;</div><div class="line">    counter: <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="方法事件处理器"><a href="#方法事件处理器" class="headerlink" title="方法事件处理器"></a>方法事件处理器</h2><p>v-on 可以接收一个定义的方法来调用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">示例：</div><div class="line"></div><div class="line">&lt;div id=<span class="string">"example-2"</span>&gt;</div><div class="line">  &lt;!-- <span class="string">`greet`</span> 是在下面定义的方法名 --&gt;</div><div class="line">  &lt;button v-on:click=<span class="string">"greet"</span>&gt;Greet&lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>div&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> example2 = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#example-2'</span>,</div><div class="line">  data: &#123;</div><div class="line">    name: <span class="string">'Vue.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 在 `methods` 对象中定义方法</span></div><div class="line">  methods: &#123;</div><div class="line">    greet: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">      <span class="comment">// `this` 在方法里指当前 Vue 实例</span></div><div class="line">      alert(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>)</div><div class="line">      <span class="comment">// `event` 是原生 DOM 事件</span></div><div class="line">      <span class="keyword">if</span> (event) &#123;</div><div class="line">        alert(event.target.tagName)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 也可以用 JavaScript 直接调用方法</span></div><div class="line">example2.greet() <span class="comment">// =&gt; 'Hello Vue.js!'</span></div></pre></td></tr></table></figure></p><h2 id="内联处理器里的方法"><a href="#内联处理器里的方法" class="headerlink" title="内联处理器里的方法"></a>内联处理器里的方法</h2><p>除了直接绑定到一个方法，也可以用内联 JavaScript 语句：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"example-3"</span>&gt;</div><div class="line">  &lt;button v-<span class="keyword">on</span>:click=<span class="string">"say('hi')"</span>&gt;Say hi&lt;/button&gt;</div><div class="line">  &lt;button v-<span class="keyword">on</span>:click=<span class="string">"say('what')"</span>&gt;Say what&lt;/button&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div><div class="line"></div><div class="line">new Vue(&#123;</div><div class="line">  el: '<span class="comment">#example-3',</span></div><div class="line">  methods: &#123;</div><div class="line">    <span class="built_in">say</span>: function (message) &#123;</div><div class="line">      alert(message)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>内联语句处理器中访问原生 DOM 事件。可以用特殊变量 $event 把它传入方法：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;button v-<span class="keyword">on</span>:click=<span class="string">"warn('Form cannot be submitted yet.', $event)"</span>&gt;</div><div class="line">  Submit</div><div class="line">&lt;/button&gt;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line">methods: &#123;</div><div class="line">  warn: function (message, <span class="keyword">event</span>) &#123;</div><div class="line">    <span class="comment">// 现在我们可以访问原生事件对象</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">event</span>) <span class="keyword">event</span>.preventDefault()</div><div class="line">    alert(message)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。<br>Vue.js 为 v-on 提供了事件修饰符。通过由点 (.) 表示的指令后缀来调用修饰符。</p><pre><code>.stop.prevent.capture.self.once</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 只当事件在该元素本身 (比如不是子元素) 触发时触发回调 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="键值修饰符"><a href="#键值修饰符" class="headerlink" title="键值修饰符"></a>键值修饰符</h2><p>Vue 允许为 v-on 在监听键盘事件时添加关键修饰符：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"></div><div class="line">记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 缩写语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span></span></div></pre></td></tr></table></figure></p><h2 id="自动匹配按键修饰符"><a href="#自动匹配按键修饰符" class="headerlink" title="自动匹配按键修饰符"></a>自动匹配按键修饰符</h2><p>你也可以通过将它们转换到 kebab-case 来直接使用由 KeyboardEvent.key 暴露的任意有效按键名作为修饰符：</p><input @keyup.page-down="onPageDown"><p>在上面的例子中，处理函数仅在 $event.key === ‘PageDown’ 时被调用。</p><h2 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h2><p>可以用如下修饰符开启鼠标或键盘事件监听，使在按键按下时发生响应。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.ctrl</div><div class="line">.alt</div><div class="line">.shift</div><div class="line">.<span class="keyword">meta</span></div><div class="line"></div><div class="line">注意：在 Mac 系统键盘上，<span class="keyword">meta</span> 对应命令键 (⌘)。在 Windows 系统键盘 <span class="keyword">meta</span> 对应 windows 徽标键 (⊞)。在 Sun 操作系统键盘上，<span class="keyword">meta</span> 对应实心宝石键 (◆)。在其他特定键盘上，尤其在 MIT 和 Lisp 键盘及其后续，比如 Knight 键盘，space-cadet 键盘，<span class="keyword">meta</span> 被标记为“<span class="keyword">META</span>”。在 Symbolics 键盘上，<span class="keyword">meta</span> 被标记为“<span class="keyword">META</span>”或者“<span class="keyword">Meta</span>”。</div></pre></td></tr></table></figure></p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Alt + C --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string">"clear"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">"doSomething"</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a>.exact 修饰符</h2><p>.exact 修饰符应与其他系统修饰符组合使用，以指示处理程序只在精确匹配该按键组合时触发。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl</span>=<span class="string">"onClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="comment">&lt;!-- 只有在 Ctrl 被按下的时候触发 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">"onCtrlClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    .<span class="attribute">left</span></div><div class="line">    .<span class="attribute">right</span></div><div class="line">    .middle</div><div class="line"></div><div class="line">这些修饰符会限制处理程序监听特定的滑鼠按键。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件处理&quot;&gt;&lt;a href=&quot;#事件处理&quot; class=&quot;headerlink&quot; title=&quot;事件处理&quot;&gt;&lt;/a&gt;事件处理&lt;/h1&gt;&lt;h2 id=&quot;用-v-on-指令监听-DOM-事件来触发一些-JavaScript-代码。&quot;&gt;&lt;a href=&quot;#用-v-on-
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小QA学习前端系列之vue 列表渲染</title>
    <link href="http://yoursite.com/2017/10/23/vue6/"/>
    <id>http://yoursite.com/2017/10/23/vue6/</id>
    <published>2017-10-23T01:30:10.000Z</published>
    <updated>2017-10-23T03:37:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小QA学习前端系列之vue-列表渲染"><a href="#小QA学习前端系列之vue-列表渲染" class="headerlink" title="小QA学习前端系列之vue 列表渲染"></a>小QA学习前端系列之vue 列表渲染</h1><h2 id="用-v-for-把一个数组对应为一组元素"><a href="#用-v-for-把一个数组对应为一组元素" class="headerlink" title="用 v-for 把一个数组对应为一组元素"></a>用 v-for 把一个数组对应为一组元素</h2><p>我们用 v-for 指令根据一组数组的选项列表进行渲染。v-for 指令需要使用 item in items 形式的特殊语法，items 是源数据数组并且 item 是数组元素迭代的别名。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">ul</span> id=<span class="string">"example-1"</span>&gt;</div><div class="line">  &lt;<span class="selector-tag">li</span> v-<span class="keyword">for</span>=<span class="string">"item in items"</span>&gt;</div><div class="line">    &#123;&#123; item<span class="selector-class">.message</span> &#125;&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line"><span class="selector-tag">var</span> example1 = new Vue(&#123;</div><div class="line">  el: <span class="string">'#example-1'</span>,</div><div class="line">  data: &#123;</div><div class="line">    items: [</div><div class="line">      &#123; message: <span class="string">'Foo'</span> &#125;,</div><div class="line">      &#123; message: <span class="string">'Bar'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h2 id="在v-for-使用index"><a href="#在v-for-使用index" class="headerlink" title="在v-for 使用index"></a>在v-for 使用index</h2><p>v-for 还支持一个可选的第二个参数为当前项的索引。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">"example-2"</span>&gt;</div><div class="line">  &lt;li v-for=<span class="string">"(item, index) in items"</span>&gt;</div><div class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">var example2 = new Vue(&#123;</div><div class="line">  el: <span class="string">'#example-2'</span>,</div><div class="line">  data: &#123;</div><div class="line">    parentMessage: <span class="string">'Parent'</span>,</div><div class="line">    items: [</div><div class="line">      &#123; message: <span class="string">'Foo'</span> &#125;,</div><div class="line">      &#123; message: <span class="string">'Bar'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p> of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法</p><h2 id="一个对象的-v-for"><a href="#一个对象的-v-for" class="headerlink" title="一个对象的 v-for"></a>一个对象的 v-for</h2> <figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">&lt;ul id=<span class="string">"v-for-object"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"demo"</span>&gt;</div><div class="line">  &lt;li v-<span class="keyword">for</span>=<span class="string">"value in object"</span>&gt;</div><div class="line">    &#123;&#123; value &#125;&#125;</div><div class="line">  &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="type">Vue</span>(&#123;</div><div class="line">  el: '#v-<span class="keyword">for</span>-<span class="class"><span class="keyword">object</span>',</span></div><div class="line"><span class="class">  <span class="title">data</span></span>: &#123;</div><div class="line">    <span class="class"><span class="keyword">object</span></span>: &#123;</div><div class="line">      firstName: <span class="symbol">'Joh</span>n',</div><div class="line">      lastName: <span class="symbol">'Do</span>e',</div><div class="line">      age: <span class="number">30</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p> 你也可以提供第二个的参数为键名：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in object"</span>&gt;</span></span></div><div class="line"><span class="xml">  </span><span class="template-variable">&#123;&#123; key &#125;&#125;</span><span class="xml">: </span><span class="template-variable">&#123;&#123; value &#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>第三个参数为索引：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div v-for=<span class="string">"(value, key, index) in object"</span>&gt;</div><div class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h2 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h2><h3 id="变异方法"><a href="#变异方法" class="headerlink" title="变异方法"></a>变异方法</h3><p>Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下：</p><pre><code>push()pop()shift()unshift()splice()sort()reverse()</code></pre><p>你打开控制台，然后用前面例子的 items 数组调用变异方法：example1.items.push({ message: ‘Baz’ }) 。</p><h3 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h3><p>变异方法 (mutation method)，顾名思义，会改变被这些方法调用的原始数组。相比之下，也有非变异 (non-mutating method) 方法，例如：filter(), concat() 和 slice() 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组：</p><p>example1.items = example1.items.filter(function (item) {<br>  return item.message.match(/Foo/)<br>})</p><p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的、启发式的方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p><h3 id="对象更改检测注意事项"><a href="#对象更改检测注意事项" class="headerlink" title="对象更改检测注意事项"></a>对象更改检测注意事项</h3><p>Vue 不能检测对象属性的添加或删除：<br>对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。但是，可以使用 Vue.set(object, key, value) 方法向嵌套对象添加响应式属性。例如，对于：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="title">var</span> vm = new <span class="type">Vue</span>(&#123;</div><div class="line">  <span class="class"><span class="keyword">data</span>: &#123;</span></div><div class="line"><span class="class">    <span class="title">userProfile</span>: &#123;</span></div><div class="line"><span class="class">      <span class="title">name</span>: '<span class="type">Anika</span>'</span></div><div class="line"><span class="class">    &#125;</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>你可以添加一个新的 age 属性到嵌套的 userProfile 对象：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.set(vm<span class="selector-class">.userProfile</span>, <span class="string">'age'</span>, <span class="number">27</span>)</div></pre></td></tr></table></figure></p><p>你还可以使用 vm.$set 实例方法，它只是全局 Vue.set 的别名：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.userProfile, <span class="string">'age'</span>, <span class="number">27</span>)</div></pre></td></tr></table></figure></p><p>有时你可能需要为已有对象赋予多个新属性，比如使用 Object.assign() 或 _.extend()。在这种情况下，你应该用两个对象的属性创建一个新的对象。所以，如果你想添加新的响应式属性，不要像这样：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Object</span><span class="selector-class">.assign</span>(<span class="selector-tag">this</span><span class="selector-class">.userProfile</span>, &#123;</div><div class="line">  <span class="attribute">age</span>: <span class="number">27</span>,</div><div class="line">  favoriteColor: <span class="string">'Vue Green'</span></div><div class="line">&#125;)</div><div class="line">``</div><div class="line">你应该这样做：</div></pre></td></tr></table></figure></p><p>this.userProfile = Object.assign({}, this.userProfile, {<br>  age: 27,<br>  favoriteColor: ‘Vue Green’<br>})<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 显示过滤/排序结果</span></span></div><div class="line">有时，我们想要显示一个数组的过滤或排序副本，而不实际改变或重置原始数据。在这种情况下，可以创建返回过滤或排序数组的计算属性。</div><div class="line"></div><div class="line">例如：</div></pre></td></tr></table></figure></p><li v-for="n in evenNumbers"></li><p>data: {<br>  numbers: [ 1, 2, 3, 4, 5 ]<br>},<br>computed: {<br>  evenNumbers: function () {<br>    return this.numbers.filter(function (number) {<br>      return number % 2 === 0<br>    })<br>  }<br>}<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在计算属性不适用的情况下 (例如，在嵌套 v-<span class="keyword">for</span> 循环中) 你可以使用一个 <span class="function"><span class="keyword">method</span> 方法：</span></div></pre></td></tr></table></figure></p><li v-for="n in even(numbers)"></li><p>data: {<br>  numbers: [ 1, 2, 3, 4, 5 ]<br>},<br>methods: {<br>  even: function (numbers) {<br>    return numbers.filter(function (number) {<br>      return number % 2 === 0<br>    })<br>  }<br>}<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 一段取值范围的 v-for</span></span></div><div class="line"></div><div class="line">v-for 也可以取整数。在这种情况下，它将重复多次模板。</div></pre></td></tr></table></figure></p><p><div><br>  <span v-for="n in 10"> </span><br></div><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">## v-<span class="keyword">for</span> <span class="keyword">on</span> <span class="keyword">a</span> <span class="symbol">&lt;template&gt;</span></div><div class="line">类似于 v-<span class="keyword">if</span>，你也可以利用带有 v-<span class="keyword">for</span> 的 <span class="symbol">&lt;template&gt;</span> 渲染多个元素。比如：</div></pre></td></tr></table></figure></p><p><ul><br>  <template v-for="item in items"><br>    <li></li><br>    <li class="divider"></li><br>  </template><br></ul><br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">## v-<span class="keyword">for</span> <span class="keyword">with</span> v-<span class="keyword">if</span></div><div class="line">当它们处于同一节点，v-<span class="keyword">for</span> 的优先级比 v-<span class="keyword">if</span> 更高，这意味着 v-<span class="keyword">if</span> 将分别重复运行于每个 v-<span class="keyword">for</span> 循环中。当你想为仅有的一些项渲染节点时，这种优先级的机制会十分有用，如下：</div></pre></td></tr></table></figure></p><p><li v-for="todo in todos" v-if="!todo.isComplete"><br>  <br></li><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">上面的代码只传递了未 <span class="built_in">complete</span> 的 todos。</div><div class="line"></div><div class="line">而如果你的目的是有条件地跳过循环的执行，那么可以将 v-<span class="keyword">if</span> 置于外层元素 (或 <span class="symbol">&lt;template&gt;</span>)上。如：</div></pre></td></tr></table></figure></p><p><ul v-if="todos.length"><br>  <li v-for="todo in todos"><br>    <br>  </li><br></ul></p><p></p><p v-else="">No todos left!</p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 一个组件的 v-for</span></span></div><div class="line">在自定义组件里，你可以像任何普通元素一样用 v-for 。</div></pre></td></tr></table></figure><p></p><p><my-component v-for="item in items" :key="item.id"></my-component><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    <span class="number">2.2</span><span class="number">.0</span>+ 的版本里，当在组件中使用 v-for 时，<span class="type">key</span> 现在是必须的。</div><div class="line"></div><div class="line">然而，任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要用 props ：</div></pre></td></tr></table></figure></p><p>&lt;my-component<br>  v-for=”(item, index) in items”<br>  v-bind:item=”item”<br>  v-bind:index=”index”<br>  v-bind:key=”item.id”</p><blockquote><p><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">不自动将 <span class="built_in">item</span> 注入到组件里的原因是，这会使得组件与 v-<span class="keyword">for</span> 的运作紧密耦合。明确组件数据的来源能够使组件在其他场合重复使用。</div><div class="line"></div><div class="line">下面是一个简单的 todo <span class="built_in">list</span> 的完整例子：</div></pre></td></tr></table></figure></p></blockquote><p><div id="todo-list-example"><br>  <input v-model="newTodoText" v-on:keyup.enter="addNewTodo" placeholder="Add a todo"><br>  <ul><br>    &lt;li<br>      is=”todo-item”<br>      v-for=”(todo, index) in todos”<br>      v-bind:key=”todo.id”<br>      v-bind:title=”todo.title”<br>      v-on:remove=”todos.splice(index, 1)”</ul></div></p><pre><code>&gt;&lt;/li&gt;</code></pre><p>  <br><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">注意这里的 <span class="keyword">is</span>=<span class="string">"todo-item"</span> 属性。这种做法在使用 DOM 模板时是十分必要的，因为在 <span class="symbol">&lt;ul&gt;</span> 元素内只有 <span class="symbol">&lt;li&gt;</span> 元素会被看作有效内容。这样做实现的效果与 <span class="symbol">&lt;todo-item&gt;</span> 相同，但是可以避开一些潜在的浏览器解析错误。查看 DOM 模板解析说明 来了解更多信息。</div></pre></td></tr></table></figure></p><p>Vue.component(‘todo-item’, {<br>  template: ‘\<br>    <li>\<br>      小QA学习前端系列之vue 列表渲染\<br>      <button v-on:click="$emit(\'remove\')">X</button>\<br>    </li>\<br>  ‘,<br>  props: [‘title’]<br>})<br>new Vue({<br>  el: ‘#todo-list-example’,<br>  data: {<br>    newTodoText: ‘’,<br>    todos: [<br>      {<br>        id: 1,<br>        title: ‘Do the dishes’,<br>      },<br>      {<br>        id: 2,<br>        title: ‘Take out the trash’,<br>      },<br>      {<br>        id: 3,<br>        title: ‘Mow the lawn’<br>      }<br>    ],<br>    nextTodoId: 4<br>  },<br>  methods: {<br>    addNewTodo: function () {<br>      this.todos.push({<br>        id: this.nextTodoId++,<br>        title: this.newTodoText<br>      })<br>      this.newTodoText = ‘’<br>    }<br>  }<br>})<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小QA学习前端系列之vue-列表渲染&quot;&gt;&lt;a href=&quot;#小QA学习前端系列之vue-列表渲染&quot; class=&quot;headerlink&quot; title=&quot;小QA学习前端系列之vue 列表渲染&quot;&gt;&lt;/a&gt;小QA学习前端系列之vue 列表渲染&lt;/h1&gt;&lt;h2 id=&quot;用
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小QA学习前端系列之vue 条件渲染</title>
    <link href="http://yoursite.com/2017/10/22/vue5/"/>
    <id>http://yoursite.com/2017/10/22/vue5/</id>
    <published>2017-10-22T14:15:26.000Z</published>
    <updated>2017-10-22T14:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小QA学习前端系列之vue-条件渲染"><a href="#小QA学习前端系列之vue-条件渲染" class="headerlink" title="小QA学习前端系列之vue 条件渲染"></a>小QA学习前端系列之vue 条件渲染</h1><p>前段时间我们大概介绍了一下模板语法，今天我们要详细介绍模板语法中比较常用的一些。</p><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p>v-if 指令条件渲染指令，根据其后表达式的bool值进行判断是否渲染该元素<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">h1</span> v-<span class="keyword">if</span>=<span class="string">"ok"</span>&gt;Yes&lt;/h1&gt;</div></pre></td></tr></table></figure></p><p>与v-else 添加一个“else 块”<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> id=<span class="string">"example01"</span>&gt;</div><div class="line">&lt;<span class="selector-tag">h1</span> v-<span class="keyword">if</span>=<span class="string">"a&gt;20"</span>&gt;&#123;&#123;a&#125;&#125; &lt;/h1&gt;</div><div class="line">&lt;<span class="selector-tag">h1</span> v-<span class="keyword">else</span>&gt;不显示&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"><span class="selector-tag">var</span> vm= new Vue(&#123;</div><div class="line"> el:<span class="string">"#example01"</span>,</div><div class="line"> data:&#123;</div><div class="line"> <span class="selector-tag">a</span>:<span class="number">30</span></div><div class="line"> &#125;</div><div class="line"> &#125;)</div></pre></td></tr></table></figure></p><p>所以，v-if指令只渲染他身后表达式为true的元素</p><h2 id="在-元素上使用-v-if-条件渲染分组"><a href="#在-元素上使用-v-if-条件渲染分组" class="headerlink" title="在  元素上使用 v-if 条件渲染分组"></a>在 <template> 元素上使用 v-if 条件渲染分组</template></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h2><p>v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</p><h2 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h2><p>v-else-if，顾名思义，充当 v-if 的“else-if 块”，可以连续使用：<br>相当于一个for-each</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">if</span>=<span class="string">"type === 'A'"</span>&gt;</div><div class="line">  A</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"type === 'B'"</span>&gt;</div><div class="line">  B</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"type === 'C'"</span>&gt;</div><div class="line">  C</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">else</span>&gt;</div><div class="line">  <span class="keyword">Not</span> A/B/C</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure><h2 id="用-key-管理可复用的元素"><a href="#用-key-管理可复用的元素" class="headerlink" title="用 key 管理可复用的元素"></a>用 key 管理可复用的元素</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"key-example"</span>&gt;</div><div class="line">&lt;template v-<span class="keyword">if</span>=<span class="string">"loginType === 'username'"</span>&gt;</div><div class="line">  <span class="symbol">&lt;label&gt;</span>Username&lt;/label&gt;</div><div class="line">  &lt;<span class="built_in">input</span> placeholder=<span class="string">"Enter your username"</span> key=<span class="string">"username-input"</span>&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;template v-<span class="keyword">else</span>&gt;</div><div class="line">  <span class="symbol">&lt;label&gt;</span>Email&lt;/label&gt;</div><div class="line">  &lt;<span class="built_in">input</span> placeholder=<span class="string">"Enter your email address"</span> key=<span class="string">"email-input"</span>&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;button v-<span class="keyword">on</span>=<span class="string">"toggleLoginType()"</span>&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="keyword">e</span><span class="variable">l:</span> <span class="string">'#key-example'</span>,</div><div class="line">  dat<span class="variable">a:</span> &#123;</div><div class="line">    loginType: <span class="string">'username'</span></div><div class="line">  &#125;,</div><div class="line">  method<span class="variable">s:</span> &#123;</div><div class="line">    toggleLoginType: <span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></div><div class="line">      <span class="keyword">return</span> this.loginType = this.loginType === <span class="string">'username'</span> ? <span class="string">'email'</span> : <span class="string">'username'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>v-show 与v-if类似，只是会渲染其身后表达式为false的元素，而且会给这样的元素添加css代码：style=”display:none”;<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="xml">1</span></div><div class="line"><span class="xml">2</span></div><div class="line"><span class="xml">3</span></div><div class="line"><span class="xml">4</span></div><div class="line"><span class="xml">5</span></div><div class="line"><span class="xml">6</span></div><div class="line"><span class="xml">7</span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"age &gt;= 25"</span>&gt;</span>Age: </span><span class="template-variable">&#123;&#123; age &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Name: </span><span class="template-variable">&#123;&#123; name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"name.indexOf('cool') = 0"</span>&gt;</span>Name: </span><span class="template-variable">&#123;&#123; name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Sex: </span><span class="template-variable">&#123;&#123; sex &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></div><div class="line"><span class="xml"> var vm = new Vue(&#123;</span></div><div class="line"><span class="xml"> el: '#app',</span></div><div class="line"><span class="xml"> data: &#123;</span></div><div class="line"><span class="xml"> age: 21,</span></div><div class="line"><span class="xml"> name: 'keepcool',</span></div><div class="line"><span class="xml"> sex: 'Male'</span></div><div class="line"><span class="xml"> &#125;</span></div><div class="line"><span class="xml"> &#125;)</span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p><h2 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a>v-if vs v-show</h2><p>v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p><h2 id="v-if-与-v-for-一起使用"><a href="#v-if-与-v-for-一起使用" class="headerlink" title="v-if 与 v-for 一起使用"></a>v-if 与 v-for 一起使用</h2><p>当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小QA学习前端系列之vue-条件渲染&quot;&gt;&lt;a href=&quot;#小QA学习前端系列之vue-条件渲染&quot; class=&quot;headerlink&quot; title=&quot;小QA学习前端系列之vue 条件渲染&quot;&gt;&lt;/a&gt;小QA学习前端系列之vue 条件渲染&lt;/h1&gt;&lt;p&gt;前段时间我们
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小QA学习前端系列之vue Class 与 Style 绑定</title>
    <link href="http://yoursite.com/2017/10/20/vue4/"/>
    <id>http://yoursite.com/2017/10/20/vue4/</id>
    <published>2017-10-20T02:54:57.000Z</published>
    <updated>2017-10-20T03:32:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小QA学习前端系列之vue-Class-与-Style-绑定"><a href="#小QA学习前端系列之vue-Class-与-Style-绑定" class="headerlink" title="小QA学习前端系列之vue Class 与 Style 绑定"></a>小QA学习前端系列之vue Class 与 Style 绑定</h1><h2 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 HTML Class</h2><p>对象语法<br>使用 v-bind:class </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure><p>当然也可以绑定一个 data对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">&lt;div</span> <span class="attr">v-bind:class="classObject"&gt;&lt;/div&gt;</span></div><div class="line"></div><div class="line"><span class="attr">data:</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">  classObject:</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">    active:</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    'text-danger':</span> <span class="literal">false</span></div><div class="line">  <span class="string">&#125;</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure><p>也可以绑定一个返回对象的计算属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"classObject"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"></div><div class="line">data: &#123;</div><div class="line">  isActive: <span class="literal">true</span>,</div><div class="line">  error: <span class="literal">null</span></div><div class="line">&#125;,</div><div class="line">computed: &#123;</div><div class="line">  classObject: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      active: <span class="keyword">this</span>.isActive &amp;&amp; !<span class="keyword">this</span>.error,</div><div class="line">      <span class="string">'text-danger'</span>: <span class="keyword">this</span>.error &amp;&amp; <span class="keyword">this</span>.error.type === <span class="string">'fatal'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>数组语法<br>我们可以把一个数组传给 v-bind:class，以应用一个 class 列表：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"[activeClass, errorClass]"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"></div><div class="line">data: &#123;</div><div class="line">  activeClass: <span class="string">'active'</span>,</div><div class="line">  errorClass: <span class="string">'text-danger'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用在组件上</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">例如，如果你声明了这个组件：</div><div class="line"></div><div class="line"><span class="type">Vue</span>.component(<span class="symbol">'my</span>-component', &#123;</div><div class="line">  template: '&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"foo bar"</span>&gt;<span class="type">Hi</span>&lt;/p&gt;'</div><div class="line">&#125;)</div><div class="line"></div><div class="line">然后在使用它的时候添加一些 <span class="class"><span class="keyword">class</span><span class="title">：</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="title">&lt;my-component</span> <span class="title">class=</span>"<span class="title">baz</span> <span class="title">boo</span>"<span class="title">&gt;&lt;/my-component&gt;</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="title">HTML</span> <span class="title">将被渲染为</span></span>:</div><div class="line"></div><div class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"foo bar baz boo"</span>&gt;<span class="type">Hi</span>&lt;/p&gt;</div><div class="line"></div><div class="line">对于带数据绑定 <span class="class"><span class="keyword">class</span> <span class="title">也同样适用：</span></span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="title">&lt;my-component</span> <span class="title">v-bind</span></span>:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;&lt;/my-component&gt;</div><div class="line"></div><div class="line">当 isActive 为真值 (译者注：truthy 不是 <span class="literal">true</span>，参考这里) 时，<span class="type">HTML</span> 将被渲染成为：</div><div class="line"></div><div class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"foo bar active"</span>&gt;<span class="type">Hi</span>&lt;/p&gt;</div></pre></td></tr></table></figure><h2 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h2><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><p>v-bind:style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来) 来命名：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">&lt;div</span> <span class="attr">v-bind:style="&#123;</span> <span class="attr">color:</span> <span class="string">activeColor,</span> <span class="attr">fontSize:</span> <span class="string">fontSize</span> <span class="string">+</span> <span class="string">'px'</span> <span class="string">&#125;"&gt;&lt;/div&gt;</span></div><div class="line"></div><div class="line"><span class="attr">data:</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">  activeColor:</span> <span class="string">'red'</span><span class="string">,</span></div><div class="line"><span class="attr">  fontSize:</span> <span class="number">30</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure></p><h3 id="绑定到一个样式对象"><a href="#绑定到一个样式对象" class="headerlink" title="绑定到一个样式对象"></a>绑定到一个样式对象</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">div</span> v-bind:style=<span class="string">"styleObject"</span>&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">data: &#123;</div><div class="line">  styleObject: &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="string">'red'</span>,</div><div class="line">    fontSize: <span class="string">'13px'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><p>v-bind:style 的数组语法可以将多个样式对象应用到同一个元素上：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">bind</span>:style=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p><h3 id="自动添加前缀"><a href="#自动添加前缀" class="headerlink" title="自动添加前缀"></a>自动添加前缀</h3><p>当 v-bind:style 使用需要添加浏览器引擎前缀的 CSS 属性时，如 transform，Vue.js 会自动侦测并添加相应的前缀。</p><h3 id="多重值"><a href="#多重值" class="headerlink" title="多重值"></a>多重值</h3><p>从 2.3.0 起你可以为 style 绑定中的属性提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：</p><div :style="{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }"></div><p>这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小QA学习前端系列之vue-Class-与-Style-绑定&quot;&gt;&lt;a href=&quot;#小QA学习前端系列之vue-Class-与-Style-绑定&quot; class=&quot;headerlink&quot; title=&quot;小QA学习前端系列之vue Class 与 Style 绑定&quot;&gt;
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小QA学习前端系列之vue计算属性和观察者</title>
    <link href="http://yoursite.com/2017/10/19/vue3/"/>
    <id>http://yoursite.com/2017/10/19/vue3/</id>
    <published>2017-10-19T01:50:14.000Z</published>
    <updated>2017-10-19T02:39:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小QA学习前端系列之vue计算属性和观察者"><a href="#小QA学习前端系列之vue计算属性和观察者" class="headerlink" title="小QA学习前端系列之vue计算属性和观察者"></a>小QA学习前端系列之vue计算属性和观察者</h1><h2 id="对于任何复杂逻辑，你都应当使用计算属性"><a href="#对于任何复杂逻辑，你都应当使用计算属性" class="headerlink" title="对于任何复杂逻辑，你都应当使用计算属性"></a>对于任何复杂逻辑，你都应当使用计算属性</h2><p>我可以在模板放入逻辑<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> id=<span class="string">"example"</span>&gt;</div><div class="line">  &#123;&#123; message.split(<span class="string">''</span>).<span class="keyword">reverse</span>().join(<span class="string">''</span>) &#125;&#125;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p><p>也可以用$watch来计算逻辑<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"demo"</span>&gt;&#123;&#123;fullName&#125;&#125;&lt;/div&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> vm = new Vue(&#123;</div><div class="line">  <span class="keyword">data</span>: &#123;</div><div class="line">    firstName: <span class="string">'Foo'</span>,</div><div class="line">    lastName: <span class="string">'Bar'</span>,</div><div class="line">    fullName: <span class="string">'Foo Bar'</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">vm.$watch(<span class="string">'firstName'</span>, function (<span class="keyword">val</span>) &#123;</div><div class="line">  <span class="keyword">this</span>.fullName = <span class="keyword">val</span> + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</div><div class="line">&#125;)</div><div class="line"></div><div class="line">vm.$watch(<span class="string">'lastName'</span>, function (<span class="keyword">val</span>) &#123;</div><div class="line">  <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">val</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>通常情况下，使用计算属性会比使用过程式的$watch回调更合适<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    el:<span class="string">'#demo'</span>,</div><div class="line">    data: &#123;</div><div class="line">        firstName: <span class="string">'Foo'</span>,</div><div class="line">        lastName: <span class="string">'Bar'</span></div><div class="line">    &#125;,</div><div class="line">    computed: &#123;</div><div class="line">        fullName: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>是不是代码量少多了，开心吧<br>但要记住<strong>计算属性是基于它们的依赖进行缓存的</strong>，而直接在vue的method中每当触发重新渲染时，调用方法将总会再次执行函数。<br>如果你不想使用缓存 也可以 只需要cache关闭开关就好<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  example: &#123;</div><div class="line">    cache: <span class="literal">false</span>,</div><div class="line">    <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> Date.now() + <span class="keyword">this</span>.msg</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 setter</h2><p>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line">computed: &#123;</div><div class="line">  fullName: &#123;</div><div class="line">    <span class="comment">// getter</span></div><div class="line">    <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// setter</span></div><div class="line">    <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(newValue)</span> </span>&#123;</div><div class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</div><div class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</div><div class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure></p><p>现在再运行 vm.fullName = ‘John Doe’ 时，setter 会被调用，vm.firstName 和 vm.lastName 也会相应地被更新。</p><h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><p>那什么时候用watch<br>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。当<strong>需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的</strong>。</p><p>例如：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"watch-example"</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">    Ask a yes/no question:</span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"question"</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; answer &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="comment">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span></span></div><div class="line"><span class="xml"><span class="comment">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></div><div class="line"><span class="xml">var watchExampleVM = new Vue(&#123;</span></div><div class="line"><span class="xml">  el: '#watch-example',</span></div><div class="line"><span class="xml">  data: &#123;</span></div><div class="line"><span class="xml">    question: '',</span></div><div class="line"><span class="xml">    answer: 'I cannot give you an answer until you ask a question!'</span></div><div class="line"><span class="xml">  &#125;,</span></div><div class="line"><span class="xml">  watch: &#123;</span></div><div class="line"><span class="xml">    // 如果 `question` 发生改变，这个函数就会运行</span></div><div class="line"><span class="xml">    question: function (newQuestion) &#123;</span></div><div class="line"><span class="xml">      this.answer = 'Waiting for you to stop typing...'</span></div><div class="line"><span class="xml">      this.getAnswer()</span></div><div class="line"><span class="xml">    &#125;</span></div><div class="line"><span class="xml">  &#125;,</span></div><div class="line"><span class="xml">  methods: &#123;</span></div><div class="line"><span class="xml">    // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></div><div class="line"><span class="xml">    // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></div><div class="line"><span class="xml">    // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></div><div class="line"><span class="xml">    // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></div><div class="line"><span class="xml">    // 请参考：https://lodash.com/docs#debounce</span></div><div class="line"><span class="xml">    getAnswer: _.debounce(</span></div><div class="line"><span class="xml">      function () &#123;</span></div><div class="line"><span class="xml">        if (this.question.indexOf('?') === -1) &#123;</span></div><div class="line"><span class="xml">          this.answer = 'Questions usually contain a question mark. ;-)'</span></div><div class="line"><span class="xml">          return</span></div><div class="line"><span class="xml">        &#125;</span></div><div class="line"><span class="xml">        this.answer = 'Thinking...'</span></div><div class="line"><span class="xml">        var vm = this</span></div><div class="line"><span class="xml">        axios.get('https://yesno.wtf/api')</span></div><div class="line"><span class="xml">          .then(function (response) &#123;</span></div><div class="line"><span class="xml">            vm.answer = _.capitalize(response.data.answer)</span></div><div class="line"><span class="xml">          &#125;)</span></div><div class="line"><span class="xml">          .catch(function (error) &#123;</span></div><div class="line"><span class="xml">            vm.answer = 'Error! Could not reach the API. ' + error</span></div><div class="line"><span class="xml">          &#125;)</span></div><div class="line"><span class="xml">      &#125;,</span></div><div class="line"><span class="xml">      // 这是我们为判定用户停止输入等待的毫秒数</span></div><div class="line"><span class="xml">      500</span></div><div class="line"><span class="xml">    )</span></div><div class="line"><span class="xml">  &#125;</span></div><div class="line"><span class="xml">&#125;)</span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure><p>结果：</p><p>Ask a yes/no question:</p><p>I cannot give you an answer until you ask a question!</p><p>在这个示例中，使用 watch 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p><p>除了 watch 选项之外，您还可以使用命令式的 vm.$watch API。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小QA学习前端系列之vue计算属性和观察者&quot;&gt;&lt;a href=&quot;#小QA学习前端系列之vue计算属性和观察者&quot; class=&quot;headerlink&quot; title=&quot;小QA学习前端系列之vue计算属性和观察者&quot;&gt;&lt;/a&gt;小QA学习前端系列之vue计算属性和观察者&lt;/
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小QA学习前端系列之vue模板</title>
    <link href="http://yoursite.com/2017/10/18/vue2/"/>
    <id>http://yoursite.com/2017/10/18/vue2/</id>
    <published>2017-10-18T03:30:15.000Z</published>
    <updated>2017-10-18T06:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小QA学习前端系列之vue模板"><a href="#小QA学习前端系列之vue模板" class="headerlink" title="小QA学习前端系列之vue模板"></a>小QA学习前端系列之vue模板</h1><p>之前我们已经学习vue实例，已经理解如何初始化一个vue实例，以及实例中数据与方法使用，还了解生命周期，那接下来我要学习vue模板</p><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>使用“Mustache”语法 (双大括号) 的文本插值<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: </span><span class="template-variable">&#123;&#123; msg &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div></pre></td></tr></table></figure></p><h3 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h3><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML ，你需要使用 v-html 指令<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: </span><span class="template-variable">&#123;&#123; msg &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>这个标签可能导致xss攻击</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>Mustache 语法不能作用在 HTML 特性上，遇到这种情况应该使用 v-bind 指令<br>例如 id class 等</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> v-bind:<span class="built_in">id</span>=<span class="string">"TEST"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure><p>可以 省略前面的v-bind 直接使用:id</p><h3 id="使用-JavaScript-表达式"><a href="#使用-JavaScript-表达式" class="headerlink" title="使用 JavaScript 表达式"></a>使用 JavaScript 表达式</h3><p>用在v-bind中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:style</span>=<span class="string">"[isA?styleA:'', styleB]"</span>&gt;</span>我是字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="actionscript">  el: <span class="string">"#app"</span>,</span></div><div class="line"><span class="undefined">  data:&#123;</span></div><div class="line"><span class="undefined">    styleA:&#123;</span></div><div class="line"><span class="actionscript">      fontSize: <span class="string">'30px'</span>,</span></div><div class="line"><span class="actionscript">      color: <span class="string">'red'</span></span></div><div class="line"><span class="undefined">    &#125;,</span></div><div class="line"><span class="undefined">    styleB:&#123;</span></div><div class="line"><span class="actionscript">      textShadow: <span class="string">'5px 2px 6px #000'</span></span></div><div class="line"><span class="undefined">    &#125;,</span></div><div class="line"><span class="actionscript">    isA: <span class="literal">false</span></span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>用在Mustache中<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; ok ? <span class="string">'YES'</span> : <span class="string">'NO'</span> &#125;&#125;</div></pre></td></tr></table></figure></p><p>有个限制就是，每个绑定都只能包含单个表达式</p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令 (Directives) 是带有 v- 前缀的特殊属性。<br>v-text</p><pre><code>预期：string详细：更新元素的 textContent。如果要更新部分的 textContent ，需要使用 {{ Mustache }} 插值。示例：</code></pre><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="comment">&lt;!-- 和下面的一样 --&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;msg&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div></pre></td></tr></table></figure><p>v-show</p><pre><code>预期：any用法：根据表达式之真假值，切换元素的 display CSS 属性。当条件变化时该指令触发过渡效果。</code></pre><p>v-if</p><pre><code>预期：any用法：根据表达式的值的真假条件渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。如果元素是 &lt;template&gt; ，将提出它的内容作为条件块。当条件变化时该指令触发过渡效果。</code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。<br><a v-bind:href="url"></a></p><p>在这里 href 是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定。<br>另一个例子是 v-on 指令，它用于监听 DOM 事件：</p><p><a v-on:click="doSomething"></a></p><p>在这里参数是监听的事件名。</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>修饰符 (Modifiers) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：</p><form v-on:submit.prevent="onSubmit"></form><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>v- 前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。<br>v-bind 缩写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><p>v-on 缩写<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p><p>ok 今天主要介绍基本的模板语法，其实还有一些语法没有解释，根据官方文档咱们一步一步来</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小QA学习前端系列之vue模板&quot;&gt;&lt;a href=&quot;#小QA学习前端系列之vue模板&quot; class=&quot;headerlink&quot; title=&quot;小QA学习前端系列之vue模板&quot;&gt;&lt;/a&gt;小QA学习前端系列之vue模板&lt;/h1&gt;&lt;p&gt;之前我们已经学习vue实例，已经理解
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小QA学习前端系列之vue实例</title>
    <link href="http://yoursite.com/2017/10/17/vue/"/>
    <id>http://yoursite.com/2017/10/17/vue/</id>
    <published>2017-10-17T02:35:18.000Z</published>
    <updated>2017-10-17T14:49:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小QA学习前端系列之vue实例"><a href="#小QA学习前端系列之vue实例" class="headerlink" title="小QA学习前端系列之vue实例"></a>小QA学习前端系列之vue实例</h1><p>不管是学习任何语言和框架，或者工具，都应该先把官方文档略读一遍，之后找个demo项目，开始看代码，然后照着人家的demo 敲一遍，基本上就入门，我是笨人，这是我认为学习效率最高的方式。<br>API:<a href="https://cn.vuejs.org/v2/api/#v-bind" target="_blank" rel="external">https://cn.vuejs.org/v2/api/#v-bind</a></p><h2 id="啥是vue"><a href="#啥是vue" class="headerlink" title="啥是vue"></a>啥是vue</h2><p>就是一个前端框架，他吸收了react的优点例如：</p><pre><code>1. 使用 Virtual DOM2. 提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。3. 将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。</code></pre><p>同时它也融合了AngularJS 的一些优点</p><pre><code>1. 数据绑定2. 指令与组件</code></pre><p>还有其他的一些优秀框架例如konckout等<br>详细内容大家可以看<br><a href="https://cn.vuejs.org/v2/guide/comparison.html" target="_blank" rel="external">https://cn.vuejs.org/v2/guide/comparison.html</a></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="https://cn.vuejs.org/images/lifecycle.png"><br>现在的软件设计都利用了生命周期概念，帮助在开发者在开发中更好的处理数据，例如Android的生命周期，React的生命周期。<br>VUE大概的流程如下<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">beforeCreateed<span class="function"><span class="params">()</span>-&gt;</span> created<span class="function"><span class="params">()</span>-&gt;</span>beforeMount<span class="function"><span class="params">()</span>-&gt;</span>mounted()&#123;<span class="function">-&gt;</span>beforeUpdate()</div><div class="line"></div><div class="line"><span class="function">-&gt;</span>updated<span class="function"><span class="params">()</span>&#125;-&gt;</span>beforeDestroy<span class="function"><span class="params">()</span>-&gt;</span>destroyed()</div><div class="line">我们先大致了解下 vue 的生命周期，这对于以后我们看别人的代码有很大好处</div></pre></td></tr></table></figure></p><h2 id="开始实践"><a href="#开始实践" class="headerlink" title="开始实践"></a>开始实践</h2><h3 id="vue实例"><a href="#vue实例" class="headerlink" title="vue实例"></a>vue实例</h3><p>创建vue实例</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="type">Vue</span>(&#123;</div><div class="line">  <span class="comment">// 选项</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h3><p>data 对象中能找到的所有的属性。<br>值得注意的是只有当实例被创建时 data 中存在的属性是响应式的。<br>所以后面添加的属性 <strong>都无效</strong><br>Vue 实例暴露了一些有用的实例属性与方法。都有前缀$<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> <span class="built_in">data</span> = &#123; a: <span class="number">1</span> &#125;</div><div class="line"><span class="built_in">var</span> vm = <span class="literal">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#example'</span>,</div><div class="line">  <span class="built_in">data</span>: <span class="built_in">data</span></div><div class="line">&#125;)</div><div class="line">vm.$data === <span class="built_in">data</span> <span class="comment">// =&gt; true</span></div><div class="line">vm.$el === document.getElementById(<span class="string">'example'</span>) <span class="comment">// =&gt; true</span></div><div class="line"><span class="comment">// $watch 是一个实例方法</span></div><div class="line">vm.$watch(<span class="string">'a'</span>, function (newValue, oldValue) &#123;</div><div class="line">  <span class="comment">// 这个回调将在 `vm.a` 改变后调用</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>具体的API如下<a href="https://cn.vuejs.org/v2/api/#实例属性" target="_blank" rel="external">https://cn.vuejs.org/v2/api/#实例属性</a><br>因为我已经熟悉了node与webpack，所以直接上vue-cli 初始化项目<br>不熟悉的同学 还是建议在<br><a href="https://jsfiddle.net/chrisvfritz/50wL7mdz/" target="_blank" rel="external">https://jsfiddle.net/chrisvfritz/50wL7mdz/</a><br>这个模板下学习<br>OK 第一节完毕 明天继续按着文档看模板语法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小QA学习前端系列之vue实例&quot;&gt;&lt;a href=&quot;#小QA学习前端系列之vue实例&quot; class=&quot;headerlink&quot; title=&quot;小QA学习前端系列之vue实例&quot;&gt;&lt;/a&gt;小QA学习前端系列之vue实例&lt;/h1&gt;&lt;p&gt;不管是学习任何语言和框架，或者工具，
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小QA学习前端系列之练习实践vuex-shopping-cart</title>
    <link href="http://yoursite.com/2017/10/15/vuex-shopping-cart/"/>
    <id>http://yoursite.com/2017/10/15/vuex-shopping-cart/</id>
    <published>2017-10-15T14:29:44.000Z</published>
    <updated>2017-10-17T14:50:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小QA学习前端系列之练习实践vuex-shopping-cart"><a href="#小QA学习前端系列之练习实践vuex-shopping-cart" class="headerlink" title="小QA学习前端系列之练习实践vuex-shopping-cart"></a>小QA学习前端系列之练习实践vuex-shopping-cart</h1><h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><p><a href="https://github.com/vuejs/vuex/tree/dev/examples/shopping-cart" target="_blank" rel="external">https://github.com/vuejs/vuex/tree/dev/examples/shopping-cart</a></p><p>直接 npm install 或者yarn ，安装依赖</p><p>之后，npm run dev 运行</p><p>页面如下</p><p><img src="/image/vuex-demo.png" alt="shop"></p><p>废话不多说，直接看源码。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>先来看看文件目录</p><p><img src="/image/vuex-demo2.png" alt="文件"></p><p>该demo包含了2个module，一个叫cart,另一个叫product.</p><p>先看cart<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#shop是获取数据的api</span></div><div class="line">import shop <span class="keyword">from</span> '../../api/shop'</div><div class="line"><span class="comment">#引入了 mutation-types 使用常量替代 Mutation 事件类型</span></div><div class="line">import * as types <span class="keyword">from</span> '../mutation-types'</div><div class="line"></div><div class="line">// initial <span class="keyword">state</span> 初始化了<span class="number">2</span>个状态也可叫数据对象，added:</div><div class="line">// shape: [&#123; id, quantity &#125;]</div><div class="line">const <span class="keyword">state</span> = &#123;</div><div class="line">  added: [],</div><div class="line">  checkoutStatus: null</div><div class="line">&#125;</div><div class="line"></div><div class="line">// getters getters过滤条件必须是bollean值.根据bolean的条件返回具体数据对象。null在JavaScript中if条件下 均被视为false</div><div class="line"></div><div class="line">const getters = &#123;</div><div class="line">  checkoutStatus: <span class="keyword">state</span> =&gt; <span class="keyword">state</span>.checkoutStatus</div><div class="line">&#125;</div><div class="line"></div><div class="line">// actions 在actions中提交mutation，并且可以包含任何的异步操作。actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据（但是还是通过mutation来操作，因为只有它能操作</div><div class="line"></div><div class="line">const actions = &#123;</div><div class="line">  checkout (&#123; commit, <span class="keyword">state</span> &#125;, products) &#123;</div><div class="line">    //解构 <span class="keyword">state</span>.added对象里面的值，并将至存放到savedCartItems对象中</div><div class="line">    </div><div class="line">    const savedCartItems = [...<span class="keyword">state</span>.added]</div><div class="line"></div><div class="line">    commit(types.CHECKOUT_REQUEST)</div><div class="line">    shop.buyProducts(</div><div class="line">      products,</div><div class="line">      () =&gt; commit(types.CHECKOUT_SUCCESS),</div><div class="line">      () =&gt; commit(types.CHECKOUT_FAILURE, &#123; savedCartItems &#125;)</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// mutations 在Vuex中store数据改变的唯一方法就是mutation</div><div class="line"><span class="variable">&lt;!-- </span></div><div class="line"><span class="variable">mutations,里面装着一些改变数据方法的集合，这是Veux设计很重要的一点，就是把处理数据逻辑方法全部放在mutations里面，使得数据和视图分离。 --&gt;</span></div><div class="line"></div><div class="line">const mutations = &#123;</div><div class="line">  [types.ADD_TO_CART] (<span class="keyword">state</span>, &#123; id &#125;) &#123;</div><div class="line">    <span class="keyword">state</span>.lastCheckout = null</div><div class="line">    const record = <span class="keyword">state</span>.added.find(p =&gt; p.id === id)</div><div class="line">    if (!record) &#123;</div><div class="line">      <span class="keyword">state</span>.added.push(&#123;</div><div class="line">        id,</div><div class="line">        quantity: <span class="number">1</span></div><div class="line">      &#125;)</div><div class="line">    &#125; else &#123;</div><div class="line">      record.quantity++</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  [types.CHECKOUT_REQUEST] (<span class="keyword">state</span>) &#123;</div><div class="line">    // clear cart</div><div class="line">    <span class="keyword">state</span>.added = []</div><div class="line">    <span class="keyword">state</span>.checkoutStatus = null</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  [types.CHECKOUT_SUCCESS] (<span class="keyword">state</span>) &#123;</div><div class="line">    <span class="keyword">state</span>.checkoutStatus = 'successful'</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  [types.CHECKOUT_FAILURE] (<span class="keyword">state</span>, &#123; savedCartItems &#125;) &#123;</div><div class="line">    // rollback <span class="keyword">to</span> the cart saved before sending the request</div><div class="line">    <span class="keyword">state</span>.added = savedCartItems</div><div class="line">    <span class="keyword">state</span>.checkoutStatus = 'failed'</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export <span class="keyword">default</span> &#123;</div><div class="line">  <span class="keyword">state</span>,</div><div class="line">  getters,</div><div class="line">  actions,</div><div class="line">  mutations</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在来看看 product<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">import shop <span class="keyword">from</span> '../../api/shop'</div><div class="line">import * as types <span class="keyword">from</span> '../mutation-types'</div><div class="line"></div><div class="line">// initial <span class="keyword">state</span></div><div class="line">const <span class="keyword">state</span> = &#123;</div><div class="line">  <span class="literal">all</span>: []</div><div class="line">&#125;</div><div class="line"></div><div class="line">// getters JS中数组(不管是不是空的)属于对象类型，对象类型转为boolean类型(内部对应ToBoolean()操作)时都是true。</div><div class="line"></div><div class="line">const getters = &#123;</div><div class="line">  <span class="literal">all</span>Products: <span class="keyword">state</span> =&gt; <span class="keyword">state</span>.<span class="literal">all</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">// actions</div><div class="line">const actions = &#123;</div><div class="line">  getAllProducts (&#123; commit &#125;) &#123;</div><div class="line">    shop.getProducts(products =&gt; &#123;</div><div class="line">      commit(types.RECEIVE_PRODUCTS, &#123; products &#125;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// mutations</div><div class="line">const mutations = &#123;</div><div class="line">  [types.RECEIVE_PRODUCTS] (<span class="keyword">state</span>, &#123; products &#125;) &#123;</div><div class="line">    <span class="keyword">state</span>.<span class="literal">all</span> = products</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  [types.ADD_TO_CART] (<span class="keyword">state</span>, &#123; id &#125;) &#123;</div><div class="line">    <span class="keyword">state</span>.<span class="literal">all</span>.find(p =&gt; p.id === id).inventory--</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export <span class="keyword">default</span> &#123;</div><div class="line">  <span class="keyword">state</span>,</div><div class="line">  getters,</div><div class="line">  actions,</div><div class="line">  mutations</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>看完了 module,再来看看 action<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这个是总得action 每个module 都可以有自己的action</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-types'</span></div><div class="line"><span class="comment">//很简单 判断存货是否大于0 然后提交给mutation具体id</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> addToCart = <span class="function">(<span class="params">&#123; commit &#125;, product</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (product.inventory &gt; <span class="number">0</span>) &#123;</div><div class="line">    commit(types.ADD_TO_CART, &#123;</div><div class="line">      id: product.id</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>继续 再来看看总得getter<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//查询 返回对象</div><div class="line">export const cartProducts = <span class="keyword">state</span> =&gt; &#123;</div><div class="line">  return <span class="keyword">state</span>.cart.added.map((&#123; id, quantity &#125;) =&gt; &#123;</div><div class="line">    const product = <span class="keyword">state</span>.products.<span class="literal">all</span>.find(p =&gt; p.id === id)</div><div class="line">    return &#123;</div><div class="line">      title: product.title,</div><div class="line">      price: product.price,</div><div class="line">      quantity</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>再来看定义所有mutation类型文件mutation-types.js<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_TO_CART = <span class="string">'ADD_TO_CART'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> CHECKOUT_REQUEST = <span class="string">'CHECKOUT_REQUEST'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> CHECKOUT_SUCCESS = <span class="string">'CHECKOUT_SUCCESS'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> CHECKOUT_FAILURE = <span class="string">'CHECKOUT_FAILURE'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_PRODUCTS = <span class="string">'RECEIVE_PRODUCTS'</span></div></pre></td></tr></table></figure></p><p>最后index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></div><div class="line"><span class="keyword">import</span> cart <span class="keyword">from</span> <span class="string">'./modules/cart'</span></div><div class="line"><span class="keyword">import</span> products <span class="keyword">from</span> <span class="string">'./modules/products'</span></div><div class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'../../../src/plugins/logger'</span></div><div class="line"></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  actions,</div><div class="line">  getters,</div><div class="line">  modules: &#123;</div><div class="line">    cart,</div><div class="line">    products</div><div class="line">  &#125;,</div><div class="line">  strict: debug,</div><div class="line">  plugins: debug ? [createLogger()] : []</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>至此 所有vuex介绍完毕，然后让我们看这些vuex怎么应用的component中</p><p>先来到cart组件</p><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cart"</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Your Cart<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"!products.length"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>Please add some products to cart.<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"p in products"</span>&gt;</span></span></div><div class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; p.title &#125;&#125;</span><span class="xml"> - </span><span class="template-variable">&#123;&#123; p.price | currency &#125;&#125;</span><span class="xml"> x </span><span class="template-variable">&#123;&#123; p.quantity &#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Total: </span><span class="template-variable">&#123;&#123; total | currency &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"!products.length"</span> @<span class="attr">click</span>=<span class="string">"checkout(products)"</span>&gt;</span>Checkout<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"checkoutStatus"</span>&gt;</span>Checkout </span><span class="template-variable">&#123;&#123; checkoutStatus &#125;&#125;</span><span class="xml">.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></div><div class="line"><span class="xml">//通过mapgetters方法解构数据</span></div><div class="line"><span class="xml">import &#123; mapGetters &#125; from 'vuex'</span></div><div class="line"><span class="xml">export default &#123;</span></div><div class="line"><span class="xml">  computed: &#123;</span></div><div class="line"><span class="xml">    ...mapGetters(&#123;</span></div><div class="line"><span class="xml">      products: 'cartProducts',</span></div><div class="line"><span class="xml">      checkoutStatus: 'checkoutStatus'</span></div><div class="line"><span class="xml">    &#125;),</span></div><div class="line"><span class="xml">    total () &#123;</span></div><div class="line"><span class="xml">      return this.products.reduce((total, p) =&gt; &#123;</span></div><div class="line"><span class="xml">        return total + p.price * p.quantity</span></div><div class="line"><span class="xml">      &#125;, 0)</span></div><div class="line"><span class="xml">    &#125;</span></div><div class="line"><span class="xml">  &#125;,</span></div><div class="line"><span class="xml">  </span></div><div class="line"><span class="xml">  methods: &#123;</span></div><div class="line"><span class="xml">    //分发action</span></div><div class="line"><span class="xml">    checkout (products) &#123;</span></div><div class="line"><span class="xml">      this.$store.dispatch('checkout', products)</span></div><div class="line"><span class="xml">    &#125;</span></div><div class="line"><span class="xml">  &#125;</span></div><div class="line"><span class="xml">&#125;</span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure><p>在来看看 product组件<br><figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"p in products"</span>&gt;</span></span></div><div class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123; p.title &#125;&#125;</span><span class="xml"> - </span><span class="template-variable">&#123;&#123; p.price | currency &#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></div><div class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span></span></span></div><div class="line"><span class="xml">        :disabled="!p.inventory"</span></div><div class="line"><span class="xml">        @click="addToCart(p)"&gt;</span></div><div class="line"><span class="xml">        Add to cart</span></div><div class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></div><div class="line"><span class="xml">import &#123; mapGetters, mapActions &#125; from 'vuex'</span></div><div class="line"><span class="xml">export default &#123;</span></div><div class="line"><span class="xml">  computed: mapGetters(&#123;</span></div><div class="line"><span class="xml">    products: 'allProducts'</span></div><div class="line"><span class="xml">  &#125;),</span></div><div class="line"><span class="xml">  methods: mapActions([</span></div><div class="line"><span class="xml">    'addToCart'</span></div><div class="line"><span class="xml">  ]),</span></div><div class="line"><span class="xml">  created () &#123;</span></div><div class="line"><span class="xml">    this.$store.dispatch('getAllProducts')</span></div><div class="line"><span class="xml">  &#125;</span></div><div class="line"><span class="xml">&#125;</span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>最后将这两个component 引入到app.vue<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Shopping Cart Example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Products<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">product-list</span>&gt;</span><span class="tag">&lt;/<span class="name">product-list</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">cart</span>&gt;</span><span class="tag">&lt;/<span class="name">cart</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></div><div class="line"><span class="xml">import ProductList from './ProductList.vue'</span></div><div class="line"><span class="xml">import Cart from './Cart.vue'</span></div><div class="line"><span class="xml">export default </span><span class="template-variable">&#123;</span></div><div class="line"><span class="template-variable">  components: &#123; ProductList, Cart &#125;</span><span class="xml"></span></div><div class="line"><span class="xml">&#125;</span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p><p>基本上这个demo就介绍完毕</p><p>下来我通过vue-cli初始化一个新项目，将上面所有的代码进行练习 谢谢大家欣赏。<br>代码已经上传<br><a href="https://github.com/qileilove/vuex-practice" target="_blank" rel="external">https://github.com/qileilove/vuex-practice</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小QA学习前端系列之练习实践vuex-shopping-cart&quot;&gt;&lt;a href=&quot;#小QA学习前端系列之练习实践vuex-shopping-cart&quot; class=&quot;headerlink&quot; title=&quot;小QA学习前端系列之练习实践vuex-shopping-
      
    
    </summary>
    
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>小QA学习前端系列之vuex</title>
    <link href="http://yoursite.com/2017/10/12/vuex/"/>
    <id>http://yoursite.com/2017/10/12/vuex/</id>
    <published>2017-10-12T13:51:51.000Z</published>
    <updated>2017-10-15T14:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个QA如何学习vuex"><a href="#一个QA如何学习vuex" class="headerlink" title="一个QA如何学习vuex"></a>一个QA如何学习vuex</h1><h2 id="什么vuex"><a href="#什么vuex" class="headerlink" title="什么vuex"></a>什么vuex</h2><p>其实之前也学习过redux，虽然redux已经把我看得云里雾里的，里面的educer 应该如何拆分、action 应该怎么定义、dispatch 异步怎么做、Ajax 怎么使用、middleware 什么时候需要用、enhancer 干什么的、高阶函数怎么这么多 等等一系列问题，就算是看懂了，放上半年又全还给度娘了，相反vuex却让我记忆犹新，vuex的api 我花半天时间，就已经理解的很透彻了，跟着getting started，已经可以把demo中todo-list搞定了。说了这么多，那么vuex到底是什么，vuex和redux一样都是用来管理状态的，只不过vuex只能用在vue项目中，redux则没有限制，如果你想在react项目使用类似vuex的框架，最近有一个MobX的框架可以值得一试，虽然我也没看，但是大神推荐了，应该没错。</p><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>以上是官方的解释，很清晰明了，想更进一步的话，我们需要知道vuex是基于flux架构，同时也吸收redux的一些优点，而redux又是基于flux的改进:</p><pre><code>把store和Dispatcher合并,结构更加简单清晰新增state角色，代表每个时间点store对应的值，对状态的管理更加明确</code></pre><p>Redux数据流的顺序是:</p><pre><code>View调用store.dispatch发起Action-&gt;store接受Action(action传入reducer函数,reducer函数返回一个新的state)-&gt;通知store.subscribe订阅的重新渲染函数</code></pre><p>Flux数据流的顺序是:</p><pre><code>View发起Action-&gt;Action传递到Dispatcher-&gt;Dispatcher将通知Store-&gt;Store的状态改变通知View进行改变而Vuex是专门为Vue设计的状态管理框架,同样基于Flux架构，并吸收了Redux的优点</code></pre><p>Vuex相对于Redux的不同点有:</p><pre><code>改进了Redux中的Action和Reducer函数，以mutations变化函数取代Reducer，无需switch,只需在对应的mutation函数里改变state值即可由于Vue自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的State即可</code></pre><p>Vuex数据流的顺序是:</p><pre><code>View调用store.commit提交对应的请求到Store中对应的mutation函数-&gt;store改变(vue检测到数据变化自动渲染)</code></pre><h2 id="vuex的核心概念"><a href="#vuex的核心概念" class="headerlink" title="vuex的核心概念"></a>vuex的核心概念</h2><p>Vuex 中 Store 的模板化定义如下：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue from <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Vuex from <span class="string">'vuex'</span></div><div class="line">Vue.use(Vuex)</div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  state: &#123;</div><div class="line">  &#125;,</div><div class="line">  actions: &#123;</div><div class="line">  &#125;,</div><div class="line">  mutations: &#123;</div><div class="line">  &#125;,</div><div class="line">  getters: &#123;</div><div class="line">  &#125;,  </div><div class="line">  modules: &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">export <span class="keyword">default</span> store</div></pre></td></tr></table></figure><ul><li>State</li><li>Getter</li><li>Mutation</li><li>Action</li><li>Module<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3>Vuex就是提供一个仓库，仓库里面放了很多对象。其中state就是数据源存放地，对应于与一般Vue对象里面的data（后面讲到的actions和mutations对应于methods）。<br>state: state 定义了应用状态的数据结构，同样可以在这里设置默认的初始状态。</li></ul><p>响应书存储：state里面存放的数据是响应式的，Vue组件从store中读取数据，若是store中的数据发生改变，依赖这个数据的组件也会发生更新。（这里“状态”=“数据”），也就是是说数据和视图是同步的。<br>例如:</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">state</span>: &#123;</div><div class="line">  projects: [],</div><div class="line">  <span class="keyword">user</span>Profile: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="在-Vue-组件中获得-Vuex-状态的几种方法"><a href="#在-Vue-组件中获得-Vuex-状态的几种方法" class="headerlink" title="在 Vue 组件中获得 Vuex 状态的几种方法"></a>在 Vue 组件中获得 Vuex 状态的几种方法</h4><p><code>通用方法:全局的放vuex，局部的放在component的data里</code></p><p>Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">const app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,</div><div class="line">  <span class="regexp">//</span> 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</div><div class="line">  store,</div><div class="line">  components: &#123; Counter &#125;,</div><div class="line">  template: `<span class="javascript"></span></div><div class="line"><span class="javascript">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"app"</span>&gt;</span></div><div class="line"><span class="javascript">      &lt;counter&gt;<span class="xml"><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span></span></div><div class="line"><span class="javascript">    &lt;<span class="regexp">/div&gt;</span></span></div><div class="line"><span class="javascript">  </span>`</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。让我们更新下 Counter 的实现：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const Counter = &#123;</div><div class="line">  template: `&lt;<span class="keyword">div</span>&gt;&#123;&#123; <span class="keyword">count</span> &#125;&#125;&lt;/<span class="keyword">div</span>&gt;`,</div><div class="line">  computed: &#123;</div><div class="line">    <span class="keyword">count</span> () &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.<span class="keyword">count</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h4><p>mapState的作用是把全局的 state 和 getters 映射到当前组件的 computed 计算属性中，this.$store.state。</p><p>使用示例</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"> import &#123;mapState&#125; <span class="keyword">from</span> 'vuex' </div><div class="line"> export <span class="keyword">default</span> &#123;</div><div class="line">  computer :</div><div class="line">  mapState(&#123;</div><div class="line">   count: <span class="keyword">state</span> =&gt; <span class="keyword">state</span>.count,</div><div class="line"></div><div class="line">    // 方法一 传字符串参数 'count' 等同于 `<span class="keyword">state</span> =&gt; <span class="keyword">state</span>.count`</div><div class="line">    countAlias: 'count',</div><div class="line"></div><div class="line">    // 方法二 为了能够使用 `this` 获取局部状态，必须使用常规函数</div><div class="line">    countPlusLocalState (<span class="keyword">state</span>) &#123;</div><div class="line">      return <span class="keyword">state</span>.count + this.localCount</div><div class="line">    &#125;,</div><div class="line">     // 映射 this.count 为 store.<span class="keyword">state</span>.count</div><div class="line">  'count'</div><div class="line"></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line">对象展开运算符</div><div class="line">import Vue <span class="keyword">from</span> 'vue'</div><div class="line">import Vuex <span class="keyword">from</span> 'vuex'</div><div class="line">import mutations <span class="keyword">from</span> './mutations'</div><div class="line">import actions <span class="keyword">from</span> './action'</div><div class="line">import getters <span class="keyword">from</span> './getters'</div><div class="line"></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line">const <span class="keyword">state</span> = &#123;</div><div class="line">    <span class="keyword">user</span>Info: &#123; phone: <span class="number">111</span> &#125;, //用户信息</div><div class="line">    orderList: [&#123; orderno: '<span class="number">1111</span>' &#125;], //订单列表</div><div class="line">    orderDetail: null, //订单产品详情</div><div class="line">    login: false, //是否登录</div><div class="line">&#125;</div><div class="line"></div><div class="line">export <span class="keyword">default</span> new Vuex.Store(&#123;</div><div class="line">    <span class="keyword">state</span>,</div><div class="line">    getters,</div><div class="line">    actions,</div><div class="line">    mutations,</div><div class="line">&#125;)</div><div class="line"></div><div class="line">computed: &#123;</div><div class="line">            ...mapState([</div><div class="line">                'orderList',</div><div class="line">                'login'</div><div class="line">            ]),</div><div class="line">        &#125;,   </div><div class="line">        mounted()&#123;  </div><div class="line">            console.<span class="keyword">log</span>(typeof orderList); ==&gt;undefind</div><div class="line">            console.<span class="keyword">log</span>(typeof this.orderList)==&gt;object</div><div class="line">        &#125;</div></pre></td></tr></table></figure><h3 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h3><p>一句话 getter就是用来进行数据过滤的，然后把过滤后的数据，共享给所有component。</p><p>所以getters是store的计算属性</p><p>getters过滤条件必须是bollean值.根据bolean的条件返回具体数据对象。</p><p>🌰🌰🌰🌰🌰🌰</p><p>定义：我们可以在store中定义getters，第一个参数是state</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  <span class="keyword">state</span>: &#123;</div><div class="line">    todos: [</div><div class="line">      &#123; id: <span class="number">1</span>, text: '...', done: true &#125;,</div><div class="line">      &#123; id: <span class="number">2</span>, text: '...', done: false &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  getters: &#123;</div><div class="line">    doneTodos: <span class="keyword">state</span> =&gt; &#123;</div><div class="line">      return <span class="keyword">state</span>.todos.filter(todo =&gt; todo.done)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>传参：定义的Getters会暴露为store.getters对象，也可以接受其他的getters作为第二个参数；<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">getters: &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  doneTodosCount: (state, getters) =&gt; &#123;</div><div class="line">    return getters<span class="selector-class">.doneTodos</span><span class="selector-class">.length</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">store<span class="selector-class">.getters</span><span class="selector-class">.doneTodosCount</span> <span class="comment">// -&gt; 1</span></div></pre></td></tr></table></figure></p><p>调用<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  doneTodosCount () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.doneTodosCount</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过mapGetters调用<br>mapGetters辅助函数仅仅是将store中的getters映射到局部计算属性中，用法和mapState类似</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line">computed: &#123;</div><div class="line">   <span class="comment">// 使用对象展开运算符将 getters 混入 computed 对象中</span></div><div class="line">    ...mapGetters([</div><div class="line">    <span class="string">'doneTodosCount'</span>,</div><div class="line">    <span class="string">'anotherGetter'</span>,])&#125;</div><div class="line"> <span class="comment">//给getter属性换名字</span></div><div class="line">  mapGetters(&#123;</div><div class="line"> <span class="comment">// 映射 this.doneCount 为 store.getters.doneTodosCount</span></div><div class="line">  doneCount: <span class="string">'doneTodosCount'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><p>在Vuex中store数据改变的唯一方法就是mutation</p><p>mutations,里面装着一些改变数据方法的集合，这是Veux设计很重要的一点，就是把处理数据逻辑方法全部放在mutations里面，使得数据和视图分离。</p><p>重要的原则就是要记住 mutation 必须是同步函数</p><p>如何使用</p><ul><li>mutation结构</li></ul><p>每一个mutation都有一个字符串类型的事件类型(type)和回调函数(handler)，也可以理解为{type:handler()},这和订阅发布有点类似。先注册事件，当触发响应类型的时候调用handker()，调用type的时候需要用到store.commit方法。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">    <span class="keyword">state</span>: &#123;</div><div class="line">        count: <span class="number">1</span></div><div class="line">        &#125;,</div><div class="line">    mutations: &#123;</div><div class="line">    increment (<span class="keyword">state</span>) &#123;      //注册事件，type:increment，handler第一个参数是<span class="keyword">state</span>；</div><div class="line">         // 变更状态</div><div class="line">       <span class="keyword">state</span>.count++&#125;&#125;&#125;)</div><div class="line">       </div><div class="line">    store.commit('increment')   //调用type，触发handler（<span class="keyword">state</span>）</div></pre></td></tr></table></figure><ul><li>载荷（payload)</li></ul><p>简单的理解就是往handler(stage)中传参handler(stage,pryload)；一般是个对象。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mutations: &#123;</div><div class="line">increment (<span class="keyword">state</span>, n) &#123;</div><div class="line">    <span class="keyword">state</span>.count += n&#125;&#125;</div><div class="line">store.commit('increment', <span class="number">10</span>)</div></pre></td></tr></table></figure><p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// ...</div><div class="line">mutations: &#123;</div><div class="line">  increment (<span class="keyword">state</span>, payload) &#123;</div><div class="line">    <span class="keyword">state</span>.count += payload.amount</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">store.commit('increment', &#123;</div><div class="line">  amount: <span class="number">10</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>对象风格的提交方式</li></ul><p>提交 mutation 的另一种方式是直接使用包含 type 属性的对象：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">store</span><span class="selector-class">.commit</span>(&#123;</div><div class="line">  <span class="attribute">type</span>: <span class="string">'increment'</span>,</div><div class="line">  amount: <span class="number">10</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mutations: &#123;</div><div class="line">  increment (<span class="keyword">state</span>, payload) &#123;</div><div class="line">    <span class="keyword">state</span>.count += payload.amount</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Mutation 需遵守 Vue 的响应规则</li></ul><p>最好提前在你的 store 中初始化好所有所需属性。</p><p>当需要在对象上添加新属性时，你应该</p><p>使用 Vue.set(obj, ‘newProp’, 123), 或者以新对象替换老对象。例如，利用 stage-3 的对象展开运算符我们可以这样写：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">state</span>.obj = &#123; ...<span class="keyword">state</span>.obj, newProp: <span class="number">123</span> &#125;</div></pre></td></tr></table></figure><ul><li>使用常量替代 Mutation 事件类型</li></ul><p>将常量放在单独的文件中，方便协作开发。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// mutation-types.js</div><div class="line">export const SOME_MUTATION = 'SOME_MUTATION'</div><div class="line"></div><div class="line">// store.js</div><div class="line">import Vuex <span class="keyword">from</span> 'vuex'</div><div class="line">import &#123; SOME_MUTATION &#125; <span class="keyword">from</span> './mutation-types'</div><div class="line"></div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  <span class="keyword">state</span>: &#123; ... &#125;,</div><div class="line">  mutations: &#123;</div><div class="line">    // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</div><div class="line">    [SOME_MUTATION] (<span class="keyword">state</span>) &#123;</div><div class="line">      // mutate <span class="keyword">state</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>在组件中提交 Mutation</li></ul><p>提交可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="regexp">//</span> ...</div><div class="line">  methods: &#123;</div><div class="line">    ...mapMutations([</div><div class="line">      <span class="string">'increment'</span>, <span class="regexp">//</span> 将 `<span class="javascript"><span class="keyword">this</span>.increment()</span>` 映射为 `<span class="javascript"><span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span>`</div><div class="line"></div><div class="line">      <span class="regexp">//</span> `<span class="javascript">mapMutations</span>` 也支持载荷：</div><div class="line">      <span class="string">'incrementBy'</span> <span class="regexp">//</span> 将 `<span class="javascript"><span class="keyword">this</span>.incrementBy(amount)</span>` 映射为 `<span class="javascript"><span class="keyword">this</span>.$store.commit(<span class="string">'incrementBy'</span>, amount)</span>`</div><div class="line">    ]),</div><div class="line">    ...mapMutations(&#123;</div><div class="line">      add: <span class="string">'increment'</span> <span class="regexp">//</span> 将 `<span class="javascript"><span class="keyword">this</span>.add()</span>` 映射为 `<span class="javascript"><span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</span>`</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><p>前面我们讲了mutation中是存放处理数据的方法的集合，我们使用的时候需要commit。但是commit是同步函数，而且只能是同步执行。</p><p>所以action出现了。在actions中提交mutation，并且可以包含任何的异步操作。actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据（但是还是通过mutation来操作，因为只有它能操作）</p><p>定义actions<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">const store = new Vuex.Store(&#123;//创建store实例</div><div class="line">      <span class="keyword">state</span>: &#123;</div><div class="line">         count: <span class="number">0</span></div><div class="line">             &#125;,</div><div class="line">      mutations: &#123;                </div><div class="line">         increment (<span class="keyword">state</span>) &#123;</div><div class="line">          <span class="keyword">state</span>.count++</div><div class="line">         &#125;,</div><div class="line">         sub(<span class="keyword">state</span>)&#123;</div><div class="line">    <span class="keyword">state</span>.count--;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">          &#125;,</div><div class="line">      actions: &#123;         //只是提交`commit`了`mutations`里面的方法。</div><div class="line">         increment (context) &#123;</div><div class="line">          context.commit('increment')</div><div class="line">   &#125;,</div><div class="line">   subplus(&#123;commit&#125;)&#123;</div><div class="line">    commit('sub');</div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line">    &#125;)</div><div class="line"> </div><div class="line"> Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.<span class="keyword">state</span> 和 context.getters 来获取 <span class="keyword">state</span> 和 getters。当我们在之后介绍到 Modules 时，你就知道 context 对象为什么不是 store 实例本身了。</div><div class="line"></div><div class="line">  一般我们会简写成这样</div><div class="line">  actions: &#123;</div><div class="line">   increment (&#123; commit &#125;) &#123;</div><div class="line">         commit('increment')</div><div class="line">      &#125;,</div><div class="line">subplus(&#123;commit&#125;)&#123;</div><div class="line">    commit('sub')</div><div class="line">  &#125;</div><div class="line">         &#125;</div></pre></td></tr></table></figure></p><h2 id="分发-Action"><a href="#分发-Action" class="headerlink" title="分发 Action"></a>分发 Action</h2><p>Action 通过 store.dispatch 方法触发：</p><p><code>store.dispatch(&#39;increment&#39;)</code></p><p>乍一眼看上去感觉多此一举，我们直接分发 mutation 岂不更方便？实际上并非如此，还记得 mutation 必须同步执行这个限制么？Action 就不受约束！我们可以在 action 内部执行异步操作：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">  incrementAsync (&#123; commit &#125;) &#123;</div><div class="line">    setTimeout(() =&gt; &#123;</div><div class="line">      commit(<span class="string">'increment'</span>)</div><div class="line">    &#125;, <span class="number">1000</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Actions 支持同样的载荷方式和对象方式进行分发：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以载荷形式分发</span></div><div class="line"><span class="selector-tag">store</span><span class="selector-class">.dispatch</span>(<span class="string">'incrementAsync'</span>, &#123;</div><div class="line">  <span class="attribute">amount</span>: <span class="number">10</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>// 以对象形式分发<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">store</span><span class="selector-class">.dispatch</span>(&#123;</div><div class="line">  <span class="attribute">type</span>: <span class="string">'incrementAsync'</span>,</div><div class="line">  amount: <span class="number">10</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><ul><li>在组件中分发 Action<br>你在组件中使用 this.$store.dispatch(‘xxx’) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）：<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="regexp">//</span> ...</div><div class="line">  methods: &#123;</div><div class="line">    ...mapActions([</div><div class="line">      <span class="string">'increment'</span>, <span class="regexp">//</span> 将 `<span class="javascript"><span class="keyword">this</span>.increment()</span>` 映射为 `<span class="javascript"><span class="keyword">this</span>.$store.dispatch(<span class="string">'increment'</span>)</span>`</div><div class="line"></div><div class="line">      <span class="regexp">//</span> `<span class="javascript">mapActions</span>` 也支持载荷：</div><div class="line">      <span class="string">'incrementBy'</span> <span class="regexp">//</span> 将 `<span class="javascript"><span class="keyword">this</span>.incrementBy(amount)</span>` 映射为 `<span class="javascript"><span class="keyword">this</span>.$store.dispatch(<span class="string">'incrementBy'</span>, amount)</span>`</div><div class="line">    ]),</div><div class="line">    ...mapActions(&#123;</div><div class="line">      add: <span class="string">'increment'</span> <span class="regexp">//</span> 将 `<span class="javascript"><span class="keyword">this</span>.add()</span>` 映射为 `<span class="javascript"><span class="keyword">this</span>.$store.dispatch(<span class="string">'increment'</span>)</span>`</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>背景：在Vue中State使用是单一状态树结构，应该的所有的状态都放在state里面，如果项目比较复杂，那state是一个很大的对象，store对象也将对变得非常大，难于管理。</p><p>module：可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">const moduleA = &#123;</div><div class="line">  <span class="keyword">state</span>: &#123; ... &#125;,</div><div class="line">  mutations: &#123; ... &#125;,</div><div class="line">  actions: &#123; ... &#125;,</div><div class="line">  getters: &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const moduleB = &#123;</div><div class="line">  <span class="keyword">state</span>: &#123; ... &#125;,</div><div class="line">  mutations: &#123; ... &#125;,</div><div class="line">  actions: &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  modules: &#123;</div><div class="line">    a: moduleA,</div><div class="line">    b: moduleB</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">store.<span class="keyword">state</span>.a // -&gt; moduleA 的状态</div><div class="line">store.<span class="keyword">state</span>.b // -&gt; moduleB 的状态</div></pre></td></tr></table></figure></p><p>模块的局部状态</p><p>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态对象。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  <span class="keyword">state</span>: &#123; count: <span class="number">0</span> &#125;,</div><div class="line">  mutations: &#123;</div><div class="line">    increment (<span class="keyword">state</span>) &#123;</div><div class="line">      // 这里的 `<span class="keyword">state</span>` 对象是模块的局部状态</div><div class="line">      <span class="keyword">state</span>.count++</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  getters: &#123;</div><div class="line">    doubleCount (<span class="keyword">state</span>) &#123;</div><div class="line">      return <span class="keyword">state</span>.count * <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于模块内部的 action，局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  // ...</div><div class="line">  actions: &#123;</div><div class="line">    incrementIfOddOnRootSum (&#123; <span class="keyword">state</span>, commit, rootState &#125;) &#123;</div><div class="line">      if ((<span class="keyword">state</span>.count + rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</div><div class="line">        commit('increment')</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  // ...</div><div class="line">  getters: &#123;</div><div class="line">    sumWithRootCount (<span class="keyword">state</span>, getters, rootState) &#123;</div><div class="line">      return <span class="keyword">state</span>.count + rootState.count</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>命名空间</p><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p><p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为命名空间模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。例如：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">const store = new Vuex.Store(&#123;</div><div class="line"><span class="symbol">  modules:</span> &#123;</div><div class="line"><span class="symbol">    account:</span> &#123;</div><div class="line"><span class="symbol">      namespaced:</span> true,</div><div class="line"></div><div class="line">      <span class="comment">// 模块内容（module assets）</span></div><div class="line"><span class="symbol">      state:</span> &#123; ... &#125;, <span class="comment">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span></div><div class="line"><span class="symbol">      getters:</span> &#123;</div><div class="line">        isAdmin () &#123; ... &#125; <span class="comment">// -&gt; getters['account/isAdmin']</span></div><div class="line">      &#125;,</div><div class="line"><span class="symbol">      actions:</span> &#123;</div><div class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; dispatch('account/login')</span></div><div class="line">      &#125;,</div><div class="line"><span class="symbol">      mutations:</span> &#123;</div><div class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; commit('account/login')</span></div><div class="line">      &#125;,</div><div class="line"></div><div class="line">      <span class="comment">// 嵌套模块</span></div><div class="line"><span class="symbol">      modules:</span> &#123;</div><div class="line">        <span class="comment">// 继承父模块的命名空间</span></div><div class="line"><span class="symbol">        myPage:</span> &#123;</div><div class="line"><span class="symbol">          state:</span> &#123; ... &#125;,</div><div class="line"><span class="symbol">          getters:</span> &#123;</div><div class="line">            profile () &#123; ... &#125; <span class="comment">// -&gt; getters['account/profile']</span></div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// 进一步嵌套命名空间</span></div><div class="line"><span class="symbol">        posts:</span> &#123;</div><div class="line"><span class="symbol">          namespaced:</span> true,</div><div class="line"></div><div class="line"><span class="symbol">          state:</span> &#123; ... &#125;,</div><div class="line"><span class="symbol">          getters:</span> &#123;</div><div class="line">            popular () &#123; ... &#125; <span class="comment">// -&gt; getters['account/posts/popular']</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>带命名空间的绑定函数</p><p>当使用 mapState, mapGetters, mapActions 和 mapMutations 这些函数来绑定命名空间模块时，写起来可能比较繁琐：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  ...mapState(&#123;</div><div class="line">    a: <span class="keyword">state</span> =&gt; <span class="keyword">state</span>.some.nested.module.a,</div><div class="line">    b: <span class="keyword">state</span> =&gt; <span class="keyword">state</span>.some.nested.module.b</div><div class="line">  &#125;)</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">  ...mapActions([</div><div class="line">    'some/nested/module/foo',</div><div class="line">    'some/nested/module/bar'</div><div class="line">  ])</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于这种情况，你可以将模块的空间名称字符串作为第一个参数传递给上述函数，这样所有绑定都会自动将该模块作为上下文。于是上面的例子可以简化为：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  ...mapState('some/nested/module', &#123;</div><div class="line">    a: <span class="keyword">state</span> =&gt; <span class="keyword">state</span>.a,</div><div class="line">    b: <span class="keyword">state</span> =&gt; <span class="keyword">state</span>.b</div><div class="line">  &#125;)</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">  ...mapActions('some/nested/module', [</div><div class="line">    'foo',</div><div class="line">    'bar'</div><div class="line">  ])</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">```而且，你可以通过使用 createNamespacedHelpers 创建基于某个命名空间辅助函数。它返回一个对象，对象里有新的绑定在给定命名空间值上的组件绑定辅助函数：</div></pre></td></tr></table></figure><p>import { createNamespacedHelpers } from ‘vuex’</p><p>const { mapState, mapActions } = createNamespacedHelpers(‘some/nested/module’)</p><p>export default {<br>  computed: {<br>    // 在 <code>some/nested/module</code> 中查找<br>    …mapState({<br>      a: state =&gt; state.a,<br>      b: state =&gt; state.b<br>    })<br>  },<br>  methods: {<br>    // 在 <code>some/nested/module</code> 中查找<br>    …mapActions([<br>      ‘foo’,<br>      ‘bar’<br>    ])<br>  }<br>}</p><p>```</p><p>以上便是我2天来学习vuex的心得，大部分参考的是官方的文档，不得不说vuex的文档比redux文档容易理解多，接下来我会把官方的列子购物车玩一下，然后自己在写一个todo-list,vue2 还是大略的过了一遍，还是要写个小项目熟悉框架，一个QA在前端的路途上越走越远，希望学到前端知识能够帮我在测试和自动化的道路上有所突破。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一个QA如何学习vuex&quot;&gt;&lt;a href=&quot;#一个QA如何学习vuex&quot; class=&quot;headerlink&quot; title=&quot;一个QA如何学习vuex&quot;&gt;&lt;/a&gt;一个QA如何学习vuex&lt;/h1&gt;&lt;h2 id=&quot;什么vuex&quot;&gt;&lt;a href=&quot;#什么vuex&quot;
      
    
    </summary>
    
    
      <category term="大前端" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>2017年qa应掌握的技能</title>
    <link href="http://yoursite.com/2017/04/06/devopsforqa/"/>
    <id>http://yoursite.com/2017/04/06/devopsforqa/</id>
    <published>2017-04-06T03:24:00.000Z</published>
    <updated>2017-09-25T09:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DevOps-amp-敏捷方法"><a href="#DevOps-amp-敏捷方法" class="headerlink" title="DevOps &amp; 敏捷方法"></a>DevOps &amp; 敏捷方法</h2><p>随着对于在交付期限内完成项目的迫切需求，测试人员需要学习敏捷方法和DevOps，因为它们可以帮助促进团队之间的协作和改进迭代间工作模式。敏捷方法为测试项目提供了项目开发所需要速度与效率，而DevOps可以从开发，分析和质量保证流程中协助跨职能的团队合作，从而在更短的时间内产生出高质量的产品。此外，学习这些方法最终消除了角色间僵化和孤岛，让团队密切关注开发流程和持续发布。<br><img src="/image/timg.jpeg" alt="devops"><br>向上面devops工作流一样，devops 打通项目流程每一个环节，从代码的管理，到build、test 到最好部署到prod环境，对于qa来说，了解其中的流程，对于qa工作有非常的好处，通过devops一些监控工具例如airbrake我们可以实施查看系统发生的问题，与dev一起分析问题发生的原因，通过GA newrelic这些工具，我们可以分析系统用户行为，给系统性能测试与分析提供数据上的支持。通过对于了解devops工作流，我们可以分析项目中存在风险，及时改进流程，通过docker等容器化的工具，我们可以将测试放到容器中执行，降低测试对于环境的依赖，进一步改进自动化测试，所以说了解devops知识对于qa来说百利无一害，何乐而不为呢。</p><p>自动化<br>面对应用程序日益增加复杂性和系统集成，依靠手动测试已经无法完成全部测试工作。为了测试浏览器兼容性，性能，无头以及数据库和集成层面，测试人员应该学习自动化相关的技能，因为它可以提供业务逻辑和技术层面更高更准确更可靠支持。此外，还有几种自动化测试工具专门支持特定领域的测试类型，并具有快速高效地完成任务的功能。<br><img src="/image/selenium.jpg" alt="selenium"><br>如上图，很多QA或者tester有一个误区，提到自动化张嘴闭嘴都是selenium，甚至有的人连webdriver与selenium区别都不知道，所以这里我要澄清，ui自动化测试只是自动化测试中的一小部分，还包括api，接口，单元测试，集成测试，甚至性能测试我们都应该称为自动化测试。</p><p>网络与移动技术<br><img src="/image/webandmobile.jpeg" alt="webandmobile"></p><p>每个测试人员还必须熟悉web和mobile相关技术，以便他们能够更好了解应用程序的类型与架构，如何构建，以及相应的可扩展性，并为以后测试提供相应背景知识。这对于测试人员非常重要，因为它能够指导QA理解项目架构与所面临技术挑战，提供更有效的QA解决方案。<br>这里学问更多，完全是两大方向，知识领域都非常的广大，例如web端我们可能要测试不同浏览器兼容性，对于mobile来说，尤其是android这种版本碎片化以及各种自定义系统以及ui改更能会造成各种个样的问题，对于mobile我们甚至要考虑更多场景，例如app是否具有内存泄露，电量消耗的快慢，横竖屏的影响等等。不同构建工具，开发环境的区别等对于qa来说又要面对一堆未知领域，没事，继续加油。</p><p>SDLC 软件开发生命周期（Systems Development Life Cycle）<br><img src="/image/sdlc.jpeg" alt="sdlc"></p><p>测试人员也被建议学习软件生命周期管理技能，这将有助于QA更轻松了解应用程序开发任务和测试计划周期。对SDLC周期的深入了解还有助于预测应用程序的复杂性，从而提前采取正确的措施。因此，测试人员还必须学习适用于项目开发生命周期流程的几种开发方法，如瀑布，看板，Scrum，精益等。<br>作为一个qa,我们应关注软件开发生命周期中的每一步，了解敏捷开发迭代中的各个环节及时作出反馈，所以有时qa也需要承担scrum master的责任，例如某个story进度超过预定期限未完成，我们就应当了解原因，及时与团队成员以及客户沟通。</p><p>理性分析与逻辑思维<br><img src="/image/logic.jpeg" alt="sdlc"><br>为了保持竞争力，QA还应该学使用理性，分析性和逻辑性思维来思考问题，因为这些技能在测试应用时可以帮助QA识别错误，了解问题的复杂性，评估应用程序的不熟悉的功能并相应地进行测试。具有良好的分析和推理能力有助于根据在不同场景下验证应用程序，并根据预先定义的标准来评估应用程序。这进一步有助于评估相关信息，提出明确的问题，确定优势和弱点，而不会持有偏见，这有助于实施正确的行动方案和解决方案。</p><p>社交网络<br><img src="/image/contact.jpeg" alt="contact"><br>任何行业的任何专业人士都需要社交网络技能。由于社交网络可以即时访问讨论，资源和内容，因此在这方面的技巧有助于与其它QA进行互动，学习新事物并更新自己的知识体系的广度与深度。拥有社交网络技能还可让您与各种专家进行交流，交流疑问，当然也可以建立长期的合作关系，帮助您的专业技能和企业达到所需目标。</p><p>测试工具和技术<br><img src="/image/tools.jpg" alt="tools"><br>每个QA都必须了解不同的测试技术和使用工具。无论你的项目属于那个领域和应用程序类型，都应具有黑盒测试，渗透测试，安全测试，系统测试，单元测试等，测试人员具有多功能性，可以帮助他们在任何类型的项目上工作。此外，随着商业化的专业测试工具数量的增加，例如bug跟踪工具，测试管理工具，GUI测试工具，自动化工具等，测试人员可以了解这些工具的特点，选择适用于所在项目需求工具，以满足不同的需求和复杂性。</p><p>编程<br><img src="/image/coding.jpeg" alt="tools"></p><p>当我们谈论编程时，QA当然不会像开发人员一样工作，但是QA需要理解应用程序的实现原理与项目架构，这样我们可以更容易的创建所需的测试。编程知识有助于识别应用程序代码中的可能发生的错误，这就进一步降低了应用程序发生错误的概率。所以建议学习至少两种编程语言，这样的话测试人员就能够更好的了解应用程序的解决方案，以确保的应用程序生命周期的质量。</p><p>沟通 - 书面和口头<br><img src="/image/communicate.jpeg" alt="communicate"></p><p>每个QA还应具备良好的沟通能力。通过良好的沟通，对于项目的所有角色来说，QA应该是一个好的作家，演讲者，听众和读者，例如将项目的状态更新给客户，向团队通知story的需求变更，与开发人员交流bug的细节，将需求文档转化为测试用例，准备测试报告等。除此之外，良好的沟通有助于表现出个人高度的理解能力，进一步帮助QA在逻辑思维和理性分析基础上向技术人员和非技术人员提供反馈意见。</p><p>智力与创意<br>软件测试并不是一个程序化或平凡的任务，而是一个需要创造力和逻辑分析的过程。智力和创造力无法改变，但是，可以通过质疑应用程序行为并分析应用程序的不同方面来了解其工作原理。另外，通过设计一些应用场景，测试人员可以尝试探索性测试，来识别更多缺陷，并寻求提供有效产品质量的可能解决方案。</p><p>测试计划和文档</p><p>测试计划和文档对于每个QA至关重要，因为它有助于确定正确的需求以及采取合理的步骤。此外还可以帮助跟踪需求变化，检查测试过程和跟踪偏差，并有助于报告和记录工作。一个记录良好的测试过程也可以帮助个别测试者和企业将正确的预算和资源分配给一个项目，这就是为什么测试计划和文档技能是每个测试人员必须学习的重要技能之一。</p><p>项目管理<br>学习项目管理的技能，帮助QA提高对于处理问题的能力。例如项目中某个环节发生问题，通过项目管理技能，能够及时的分析问题影响广度，及时寻找相关人员协作处理问题，项目管理技能有助于QA了解项目流程中所存在的问题，来帮助更好改进整个测试过程。</p><p>客户支持<br><img src="/image/customers.jpeg" alt="customers"></p><p>与过去项目有所不同，现代测试项目要求QA提供客户支持并从他们的角度思考。作为QA并不意味着我只是关心功能是否正确，因为测试项目的成功或失败因素很多，而不仅仅只是局限于功能层面，因此QA应及时应对和支持客户提出的需求，并所他们角度思考哪些方面仍然需要改善。</p><p>报告<br><img src="/image/report.jpeg" alt="report"><br>优秀的QA必须拥有良好报告技能，才能向项目的成员与客户提供测试项目和被测试应用的确切状态。这种报告实践可以更好地协调整个测试项目，同时也为高层管理人员提供执行详细的数据，例如测试用例覆盖率，bug的数量，发布时间表等，最终有助于其做出正确的决策。</p><p>独立工作<br>最后，QA应该学习如何独立工作的技能。这将提高他们从需求理解（技术和业务需求）到产出的最终交付工作的能力，采取正确的步骤，在没有他人的帮助或经理的监督。学习独立工作将会增加对他们的信心。</p><p>无论经验多少，QA都应努力不断学习和提高软件测试技能和知识。无论是自学习还是参与培训计划，测试人员应不断学习新的方法，以提高测试工作中的效率，并继续应用新技能和学习，使自己处于领先地位。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DevOps-amp-敏捷方法&quot;&gt;&lt;a href=&quot;#DevOps-amp-敏捷方法&quot; class=&quot;headerlink&quot; title=&quot;DevOps &amp;amp; 敏捷方法&quot;&gt;&lt;/a&gt;DevOps &amp;amp; 敏捷方法&lt;/h2&gt;&lt;p&gt;随着对于在交付期限内完成项目
      
    
    </summary>
    
    
      <category term="devops" scheme="http://yoursite.com/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/02/16/code-coverage/"/>
    <id>http://yoursite.com/2017/02/16/code-coverage/</id>
    <published>2017-02-16T02:32:59.000Z</published>
    <updated>2017-09-25T09:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>title: 100% code coverage != 100% test<br>date: 2017-02-16 10:32:59<br>tags:</p><h2 id="QA"><a href="#QA" class="headerlink" title="  - QA"></a>  - QA</h2><h1 id="100-code-coverage-100-test"><a href="#100-code-coverage-100-test" class="headerlink" title="100% code coverage != 100% test"></a>100% code coverage != 100% test</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><img src="http://upload-images.jianshu.io/upload_images/3732075-d1c1bc5652c294e5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="avatar"></p><p>很多人看到这个标题时，就在想你都100%代码覆盖了，怎么还会有问题呢？</p><p>让我们看看一下代码栗子：</p><p><strong>Code example</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCalculator</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="built_in">Double</span> add(<span class="built_in">Double</span> a, <span class="built_in">Double</span> b) &#123;</div><div class="line"></div><div class="line"><span class="keyword">return</span> a + b;&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再让我们看看用junit写出的测试代码：</p><p>@Test</p><p>public void testAdd() {</p><p>Double a = new Double(1);</p><p>Double b = new Double(2);</p><p>Double c = new Double(3);</p><p>assertEquals(c, testCalculator.add(a, b));</p><p>}<br>当我们在Eclipse使用 EclEmme Code Coverage 插件测试时， 对于这个类我们将得到 100% Line-Coverage.<br><img src="http://upload-images.jianshu.io/upload_images/3732075-236eb1a30b91a0a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="avatar"></p><p>一切看起来都那么的完美，真是这样的吗？</p><p>好吧，让我们来来看看另一个测试，当其中一个变量为null时，返回值将会怎样？</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> testAddNullPointerException() &#123;</div><div class="line"></div><div class="line"><span class="keyword">Double</span> a = <span class="keyword">new</span> <span class="keyword">Double</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">Double</span> b = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">Double</span> c = <span class="keyword">new</span> <span class="keyword">Double</span>(<span class="number">3</span>);</div><div class="line"></div><div class="line">assertEquals(c, testCalculator.add(a, b));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>好了，你会发现尽管你的覆盖率为100%，但程序却抛出了NullPointerException异常。</p><p>对于很多PM来说会选择第一个测试代码,因为100%的单元测试覆盖率总比50%的测试代码要更好!</p><p>但是这有用么？我们可能忽略了更重要的业务场景测试。</p><p>哈哈，小小的嘲讽了部分PM。</p><p>我们应当转换下思维，思考以下问题。</p><p><strong>100%的覆盖率并不意味你的测试代码质量很高，上面那个列子就是典型。</strong></p><p><strong>100%的覆盖率并不意味着所有的业务场景都被覆盖。</strong></p><p><strong>对于项目我们是否有足够的测试？</strong><br><img src="http://upload-images.jianshu.io/upload_images/3732075-b6a0abab1778f170.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="avatar"></p><p>这里的测试不仅仅包括代码级别的单元测试，还要集成测试，接口测试，黑盒测试，可用性测试等等。只有全部得测试通过后，才能说明功能的完整性，仅仅单一的单元测试，对于整个项目来说，基本没用。</p><p><strong>所以100%的代码覆盖率值得追求吗?</strong><br><img src="http://upload-images.jianshu.io/upload_images/3732075-80f3e850430d8615.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="avatar"></p><p>  是的，这应该是每个程序猿毕生追求的之一，但是如果从项目角度考虑，ROI(投入产出比)，如果你的项目是一个短期项目，需要快速上线，那么这时候你需要注重的是测试应覆盖核心功能代码。如果你的项目是一个长期项目，那么高覆盖率是非要有必要的，它意味着可维护性，以及更少的bug。(前提是你的测试采用TDD/BDD方式编写，我见过将测试代码写的一团糟的人，看着他的代码，我宁愿重新一遍)</p><p><strong>那么对于一个项目来说覆盖率应该达到多少？</strong></p><p>  其实没有具体数值能够覆盖到所有的项目，每个项目都应有自己的阈值，但共性是，必须测试必须覆盖主要业务场景，代码的逻辑分支也必须覆盖。</p><p><strong>如何改进你的项目代码覆盖率？</strong></p><p>  阅读和理解项目代码，找出其中需要测试并且与业务强相关的代码。</p><p>  将之前可读性差测试代码，采用TDD与BDD方式进行重写，提高项目的可维护性与可读性。</p><p><strong>代码覆盖率非常重要的意义在于：</strong></p><p>  分析未覆盖部分的代码，从而反推在前期黑盒测试设计是否充分，没有覆盖到的代码是否是测试设计的盲点，为什么没有考虑到？是需求/设计不够清晰，还是测试设计的理解有误。</p><p>  检测出程序中的废代码，可以逆向反推在代码设计中不合理的地方，提醒设计/开发人员理清代码逻辑关系，提升代码质量。</p><p>  代码覆盖率高不能说明代码质量高，但是反过来看，代码覆盖率低，代码质量绝对不会高到哪里去，可以作为测试自我审视的重要工具之一。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: 100% code coverage != 100% test&lt;br&gt;date: 2017-02-16 10:32:59&lt;br&gt;tags:&lt;/p&gt;
&lt;h2 id=&quot;QA&quot;&gt;&lt;a href=&quot;#QA&quot; class=&quot;headerlink&quot; title=&quot;  - 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>espresso-api之Matchers探究</title>
    <link href="http://yoursite.com/2016/12/25/espresso4/"/>
    <id>http://yoursite.com/2016/12/25/espresso4/</id>
    <published>2016-12-25T13:00:09.000Z</published>
    <updated>2017-09-25T09:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过前3篇文章，大家应该对espresso有了大体上的了解，那么今天我们要深入了解它的API，看看espresso的整体架构。<br>还是通过espresso cheat sheet来进入本次话题。</p><p><img src="/image/espresso-cheat-sheet-2.1.0.png" alt=""></p><p>Espresso备忘单是您在开发过程中可以使用的快速参考。 这个备忘单包含大多数可用的Matchers，ViewActions和ViewAsertions。<br>让我们先来看看Matchers 都有哪些API可供我们使用。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">android.support.test.espresso.matcher</div><div class="line">Classes</div><div class="line">BoundedMatcher&lt;T, S extends T&gt;Some matcher sugar <span class="keyword">that</span> lets you create a matcher <span class="keyword">for</span> a <span class="keyword">given</span> type <span class="keyword">but</span> only process items <span class="keyword">of</span> a specific subtype <span class="keyword">of</span> <span class="keyword">that</span> matcher.</div><div class="line">CursorMatchersA collection <span class="keyword">of</span> Hamcrest matchers <span class="keyword">that</span> matches a data row <span class="keyword">in</span> a Cursor.</div><div class="line">CursorMatchers.CursorMatcherA Matcher <span class="keyword">that</span> matches Cursors based <span class="keyword">on</span> values <span class="keyword">in</span> their columns.</div><div class="line">LayoutMatchersA collection <span class="keyword">of</span> hamcrest matches <span class="keyword">to</span> detect typical layout issues.</div><div class="line">PreferenceMatchersA collection <span class="keyword">of</span> hamcrest matchers <span class="keyword">that</span> match Preferences.</div><div class="line">RootMatchersA collection <span class="keyword">of</span> matchers <span class="keyword">for</span> Root objects.</div><div class="line">ViewMatchersA collection <span class="keyword">of</span> hamcrest matchers <span class="keyword">that</span> match Views.</div><div class="line">Enums</div><div class="line">ViewMatchers.VisibilityEnumerates <span class="keyword">the</span> possible <span class="built_in">list</span> <span class="keyword">of</span> values <span class="keyword">for</span> View.getVisibility().</div></pre></td></tr></table></figure></p><p>7个类，1个Eums。接下来我们一个个欣赏谷歌大神的杰作。</p><p><code>BoundedMatcher&lt;T, S extends T&gt;</code><br>一些匹配语法糖，允许您为给定类型创建匹配器，但只能处理该匹配器的特定子类型项。换句话说，就是能够自定义一些匹配器。<br>举个栗子，以下是一个自定义错误文本匹配器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorTextMatchers</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Returns a matcher that matches &#123;<span class="doctag">@link</span> TextView&#125;s based on text property value.</span></div><div class="line"><span class="comment">   *</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> stringMatcher &#123;<span class="doctag">@link</span> Matcher&#125; of &#123;<span class="doctag">@link</span> String&#125; with text to match</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="meta">@NonNull</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Matcher&lt;View&gt; <span class="title">withErrorText</span><span class="params">(<span class="keyword">final</span> Matcher&lt;String&gt; stringMatcher)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BoundedMatcher&lt;View, TextView&gt;(TextView.class) &#123;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">describeTo</span><span class="params">(<span class="keyword">final</span> Description description)</span> </span>&#123;</div><div class="line">        description.appendText(<span class="string">"with error text: "</span>);</div><div class="line">        stringMatcher.describeTo(description);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matchesSafely</span><span class="params">(<span class="keyword">final</span> TextView textView)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> stringMatcher.matches(textView.getError().toString());</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>实现的主要细节如下。 我们通过从withErrorText()返回一个BoundedMatcher来确保匹配器只匹配TextView类的子类。 这使得很容易在BoundedMatcher.matchesSafely()中实现匹配逻辑本身：只需从TextView中获取getError()方法并将其送入下一个匹配器。 最后，我们有一个简单的describeTo()方法的实现，它只用于生成调试输出到控制台。<br><code>CursorMatchers</code><br>Hamcrest的集合匹配器，在Cursor匹配相应的数据行。<br>源码如下<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">   * Returns a matcher that matches <span class="keyword">a</span> &#123;@<span class="literal">link</span> String&#125; <span class="keyword">value</span> <span class="keyword">at</span> <span class="keyword">a</span> <span class="keyword">given</span> <span class="keyword">column</span> <span class="keyword">index</span></div><div class="line">   * in <span class="keyword">a</span> &#123;@<span class="literal">link</span> Cursor&#125;<span class="keyword">s</span> <span class="keyword">data</span> <span class="keyword">row</span>.</div><div class="line">   * &lt;br&gt;</div><div class="line">   * @param columnIndex int column index</div><div class="line">   * @param value <span class="keyword">a</span> &#123;@<span class="literal">link</span> String&#125; <span class="keyword">value</span> <span class="keyword">to</span> <span class="keyword">match</span></div><div class="line">   */</div><div class="line">  public static CursorMatcher withRowString(int columnIndex, String value) &#123;</div><div class="line">    return withRowString(columnIndex, is(value));</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>大部分的场景，大多发生于表单或者滚动menu时。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">onData(</div><div class="line">    is(<span class="name">instanceOf</span>(<span class="name">Cursor</span>.class)),</div><div class="line">    CursorMatchers.withRowString(<span class="string">"job_title"</span>, is(<span class="string">"Barista"</span>))</div><div class="line">)<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>LayoutMatchers hamcrest的集合匹配以检测典型的布局问题。<br>   例如匹配具有椭圆形文本的TextView元素。 如果文本太长，无法适应TextView，<br>    它可以是椭圆形（’Too long’显示为’Too l …’或’… long’）或切断（’Too<br>    long“显示为”Too l“）。 虽然在某些情况下可以接受，但通常表示不好的用户体验。</p><p>PreferenceMatchers hamcrest匹配器来匹配一组偏好。<br>Preference组件其实就是Android常见UI组件与SharePreferences的组合封装实现。<br><code>onData(Matchers.&lt;Object&gt;allOf(PreferenceMatchers.withKey(&quot;setting-name&quot;))).perform(click());</code><br>PreferenceMatchers还有以下方法可以应用到其他场景<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">withSummary</span><span class="params">(final int resourceId)</span></span></div><div class="line"><span class="function"><span class="title">withSummaryText</span><span class="params">(String summary)</span></span></div><div class="line"><span class="function"><span class="title">withSummaryText</span><span class="params">(final Matcher&lt;String&gt; summaryMatcher)</span></span></div><div class="line"><span class="function"><span class="title">withTitle</span><span class="params">(final int resourceId)</span></span></div><div class="line"><span class="function"><span class="title">withTitleText</span><span class="params">(String title)</span></span></div><div class="line"><span class="function"><span class="title">withTitleText</span><span class="params">(final Matcher&lt;String&gt; titleMatcher)</span></span></div><div class="line"><span class="function"><span class="title">isEnabled</span><span class="params">()</span></span></div></pre></td></tr></table></figure></p><p>RootMatchers Root对象的匹配器集合。<br>匹配root装饰视图匹配给定的视图匹配器。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">onView</span>(<span class="selector-tag">withText</span>("<span class="selector-tag">Text</span>"))</div><div class="line">  <span class="selector-class">.inRoot</span>(<span class="selector-tag">withDecorView</span>(<span class="selector-tag">not</span>(<span class="selector-tag">is</span>(<span class="selector-tag">getActivity</span>()<span class="selector-class">.getWindow</span>()<span class="selector-class">.getDecorView</span>()))))</div><div class="line">  <span class="selector-class">.perform</span>(<span class="selector-tag">click</span>());</div></pre></td></tr></table></figure></p><p>RootMatchers还有以下方法可以应用到其他场景</p><table><thead><tr><th>Public methods</th></tr></thead><tbody><tr><td>static Matcher<root></root></td><td>isDialog()Matches Roots that are dialogs (i.e.)</td></tr><tr><td>static Matcher<root></root></td><td>isFocusable()Matches Roots that can take window focus.</td></tr><tr><td>  static Matcher<root></root></td><td>isPlatformPopup()Matches Roots that are popups - like autocomplete suggestions or the actionbar spinner.  </td></tr><tr><td>  static Matcher<root></root></td><td>isTouchable()Matches Roots that can receive touch events.  </td></tr><tr><td>  static Matcher<root></root></td><td>withDecorView(Matcher<view> decorViewMatcher)Matches Roots with decor views that match the given view matcher.</view></td></tr></tbody></table><p>  ViewMatchers 最重要也是应用最广的匹配器，通过一个或者多个来定位层级里面的控件。</p><table><thead><tr><th>Public methods</th></tr></thead><tbody><tr><td>  static <t> void</t></td><td>assertThat(String message, T actual, Matcher<t> matcher) A replacement for MatcherAssert.assertThat that renders View objects nicely.</t></td></tr><tr><td>  static <t> void</t></td><td>assertThat(T actual, Matcher<t> matcher) A replacement for MatcherAssert.assertThat that renders View objects nicely.</t></td></tr><tr><td>  static Matcher<view></view></td><td>hasContentDescription() Returns an Matcher that matches Views with any content description.</td></tr><tr><td>  static Matcher<view></view></td><td>hasDescendant(Matcher<view> descendantMatcher) Returns a matcher that matches Views based on the presence of a descendant in its view hierarchy.</view></td></tr><tr><td>  static Matcher<view></view></td><td>hasErrorText(String expectedError) Returns a matcher that matches EditText based on edit text error string value.</td></tr><tr><td>  static Matcher<view></view></td><td>hasErrorText(Matcher<string> stringMatcher) Returns a matcher that matches EditText based on edit text error string value.</string></td></tr><tr><td>  static Matcher<view></view></td><td>hasFocus() Returns a matcher that matches Views currently have focus.</td></tr><tr><td>  static Matcher<view></view></td><td>hasImeAction(int imeAction) Returns a matcher that matches views that support input methods (e.g.</td></tr><tr><td>  static Matcher<view></view></td><td>hasImeAction(Matcher<integer> imeActionMatcher) Returns a matcher that matches views that support input methods (e.g.</integer></td></tr><tr><td>  static Matcher<view></view></td><td>hasLinks() Returns a matcher that matches TextViews that have links.</td></tr><tr><td>  static Matcher<view></view></td><td>hasSibling(Matcher<view> siblingMatcher) Returns an Matcher that matches Views based on their siblings.</view></td></tr><tr><td>  static Matcher<view></view></td><td>isAssignableFrom(Class&lt;? extends View&gt; clazz) Returns a matcher that matches Views which are an instance of or subclass of the provided class.</td></tr><tr><td>  static Matcher<view></view></td><td>isChecked() Returns a matcher that accepts if and only if the view is a CompoundButton (or subtype of) and is in checked state.</td></tr><tr><td>  static Matcher<view></view></td><td>isClickable() Returns a matcher that matches Views that are clickable.</td></tr><tr><td>  static Matcher<view></view></td><td>isCompletelyDisplayed() Returns a matcher which only accepts a view whose height and width fit perfectly within the currently displayed region of this view.</td></tr><tr><td>  static Matcher<view></view></td><td>isDescendantOfA(Matcher<view> ancestorMatcher) Returns a matcher that matches Views based on the given ancestor type.</view></td></tr><tr><td>  static Matcher<view></view></td><td>isDisplayed() Returns a matcher that matches Views that are currently displayed on the screen to the user.</td></tr><tr><td>  static Matcher<view></view></td><td>isDisplayingAtLeast(int areaPercentage) Returns a matcher which accepts a view so long as a given percentage of that view’s area is not obscured by any other view and is thus visible to the user.</td></tr><tr><td>  static Matcher<view></view></td><td>isEnabled() Returns a matcher that matches Views that are enabled.</td></tr><tr><td>  static Matcher<view></view></td><td>isFocusable() Returns a matcher that matches Views that are focusable.</td></tr><tr><td>  static Matcher<view></view></td><td>isJavascriptEnabled() Returns a matcher that matches WebView if they are evaluating Javascript.</td></tr><tr><td>  static Matcher<view></view></td><td>isNotChecked() Returns a matcher that accepts if and only if the view is a CompoundButton (or subtype of) and is not in checked state.</td></tr><tr><td>  static Matcher<view></view></td><td>isRoot() Returns a matcher that matches root View.</td></tr><tr><td>  static Matcher<view></view></td><td>isSelected() Returns a matcher that matches Views that are selected.</td></tr><tr><td>  static Matcher<view></view></td><td>supportsInputMethods() Returns a matcher that matches views that support input methods.</td></tr><tr><td>  static Matcher<view></view></td><td>withChild(Matcher<view> childMatcher) A matcher that returns true if and only if the view’s child is accepted by the provided matcher.</view></td></tr><tr><td>  static Matcher<view></view></td><td>withClassName(Matcher<string> classNameMatcher) Returns a matcher that matches Views with class name matching the given matcher.</string></td></tr><tr><td>  static Matcher<view></view></td><td>withContentDescription(int resourceId) Returns a Matcher that matches Views based on content description property value.</td></tr><tr><td>  static Matcher<view></view></td><td>withContentDescription(String text) Returns an Matcher that matches Views based on content description property value.</td></tr><tr><td>  static Matcher<view></view></td><td>withContentDescription(Matcher&lt;? extends CharSequence&gt; charSequenceMatcher) Returns an Matcher that matches Views based on content description property value.</td></tr><tr><td>  static Matcher<view></view></td><td>withEffectiveVisibility(ViewMatchers.Visibility visibility) Returns a matcher that matches Views that have “effective” visibility set to the given value.</td></tr><tr><td>  static Matcher<view></view></td><td>withHint(Matcher<string> stringMatcher) Returns a matcher that matches TextViews based on hint property value.</string></td></tr><tr><td>  static Matcher<view></view></td><td>withHint(int resourceId) Returns a matcher that matches a descendant of TextView that is displaying the hint associated with the given resource id.</td></tr><tr><td>  static Matcher<view></view></td><td>withHint(String hintText) Returns a matcher that matches TextView based on it’s hint property value.</td></tr><tr><td>  static Matcher<view></view></td><td>withId(Matcher<integer> integerMatcher) Returns a matcher that matches Views based on resource ids.</integer></td></tr><tr><td>  static Matcher<view></view></td><td>withId(int id) Same as withId(is(int)), but attempts to look up resource name of the given id and use an R.id.myView style description with describeTo.</td></tr><tr><td>  static Matcher<view></view></td><td>withInputType(int inputType) Returns a matcher that matches InputType.</td></tr><tr><td>  static Matcher<view></view></td><td>withParent(Matcher<view> parentMatcher) A matcher that accepts a view if and only if the view’s parent is accepted by the provided matcher.</view></td></tr><tr><td>  static Matcher<view></view></td><td>withResourceName(String name) Returns a matcher that matches Views based on resource id names, (for instance, channel_avatar).</td></tr><tr><td>  static Matcher<view></view></td><td>withResourceName(Matcher<string> stringMatcher) Returns a matcher that matches Views based on resource id names, (for instance, channel_avatar).</string></td></tr><tr><td>  static Matcher<view></view></td><td>withSpinnerText(int resourceId) Returns a matcher that matches a descendant of Spinner that is displaying the string of the selected item associated with the given resource id.</td></tr><tr><td>  static Matcher<view></view></td><td>withSpinnerText(String text) Returns a matcher that matches Spinner based on it’s selected item’s toString value.</td></tr><tr><td>  static Matcher<view></view></td><td>withSpinnerText(Matcher<string> stringMatcher) Returns a matcher that matches Spinners based on toString value of the selected item.</string></td></tr><tr><td>  static Matcher<view></view></td><td>withTagKey(int key) Returns a matcher that matches View based on tag keys.</td></tr><tr><td>  static Matcher<view></view></td><td>withTagKey(int key, Matcher<object> objectMatcher) Returns a matcher that matches Views based on tag keys.</object></td></tr><tr><td>  static Matcher<view></view></td><td>withTagValue(Matcher<object> tagValueMatcher) Returns a matcher that matches Views based on tag property values.</object></td></tr><tr><td>  static Matcher<view></view></td><td>withText(Matcher<string> stringMatcher) Returns a matcher that matches TextViews based on text property value.</string></td></tr><tr><td>  static Matcher<view></view></td><td>withText(String text) Returns a matcher that matches TextView based on its text property value.</td></tr><tr><td>  static Matcher<view></view></td><td>withText(int resourceId) Returns a matcher that matches a descendant of TextView that is displaying the string associated with the given resource id.</td></tr></tbody></table><p>ok 这次主要介绍Matchers的API 更多的内容 大家还是要查看官方API去学习。<br>以下是android espresso matchers的地址<br><a href="https://developer.android.com/reference/android/support/test/espresso/matcher/ViewMatchers.html" target="_blank" rel="external">espresso matchers</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过前3篇文章，大家应该对espresso有了大体上的了解，那么今天我们要深入了解它的API，看看espresso的整体架构。&lt;br&gt;还是通过espresso cheat sheet来进入本次话题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/espresso-chea
      
    
    </summary>
    
    
      <category term="android自动化" scheme="http://yoursite.com/tags/android%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>QA请勿忘初心</title>
    <link href="http://yoursite.com/2016/12/13/qa-heart/"/>
    <id>http://yoursite.com/2016/12/13/qa-heart/</id>
    <published>2016-12-13T13:42:54.000Z</published>
    <updated>2017-09-25T09:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先让我们回顾一下QA与QC的区别："><a href="#首先让我们回顾一下QA与QC的区别：" class="headerlink" title="首先让我们回顾一下QA与QC的区别："></a>首先让我们回顾一下QA与QC的区别：</h2><p><strong>Quality Assurance</strong> :The planned and systematic activities implemented in a quality system so that quality requirements for a product or service will be fulfilled.<br><strong>Quality Control</strong> :The observation techniques and activities used to fulfill requirements for quality.</p><p>QA的工作涉及软件研发流程的各个环节，且涉及到每一位参与研发的人员，但质量保证工作又不涉及具体的软件研发细节，侧重于整个流程。</p><p>QC则侧重于点，利用各种方法去检查某个功能是否满足业务需求。</p><p>thoughtworks 的QA则是这两者的混合体，你既要保证开发流程的质量，又要保证story的功能的是否正确。</p><hr><p>来thoughtworks已经2年了，当过bqconf讲师与主持，参加过公司内各类测试相关活动，也阅读过g邮件中分享的关于test的话题，大部分人关注点都离不开自动化测试，面试的QA也说想到thoughtworks来学习高深的自动化测试，仿佛自动化测试代表了整个QA界，我反对盲目的自动化测试，确切的说反对盲目的UI自动化测试。很多QA在自动化测试海洋里迷失了自己。<br>我要强调自动化测试: 真的没有银弹。</p><p><img src="/image/QA_TW.jpg" alt=""></p><h2 id="QA的最终价值体现"><a href="#QA的最终价值体现" class="headerlink" title="QA的最终价值体现"></a>QA的最终价值体现</h2><p><strong>Faster Delivery Of Quality Software From Idea To Consumer</strong></p><h3 id="确保项目的正确性"><a href="#确保项目的正确性" class="headerlink" title="确保项目的正确性"></a>确保项目的正确性</h3><p>所以自动化测试只是其中的一小部分。<br>如上图顶部和底部的文字是对一个QA所能带给项目的总结：“我们在开发正确的产品吗？如果是，那么我们开发的产品正确吗？”所以QA首先需要在整个个项目过程中不断询问的所有成员上述问题，确保团队是在开发客户所需的产品，而不是自己YY出来的产品。</p><h3 id="确保流程的正确性"><a href="#确保流程的正确性" class="headerlink" title="确保流程的正确性"></a>确保流程的正确性</h3><p><strong>Quality is not just in the software but also in the process</strong></p><p>质量从来都不只是QA的职责，而是整个团队的职责。但QA如果自己都不注重，不督促组内成员改进质量，再将责任强加于整个团队，那么产品质量又何谈提升与保证。<br>中间的图片从一个QA的角度表明了一个用户故事的生命周期以及QA如何参与其中每个环节。</p><p><img src="/image/pair_with_BA.png" alt=""><br>首先BA和客户将要开发的story列出之后，BA与QA可以一起pair编写具体story的内容，场景与验收条件,利用自己对业务以及系统的熟悉度，尽量的配合BA将story中坑尽量排除掉。</p><p><img src="/image/kick_off.png" alt=""><br>所有参与kick off 角色，都应该提前了解story内容。在kick off过程中，提出自己对story疑问。尽量将业务需求上问题在这个阶段解决。<br><img src="/image/pair_with_dev.png" alt=""><br>在完成kick off后，QA可以和dev一起pair完成编写unit test 以及Automated Acceptance Tests，身为一个敏捷QA，我们起码要了解团队选用的单元测试工具，熟悉项目的技术架构，这样更好的便于我们对整个项目质量把控，在与dev pair的过程中，即帮助dev分析业务场景的分支，来确保单元测试覆盖的是正确的场景，而不是为了交代上级随便乱写的单元测试，也帮助QA熟悉代码，提高编码能力。<br><img src="/image/sign_off.png" alt=""><br>当DEV完成编码工作后，这时QA UX BA DEV一起检查story，是否按照story AC来检查是否完成对应的功能。UX也可发表对story UI以及交互一些看法，有任何问题及时讨论后，将问题尽早的反馈给客户。<br><img src="/image/test_test.png" alt=""><br>当开发交付一部分功能之后，QA就可以做常规的用户故事测试，几个迭代之后，QA开始进行跨功能需求测试和探索性测试等。根据探索性测试的结果，QA可能会调整测试策略，调整测试优先级，完善测试用例等等。<br><img src="/image/report.png" alt=""><br>上面这些QA实践貌似已经很完美,其实还差最重要的一环 <strong>quality analysis</strong> 。每次release后，我们总以为我们发布一个完美的产品，但却总能在新迭代开发过程中发现之前问题，历史总是惊人的相似，为什么，没有分析总结问题，以及相应的预防手段,那么同样的问题只会重现。<br>同时我们也要回顾下自己在工作中真的将这些敏捷实践都应用到工作中吗，我想或多或少的都有所欠缺。对于一个QA来说，不应循规蹈矩照搬敏捷实践。例如，在kickoff中，发现dev，UX对story涉及的场景以及内容了解不清楚，QA也可能漏掉一些测试场景，那么我们可以在kickoff之前，加入一个pre- kick off的实践，留出时间，让每个角色都能够完整了解story。在kick off之中，ux没有办法完整的确认页面的字体大小或者颜色等是否正确，那么在sign off之后，我们也加入一个UX-test实践，帮助UX能够更好解决这些问题。<br>所以每个项目也都有应适合自己项目的敏捷实践，发现项目存在的问题，持续改进才是最佳实践。</p><h2 id="再来谈谈自动化测试吧。"><a href="#再来谈谈自动化测试吧。" class="headerlink" title="再来谈谈自动化测试吧。"></a>再来谈谈自动化测试吧。</h2><p><img src="/image/pyramid.png" alt="pyramid"><br>上面的测试金字塔对于大家来说再熟悉不过了，对于自动化测试来说最有价值的仍然是单元测试，但对于QA来说无疑最复杂的。<br>大部分QA或者tester，仍然以UI自动化为重心。之所以反对盲目的UI自动化测试，因为变化频繁的UI设计，极低投入产生比，都应该让我们重新思考下UI自动化的价值。</p><h3 id="我们需要一个实施UI自动化正确的方式："><a href="#我们需要一个实施UI自动化正确的方式：" class="headerlink" title="我们需要一个实施UI自动化正确的方式："></a>我们需要一个实施UI自动化正确的方式：</h3><ul><li>能不用UI自动化测试就不用，梳理业务主线，只保留用户操作最频繁，交互最多的场景。</li><li>根据面向对象设计的原则，构建适合项目的UI自动化框架，无论自己编写框架，还是采用开源框架。</li><li>尽量采用独立测试数据，确保运行测试不受影响。例如采用mock数据库或者每次运行时还原测试数据库。<h3 id="回到正题，面对自动化测试的大潮，QA应该关注什么？"><a href="#回到正题，面对自动化测试的大潮，QA应该关注什么？" class="headerlink" title="回到正题，面对自动化测试的大潮，QA应该关注什么？"></a>回到正题，面对自动化测试的大潮，QA应该关注什么？</h3></li><li>编码规范，真实例子，dev对于类名命名没有用Camel-Case，造成在linux系统中部署不成功，python中乱使用缩进等。 其实都可以避免到，例如开发工具加入自动检查，或者在CI上加入校验编码规范的步骤，采用一些工具就可以达到目的，jshint，RuboCop等。</li><li>pair完成单元测试或API测试等，一方面可以提高QA的编码能力，另一面可以给出dev一些建议，将单元测试覆盖到更多的场景。<br>例如，如果你们项目采用react作为前端框架，如果你不能理解react virtual dom 与jsx，当我们在写UI自动化脚本时，你会发现根本无法进行下去，日常中我们定位元素全是这种<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class="styles__formField___1fyGy"&gt;</div><div class="line">&lt;input type="text" placeholder="Email"&gt;</div><div class="line">&lt;svg class="styles__formIcon___37VGd" viewBox="0 0 24 24" style="display: inline-block; fill: rgba(0, 0, 0, 0.870588); height: 24px; width: 24px; user-select: none; transition: all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms;"&gt;</div><div class="line">&lt;path d="M12 12c2.21 0 4<span class="string">-1</span>.79 4<span class="string">-4</span>s<span class="string">-1</span>.79<span class="string">-4</span><span class="string">-4</span><span class="string">-4</span><span class="string">-4</span> 1.79<span class="string">-4</span> 4 1.79 4 4 4zm0 2c<span class="string">-2</span>.67 0<span class="string">-8</span> 1.34<span class="string">-8</span> 4v2h16v<span class="string">-2</span>c0<span class="string">-2</span>.66<span class="string">-5</span>.33<span class="string">-4</span><span class="string">-8</span><span class="string">-4</span>z"&gt;</div><div class="line">&lt;/path&gt;</div><div class="line">&lt;/svg&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></li></ul><p>,所有的页面都是js渲染出来的，如果你懂jsx，就知道只需要在对于的Component render方法中更改加入id等元素就可以搞定<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">render</span><span class="params">()</span></span> &#123;</div><div class="line">    return (</div><div class="line">        &lt;div&gt;</div><div class="line">        &lt;<span class="selector-tag">input</span> type=<span class="string">"text"</span> placeholder=<span class="string">"Email"</span> id=<span class="string">"Email"</span>&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>控制单元测试覆盖率，100%的单元测试覆盖率当然是最好的，但如果交付压力大，和客户商量后，我们可以尽量覆盖业务主线，而不是为了达到覆盖率延误了交付周期。</li></ul><h2 id="再来谈谈质量分析。"><a href="#再来谈谈质量分析。" class="headerlink" title="再来谈谈质量分析。"></a>再来谈谈质量分析。</h2><p>作为一个QA，我们不仅要检测项目中存在问题，也要改进团队的实践活动，更重要的是预防问题的发生。</p><ul><li>每次bugbash或相应迭代完成后，要分析统计，找出产生缺陷的环节，并采取措施防止问题再现。例如每次release或者bug bash之后,我可以按照功能模块与bug类型进行统计划分，分析统计bug的成因，例如某次迭代我们bug数量激增，经调查，发现我们对某些模块的前端代码进行了重构，但缺乏相应的单元测试与集成测试，造成了我们没有及时发现bug。之后我们就对应的采取措施防止问题再现。</li><li>总结分析报告，及时反馈这些信息给团队。总结分析是一个长期的任务，每次bug数量的变动，都会直接体现整个团队上次迭代的开发质量，例如bug数量减少了，可以鼓励成员再接再厉。或者某几次迭代某些模块bug成上升趋势，那么就需要组织团队一起讨论问题根源，采取措施防止问题重现。</li><li>利用代码质量分析工具帮助我们尽早预防问题的发生。例如sonar代码质量管理平台，可以帮助我们从代码复杂度，重复代码，单元测试覆盖率，编码规范等纬度来分析我们代码所存在的问题。当然也有其他的开源工具，像RubyCritic，/plato不同的语言都会有相应的工具。</li><li>在线监控，利用像newrelic，airbnb等监控工具对部署在本地或在云中的web应用程序进行监控、故障修复、诊断、线程分析以及容量计划。这样就算们产品环境有任何问题，我们都会及时响应，尽早修复，减低损失。</li></ul><h2 id="最后让我们在看看QA应具有那些能力与技能"><a href="#最后让我们在看看QA应具有那些能力与技能" class="headerlink" title="最后让我们在看看QA应具有那些能力与技能."></a>最后让我们在看看QA应具有那些能力与技能.</h2><p><img src="/image/qa_capablities.png" alt="qa_capablities"><br><img src="/image/qa_skills.png" alt="qa_skills"></p><p>软技能方面包括风险控制，辅导他人，沟通能力，分析定位等。技能方面则包括缺陷管理，流程改进，测试分析，可用性测试，性能测试，安全测试等。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>回顾上面这些实践，其实我们可以做的更好，而不是把团队的质量全都交给自动化，回归QA的应有的初心，让我们从各个方面改进质量，带给团队更好的未来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;首先让我们回顾一下QA与QC的区别：&quot;&gt;&lt;a href=&quot;#首先让我们回顾一下QA与QC的区别：&quot; class=&quot;headerlink&quot; title=&quot;首先让我们回顾一下QA与QC的区别：&quot;&gt;&lt;/a&gt;首先让我们回顾一下QA与QC的区别：&lt;/h2&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
      <category term="gatling" scheme="http://yoursite.com/tags/gatling/"/>
    
  </entry>
  
  <entry>
    <title>espresso系列3--测试实践</title>
    <link href="http://yoursite.com/2016/12/08/espresso3/"/>
    <id>http://yoursite.com/2016/12/08/espresso3/</id>
    <published>2016-12-08T14:30:17.000Z</published>
    <updated>2017-09-25T09:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前2篇我们已经详细介绍了espresso的架构以及相应的API，相信大家也有了一定的了解，理论讲的再多，还是不如手上自己敲一遍代码。<br>还是深入浅出系列的套路，让我这个小司机带大家一步一步进入espresso的世界吧。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><img src="http://f.hiphotos.baidu.com/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=1b0dc3d30d2442a7ba03f5f7b02ac62e/6159252dd42a2834b1c7cf5b59b5c9ea15cebf79.jpg" alt="github"><br>github，如果你还用svn的话，请放弃阅读本系列文章，太low了，而且本系列的code都是采用google官方的espresso的demo，都来源于github。<br><img src="http://web.img.chuanke.com/course/2015-03/04/208e43b22dffd2a46a88f2a610c77e35.jpg" alt="android studio"><br>android studio,这个不用说，目前android开发者最好的工具，并且他有很多帮助espresso测试的插件或功能，比如录制功能等。<br><img src="http://i1.wp.com/photo.sofun.tw/2013/09/Android-SDK-ADT-Bundle-Logo.jpg" alt="android sdk"><br>android sdk，这个更不用说，如果你连这个都没，还学什么android。<br><img src="http://img1.imgtn.bdimg.com/it/u=2429262149,756671414&amp;fm=21&amp;gp=0.jpg" alt="genymotion"><br>genymotion,android目前来说最好的模拟器，虽然原生的也很不错，但是开发者首先得还是genymotion</p><h3 id="首先使用android-studio创建项目"><a href="#首先使用android-studio创建项目" class="headerlink" title="首先使用android studio创建项目"></a>首先使用android studio创建项目</h3><p>最好你已经拥有了项目源码，espresso并不是单纯的黑盒ui测试工具，它能干得事情很多，包括单元测试，集成测试，甚至在mock服务，以及将你需要的内容注入到代码中，所以我把称为灰盒工具。<br>如果之前没有做个android项目的话，也可以在github上找一些开源的android app 练手。不过建议大家从espresso demo库入手。</p><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p><img src="/image/android_studio.png" alt="android_studio"></p><p>如上图，我们可以创建新的项目，导入已经存在android项目，从版本管理软件中导入，从gradle等其他工具中导入，以及获取android代码样例导入。<br>google android 所有的测试demo都在以下github地址<br><a href="https://github.com/googlesamples/android-testing.git" target="_blank" rel="external">    https://github.com/googlesamples/android-testing.git</a><br>下载完成后，我们进入espresso目录，可以看到espresso的demo还是很丰富的。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lqi @ CNlqi-3 <span class="keyword">in</span> ~/work/<span class="built_in">test</span>/android/android-testing on git:master x [0:19:24]</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ui/espresso</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> lqi @ CNlqi-3 <span class="keyword">in</span> ~/work/<span class="built_in">test</span>/android/android-testing/ui/espresso on git:master x [0:19:31]</span></div><div class="line"><span class="meta">$</span><span class="bash"> ls</span></div><div class="line">BasicSample           CustomMatcherSample   EspressoSpoonDemo     IntentsAdvancedSample MultiWindowSample     WebBasicSample</div><div class="line">BasicSampleBundled    DataAdapterSample     IdlingResourceSample  IntentsBasicSample    RecyclerViewSample    spoon-gradle-plugin</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> lqi @ CNlqi-3 <span class="keyword">in</span> ~/work/<span class="built_in">test</span>/android/android-testing/ui/espresso on git:master x [0:19:37]</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> BasicSample</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> lqi @ CNlqi-3 <span class="keyword">in</span> ~/work/<span class="built_in">test</span>/android/android-testing/ui/espresso/BasicSample on git:master x [0:19:40]</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></div><div class="line">/Users/lqi/work/test/android/android-testing/ui/espresso/BasicSample</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> lqi @ CNlqi-3 <span class="keyword">in</span> ~/work/<span class="built_in">test</span>/android/android-testing/ui/espresso/BasicSample on git:master x [0:20:42]</span></div><div class="line"><span class="meta">$</span><span class="bash"></span></div></pre></td></tr></table></figure></p><h4 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h4><p>选择<code>BasicSample</code>导入或者直接命令行<code>studio .</code>打开该项目。<br><img src="/image/android_menu.png" alt="android_menu">·<br>外层的build.gradle文件设置的是整个项目的一些配置,例如依赖的类库，远程的仓库repositories。编译器的版本，espresso的版本等。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></div><div class="line"></div><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:2.1.2'</span></div><div class="line"></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></div><div class="line">        <span class="comment">// in the individual module build.gradle files</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ext &#123;</div><div class="line">    buildToolsVersion = <span class="string">"24.0.1"</span></div><div class="line">    supportLibVersion = <span class="string">"24.2.0"</span></div><div class="line">    runnerVersion = <span class="string">"0.5"</span></div><div class="line">    rulesVersion = <span class="string">"0.5"</span></div><div class="line">    espressoVersion = <span class="string">"2.2.2"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>app目录为项目主目录包含项目源代码以及测试代码<br>app里面也包含build.gradle文件，有时候项目可能包含几个主目录，那么各个目录的下的build.gradle文件都继承自顶层的build.gradle文件。<br>app下的build.gradle文件配置了android的配置信息，以及会用到的依赖。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">24</span></div><div class="line">    buildToolsVersion rootProject.buildToolsVersion</div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.example.android.testing.espresso.BasicSample"</span></div><div class="line">        minSdkVersion <span class="number">10</span></div><div class="line">        targetSdkVersion <span class="number">24</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">    &#125;</div><div class="line">    lintOptions &#123;</div><div class="line">        abortOnError <span class="keyword">false</span></div><div class="line">    &#125;</div><div class="line">    productFlavors &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// App dependencies</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:support-annotations:'</span> + rootProject.supportLibVersion;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.google.guava:guava:18.0'</span></div><div class="line">    <span class="comment">// Testing-only dependencies</span></div><div class="line">    <span class="comment">// Force usage of support annotations in the test app, since it is internally used by the runner module.</span></div><div class="line">    androidTestCompile <span class="string">'com.android.support:support-annotations:'</span> + rootProject.supportLibVersion;</div><div class="line">    androidTestCompile <span class="string">'com.android.support.test:runner:'</span> + rootProject.runnerVersion;</div><div class="line">    androidTestCompile <span class="string">'com.android.support.test:rules:'</span> + rootProject.rulesVersion;</div><div class="line">    androidTestCompile <span class="string">'com.android.support.test.espresso:espresso-core:'</span> + rootProject.espressoVersion;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>BasicSample APP就长样子。<br><img src="/image/启动espresso.png" alt="启动espresso"></p><h4 id="启动模拟器"><a href="#启动模拟器" class="headerlink" title="启动模拟器"></a>启动模拟器</h4><p>首先启动android emulator/genymotion,之后直接点击run按钮就能部署app到模拟器上。<br>log如下.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Testing started at <span class="number">2</span>:<span class="number">32</span> PM ...</div><div class="line"></div><div class="line"><span class="number">12</span>/<span class="number">09</span> <span class="number">14</span>:<span class="number">32</span>:<span class="number">04</span>: Launching ChangeTextBehaviorTe...</div><div class="line">$ adb push /Users/lqi/work/test/android/android-testing/ui/espresso/BasicSample/app/build/outputs/apk/app-debug<span class="selector-class">.apk</span> /data/local/tmp/com<span class="selector-class">.example</span><span class="selector-class">.android</span><span class="selector-class">.testing</span><span class="selector-class">.espresso</span><span class="selector-class">.BasicSample</span></div><div class="line">$ adb shell pm install -r <span class="string">"/data/local/tmp/com.example.android.testing.espresso.BasicSample"</span></div><div class="line">pkg: /data/local/tmp/com<span class="selector-class">.example</span><span class="selector-class">.android</span><span class="selector-class">.testing</span><span class="selector-class">.espresso</span><span class="selector-class">.BasicSample</span></div><div class="line">Success</div><div class="line"></div><div class="line"></div><div class="line">$ adb push /Users/lqi/work/test/android/android-testing/ui/espresso/BasicSample/app/build/outputs/apk/app-debug-androidTest-unaligned<span class="selector-class">.apk</span> /data/local/tmp/com<span class="selector-class">.example</span><span class="selector-class">.android</span><span class="selector-class">.testing</span><span class="selector-class">.espresso</span><span class="selector-class">.BasicSample</span><span class="selector-class">.test</span></div><div class="line">$ adb shell pm install -r <span class="string">"/data/local/tmp/com.example.android.testing.espresso.BasicSample.test"</span></div><div class="line">pkg: /data/local/tmp/com<span class="selector-class">.example</span><span class="selector-class">.android</span><span class="selector-class">.testing</span><span class="selector-class">.espresso</span><span class="selector-class">.BasicSample</span><span class="selector-class">.test</span></div><div class="line">Success</div><div class="line"></div><div class="line"></div><div class="line">Running tests</div><div class="line"></div><div class="line">$ adb shell am instrument -w -r   -e debug false -e class com<span class="selector-class">.example</span><span class="selector-class">.android</span><span class="selector-class">.testing</span><span class="selector-class">.espresso</span><span class="selector-class">.BasicSample</span><span class="selector-class">.ChangeTextBehaviorTest</span> com<span class="selector-class">.example</span><span class="selector-class">.android</span><span class="selector-class">.testing</span><span class="selector-class">.espresso</span><span class="selector-class">.BasicSample</span><span class="selector-class">.test</span>/android<span class="selector-class">.support</span><span class="selector-class">.test</span><span class="selector-class">.runner</span><span class="selector-class">.AndroidJUnitRunner</span></div><div class="line">Client not ready yet..</div><div class="line">Started running tests</div><div class="line">Tests ran to completion.</div></pre></td></tr></table></figure></p><h4 id="编写测试"><a href="#编写测试" class="headerlink" title="编写测试"></a>编写测试</h4><p>此实例BasicSample包含1个textView,1个EditText和2个button，当点击change text 按钮时，会将edittext的值填入textview中。当点击open activity and change text 按钮时，将打开一个新的页面（姑且叫这样吧）并将edittext内容显示在这个页面。<br><code>@RunWith(AndroidJUnit4.class)</code><br>采用了JUnit 4风格进行编写</p><ul><li>首先我们需要新建一个测试类。<br><code>ChangeTextBehaviorTest</code></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeTextBehaviorTest</span> </span>&#123;  </div><div class="line">  &#125;</div></pre></td></tr></table></figure><ul><li>首先创建一个@Rule,ActivityTestRule用来指明被测试的Activity;<br>@Rule: 简单来说，是为各个测试方法提供一些支持。具体来说，比如我需要测试一个Activity，那么我可以在@Rule注解下面采用一个ActivityTestRule，该类提供了对相应Activity的功能测试的支持。该类可以在@Before和@Test标识的方法执行之前确保将Activity运行起来，并且在所有@Test和@After方法执行结束之后将Activity杀死。在整个测试期间，每个测试方法都可以直接对相应Activity进行修改和访问。</li></ul><figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@Rule</span></div><div class="line">       <span class="keyword">public</span> ActivityTestRule&lt;MainActivity&gt; mActivityRule = <span class="keyword">new</span> ActivityTestRule&lt;&gt;(</div><div class="line">           MainActivity.<span class="keyword">class</span>);</div></pre></td></tr></table></figure><ul><li>标识一个测试方法。一个测试类中可以有多个测试方法，每个测试方法需要用一个@Test注解来标识。<br>以下代码找到editTextUserInput输入‘Espresso’，关闭键盘。点击changeTextBt按钮。检查textToBeChanged的值是否为‘Espresso’。<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Test</span></div><div class="line">public void changeText_sameActivity() &#123;</div><div class="line">    <span class="comment">// Type text and then press the button.</span></div><div class="line">    <span class="selector-tag">onView</span>(withId(R.id.editTextUserInput))</div><div class="line">            <span class="selector-class">.perform</span>(typeText(STRING_TO_BE_TYPED), closeSoftKeyboard());</div><div class="line">    <span class="selector-tag">onView</span>(withId(R.id.changeTextBt))<span class="selector-class">.perform</span>(click());</div><div class="line"></div><div class="line">    <span class="comment">// Check that the text was changed.</span></div><div class="line">    <span class="selector-tag">onView</span>(withId(R.id.textToBeChanged))<span class="selector-class">.check</span>(matches(withText(STRING_TO_BE_TYPED)));</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>顺便说说其他junit4注解的用法</p><pre><code>@Before: 标识在运行测试方法之前运行的代码。可以支持同一个Class中有多个@Before，但是这些方法的执行顺序是随机的。该注解替代了JUnit 3中的setUp()方法。@After: 标识在运行测试方法结束之后运行的代码。可以在其中做一些释放资源的操作。该注解替代了JUnit 3中的tearDown()方法。@BeforeClass: 为测试类标识一个static方法，在测试之前只执行一次。@AfterClass: 为测试类标识一个static方法，在所有测试方法结束之后只执行一次。@Test(timeout=&lt;milliseconds&gt;): 为测试方法设定超时时间。</code></pre><p>到了这里我们要说下怎么定位所需的元素，其实和web差不多，我们可以利用layout inspector与android device monitor工具。<br><img src="/image/android_device_monitor.png" alt="android_device_monitor"><br><img src="/image/android_layout_inspector.png" alt="android_device_monitor"><br>在写一个测试，在editTextUserInput输入‘Espresso’，之后关闭键盘。点击activityChangeTextBtn按钮，查看show_text_view的值是否为‘Espresso’。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Test</span></div><div class="line">  public void changeText_newActivity() &#123;</div><div class="line">      <span class="comment">// Type text and then press the button.</span></div><div class="line">      <span class="selector-tag">onView</span>(withId(R.id.editTextUserInput))<span class="selector-class">.perform</span>(typeText(STRING_TO_BE_TYPED),</div><div class="line">              closeSoftKeyboard());</div><div class="line">      <span class="selector-tag">onView</span>(withId(R.id.activityChangeTextBtn))<span class="selector-class">.perform</span>(click());</div><div class="line"></div><div class="line">      <span class="comment">// This view is in a different Activity, no need to tell Espresso.</span></div><div class="line">      <span class="selector-tag">onView</span>(withId(R.id.show_text_view))<span class="selector-class">.check</span>(matches(withText(STRING_TO_BE_TYPED)));</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>以上是espresso最常见的测试，希望大家能够好好理解。</p><h3 id="接下来我们看看espresso如何对AdapterView控制器测试。"><a href="#接下来我们看看espresso如何对AdapterView控制器测试。" class="headerlink" title="接下来我们看看espresso如何对AdapterView控制器测试。"></a>接下来我们看看espresso如何对AdapterView控制器测试。</h3><p>​AdapterView​ 是一个从适配器中动态加载数据的特殊控件。最常见的 ​AdapterView​ 是 ListView​。与像 ​LinearLayout​ 这样的静态控件相反，在当前视图结构中，可能只加载了 ​AdapterView​ 子控件的一部分， 简单的 ​onview()​ 可能会找不到当前没有被加载的视图。Espresso 通过提供单独的 onData()​方法来切入点处理此问题，它可以在操作适配器中有该问题的条目或该条目的子项之前将其加载（使其获取焦点）。<br>导入espresso demo中的MultiWindowSample项目<br>该测试是从ArrayAdapter类型的dropdown_item控件中选出需要的值，类似我们用搜索引擎时，显示的list。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Test</span></div><div class="line">   public void autoCompleteTextView_onDataClickAndCheck() &#123;</div><div class="line">       <span class="comment">// NB: The autocompletion box is implemented with a ListView, so the preferred way</span></div><div class="line">       <span class="comment">// to interact with it is onData(). We can use inRoot here too!</span></div><div class="line">       <span class="selector-tag">onView</span>(withId(R.id.auto_complete_text_view))</div><div class="line">               <span class="selector-class">.perform</span>(typeText(<span class="string">"S"</span>), closeSoftKeyboard());</div><div class="line"></div><div class="line">       <span class="comment">// This is useful because some of the completions may not be part of the View Hierarchy</span></div><div class="line">       <span class="comment">// unless you scroll around the list.</span></div><div class="line">       <span class="selector-tag">onData</span>(allOf(instanceOf(String.class), is(<span class="string">"Baltic Sea"</span>)))</div><div class="line">               <span class="selector-class">.inRoot</span>(withDecorView(not(is(mActivity.getWindow().getDecorView()))))</div><div class="line">               <span class="selector-class">.perform</span>(click());</div><div class="line"></div><div class="line">       <span class="comment">// The text should be filled in.</span></div><div class="line">       <span class="selector-tag">onView</span>(withId(R.id.auto_complete_text_view))</div><div class="line">               <span class="selector-class">.check</span>(matches(withText(<span class="string">"Baltic Sea"</span>)));</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p>，AutoCompleteText的选择等。 这些测试项都有一个共同的特点。即不在主UI布局的结构(layout,及其include的layout)之中，是不能直接定位的。 所以这里就需要使用inRoot( ) 了。<br><code>onData(allOf(instanceOf(String.class), is(&quot;Baltic Sea&quot;)))        .inRoot(withDecorView(not(is(mActivity.getWindow().getDecorView()))))        .perform(click());</code><br>以上代码就解决了之前UiAutomator不支持Toast的验证的问题。</p><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>运行测试的方法很多，第一种命令行执行。<br>切换到当前项目目录，终端运行<br><code>./gradlew cAT</code><br>其中，cAT意为connectedAndroidTest。</p><p>另一种方式是在android studio中，点击run按钮，或者右键执行单一测试。<br><img src="/image/android_test.png" alt="android_device_monitor"></p><p>这一章还是以基础的实践为主，之后我们将深入架构，来看看espresso的API 方法，帮助大家理解API 更好更快的编写测试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前2篇我们已经详细介绍了espresso的架构以及相应的API，相信大家也有了一定的了解，理论讲的再多，还是不如手上自己敲一遍代码。&lt;br&gt;
      
    
    </summary>
    
    
      <category term="android自动化" scheme="http://yoursite.com/tags/android%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>espresso基础架构与API分析</title>
    <link href="http://yoursite.com/2016/12/02/espresso2/"/>
    <id>http://yoursite.com/2016/12/02/espresso2/</id>
    <published>2016-12-02T03:57:43.000Z</published>
    <updated>2017-09-25T09:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="espresso基础架构与API分析"><a href="#espresso基础架构与API分析" class="headerlink" title="espresso基础架构与API分析"></a>espresso基础架构与API分析</h2><p>Espresso测试框架提供了一组API来构建UI测试，以测试应用程序内的用户流。 这些API让您能够编写简洁，运行可靠的自动化UI测试。 Espresso非常适合编写白盒式自动化测试，其中测试代码使用来自所测试的应用程序的实现代码细节。</p><p>Espresso测试框架的主要功能包括：</p><p>用于在目标应用程序中查看和适配器匹配的灵活API。 有关详细信息，请参阅<a href="https://developer.android.com/topic/libraries/testing-support-library/index.html#espresso-matching" target="_blank" rel="external">View matching</a>。<br>一组广泛的操作API，用于自动化UI交互。 有关更多信息，请参阅<a href="https://developer.android.com/topic/libraries/testing-support-library/index.html#espresso-actions" target="_blank" rel="external"> Action APIs</a>。<br>UI线程同步提高测试的可靠性。 有关更多信息，请参阅 <a href="https://developer.android.com/topic/libraries/testing-support-library/index.html#espresso-thread-sync" target="_blank" rel="external">UI thread synchronization</a>。<br>可以作为参数传入 ​ViewInteraction.check()​方法中的 ViewAssertion 的集合。通常，你会使用带有视图匹配器的匹配断言来判断当前被选中视图的状态，请参阅<a href="https://developer.android.com/reference/android/support/test/espresso/assertion/package-summary.html" target="_blank" rel="external">ViewAssertions</a><br>需要Android 2.2（API级别8）或更高版本。</p><h2 id="View-matching"><a href="#View-matching" class="headerlink" title="View matching"></a>View matching</h2><h3 id="onView"><a href="#onView" class="headerlink" title="onView()"></a>onView()</h3><p>Espresso.onView()方法允许您访问目标应用程序中的UI组件并与其进行交互。 该方法接受Matcher参数并搜索视图层次以定位满足某些给定标准的对应View实例。 您可以通过指定以下条件来优化搜索：</p><ul><li>视图的类名</li><li>视图的内容描述</li><li>视图的R.id</li><li>视图中显示的文本<br>例如，要定位ID值为my_button的按钮，您可以指定一个匹配器，如下所示：</li></ul><p><code>onView（withId（R.id.my_button））;</code><br>如果搜索成功，onView()方法返回一个引用，该引用允许您对目标视图执行用户操作和测试断言。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">ViewInteraction <span class="title">onView</span><span class="params">(<span class="keyword">final</span> Matcher&lt;View&gt; viewMatcher)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> BASE.plus(<span class="keyword">new</span> ViewInteractionModule(viewMatcher)).viewInteraction();</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h4 id="ViewMatchers"><a href="#ViewMatchers" class="headerlink" title="ViewMatchers"></a>ViewMatchers</h4><p>onView方法需要传入类型为Matcher<view>泛型viewMatcher对象.</view></p><p>ViewMatchers类中方法有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isAssignableFrom，withClassName，isDisplayed，isCompletelyDisplayed，isDisplayingAtLeast，isEnabled，isFocusable，hasFocus，isSelected，hasSibling，withContentDescription，withContentDescription，withContentDescription，withId，withResourceName，withTagKey，withTagValue，withText，withCharSequence，withHint，isChecked，isNotChecked，withCheckBoxState，hasContentDescription，hasDescendant，isClickable，isDescendantOfA，withEffectiveVisibility，withParent，withChild，isRoot，supportsInputMethods，hasImeAction，hasImeAction，hasLinks，assertThat，withSpinnerText，isJavascriptEnabled，hasErrorText，withInputType。</div></pre></td></tr></table></figure></p><p> 这些方法能够帮助我们快速定位到特定的视图。<br> 我们来看看常用的几个方法<br> withId<br> 返回基于资源ids匹配视图的匹配器。<br> withText<br> 返回基于TextView的文本属性值匹配TextView的匹配器。<br><code>onView(allOf(withId(R.id.my_view), withText(&quot;Hello!&quot;)))</code><br> isDisplayed<br> 返回与当前显示在屏幕上的视图匹配的匹配器给用户。<br> 如下</p><p> <code>Espresso.onView(ViewMatchers.withId(R.id.mpu_summary_send_receipt_button))          .check(ViewAssertions.matches(ViewMatchers.isDisplayed()));</code><br>其他API方法可以在以下文档中找到具体用法和解释，我们并不需要记住每个方法，遇到具体的场景的时候再过来查询也来得及<br><a href="https://developer.android.com/reference/android/support/test/espresso/matcher/ViewMatchers.html" target="_blank" rel="external">viewmatchers-API</a></p><h4 id="ViewMatchers与hamcrest匹配器配合使用"><a href="#ViewMatchers与hamcrest匹配器配合使用" class="headerlink" title="ViewMatchers与hamcrest匹配器配合使用"></a>ViewMatchers与hamcrest匹配器配合使用</h4><p><strong>什么是hamcrest？</strong></p><p>Hamcrest框架是junit4框架新引入的断言框架，Hamcest提供了一套匹配符Matcher，这些匹配符更接近自然语言，可读性高，更加灵活。<br>我们可以通过各种viewmatchers与Hamcrest组合匹配器来缩小搜索的范围。<br>如以下示例所示：</p><p><code>onView(allOf(withId(R.id.button_signin), withText(&quot;Sign-in&quot;)));</code></p><p>你也可以使用 ​not​ 反转匹配：</p><p><code>onView(allOf(withId(R.id.button_signin), not(withText(&quot;Sign-out&quot;))));</code><br><strong>注意：</strong><br>一个工程化的应用中，所有用户可与之交互的视图都应该包含说明文字或有一个内容描述（参考 Android 可访问性指导）。如果你不能通过使用 ‘withText’ 或 ‘withContentDescripiton’ 来缩小onView的搜索范围，可以认为这是一个可访问性的 bug。</p><p>请使用最少的匹配器来定位视图。不要过指定，因为这将强制框架做无用功。例如，如果一个视图可以通过它的文字唯一确定，你不需要说明该视图也可以通过 ​TextView​ 指定。对许多视图而言，使用它的​R.id​值就足够了。</p><p>更多的hamcrest api请查看<br><a href="http://hamcrest.org/JavaHamcrest/javadoc/1.3/" target="_blank" rel="external">hamcrest api</a></p><p>###onData<br>当espresso在AdapterView中查找视图时需要用onData方法，例如在AdapterView小部件中，视图在运行时动态填充子视图。如果要测试的目标视图位于AdapterView（例如ListView，GridView或Spinner）中，则onView()方法可能无法工作，因为只有一部分视图可能会加载到当前视图层次结构中。</p><p>相反，调用onData()方法可获取DataInteraction对象以访问目标视图元素。 Espresso处理将目标视图元素加载到当前视图层次结构中。 Espresso还负责滚动到目标元素，并将放在焦点元素。</p><p>注意：onData()方法不检查您指定的项目是否与视图对应。 Espresso仅搜索当前视图层次结构。如果没有找到匹配，该方法将抛出NoMatchingViewException异常。</p><p>下面的代码片段展示了如何使用onData()方法和Hamcrest匹配来搜索包含给定字符串的列表中的特定行。在此示例中，LongListActivity类包含通过SimpleAdapter公开的字符串列表。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">onData(<span class="name">allOf</span>(<span class="name">is</span>(<span class="name">instanceOf</span>(<span class="name">Map</span>.class)),</div><div class="line">        hasEntry(<span class="name">equalTo</span>(<span class="name">LongListActivity</span>.ROW_TEXT), is(<span class="string">"test input"</span>)))<span class="comment">;</span></div></pre></td></tr></table></figure><h2 id="Performing-Actions"><a href="#Performing-Actions" class="headerlink" title="Performing Actions"></a>Performing Actions</h2><p>调用ViewInteraction.perform()或DataInteraction.perform()方法来模拟UI组件上的用户交互。您必须传入一个或多个ViewAction对象作为参数。Espresso按照给定的顺序依次触发每个动作，并在主线程中执行它们。<br>ViewActions类提供了指定常用操作的帮助方法列表。您可以使用这些方法作为方便的快捷方式，而不是创建和配置单个ViewAction对象。您可以指定以下操作：</p><ul><li>ViewActions.click()：点击视图。</li><li>ViewActions.typeText()：点击视图并输入指定的字符串。</li><li>ViewActions.scrollTo()：滚动到视图。目标视图必须是来自ScrollView的子类，它的android：visibility属性的值必须是VISIBLE。对于扩展AdapterView（例如，ListView）的视图，onData()方法为您处理滚动。</li><li>ViewActions.pressKey()：使用指定的键码执行键按下。</li><li>ViewActions.clearText()：清除目标视图中的文本。<br>如果目标视图位于ScrollView内部，请先执行ViewActions.scrollTo()操作，以在其他操作进行之前在屏幕中显示视图。如果视图已显示，ViewActions.scrollTo()操作将不起作用。</li></ul><p>例如，要模拟输入字符串值并按按钮提交值，您可以编写类似这样的自动测试脚本。 ViewInteraction.perform()和DataInteraction.perform()方法采用一个或多个ViewAction参数，并按提供的顺序运行操作。</p><p>//将文本键入EditText视图，然后关闭软键盘<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">onView(<span class="name">withId</span>(<span class="name">R</span>.id.editTextUserInput)）</div><div class="line">     .perform(<span class="name">typeText</span>(<span class="name">STRING_TO_BE_TYPED</span>),closeSoftKeyboard()）<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>//按按钮提交文本更改<br><code>onView(withId(R.id.changeTextBt)).perform(click());</code></p><p>其他action api 请查看<br><a href="espresso.action">https://developer.android.com/reference/android/support/test/espresso/action/package-summary.html</a></p><h2 id="Verifying-Results"><a href="#Verifying-Results" class="headerlink" title="Verifying Results"></a>Verifying Results</h2><p>调用ViewInteraction.check()或DataInteraction.check()方法来断言UI中的视图匹配一些预期状态。 您必须传递一个ViewAssertion对象作为参数。 如果断言失败，Espresso会抛出一个AssertionFailedError。<br>ViewAssertions类提供了用于指定公共断言的帮助程序方法的列表。 您可以使用的断言包括：<br>doesNotExist：断言没有与当前视图层次结构中指定的条件匹配的视图。<br>matches：断言指定视图存在于当前视图层次结构中，并且其状态与某个给定的Hamcrest匹配器匹配。<br>selectedDescendentsMatch：存在指定的孩子为父视图查看的声明，它们的状态与某个给定的Hamcrest匹配器匹配。</p><p>以下代码段显示了如何检查UI中显示的文本的值与之前在EditText字段中输入的文本的值相同。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">testChangeText_sameActivity</span>() &#123;</div><div class="line">    <span class="comment">// Type text and then press the button.</span></div><div class="line">    ...</div><div class="line">    <span class="selector-tag">onView</span>(withText(R.string.item_1_text))</div><div class="line">            <span class="selector-class">.check</span>(doesNotExist());</div><div class="line">    <span class="comment">// Check that the text was changed.</span></div><div class="line">    <span class="selector-tag">onView</span>(withId(R.id.textToBeChanged))</div><div class="line">            <span class="selector-class">.check</span>(matches(withText(STRING_TO_BE_TYPED)));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ViewMatchers, ViewActions, ViewAssertions 组成了espresso的基础架构，所以要真正的掌握espresso必须将这3部分基础熟悉。<br>上一节<a href="https://qaseven.github.io/2016/11/30/expresso/" target="_blank" rel="external">espresso基础</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;espresso基础架构与API分析&quot;&gt;&lt;a href=&quot;#espresso基础架构与API分析&quot; class=&quot;headerlink&quot; title=&quot;espresso基础架构与API分析&quot;&gt;&lt;/a&gt;espresso基础架构与API分析&lt;/h2&gt;&lt;p&gt;Espres
      
    
    </summary>
    
    
      <category term="android自动化" scheme="http://yoursite.com/tags/android%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>espresso系列一简介</title>
    <link href="http://yoursite.com/2016/11/30/expresso/"/>
    <id>http://yoursite.com/2016/11/30/expresso/</id>
    <published>2016-11-30T08:59:53.000Z</published>
    <updated>2017-09-21T07:42:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="espresso是什么？"><a href="#espresso是什么？" class="headerlink" title="espresso是什么？"></a>espresso是什么？</h2><p> Espresso 测试框架提供了一系列的API用于构建UI测试来测试app内用户流操作。这些API让你可以编写简洁可靠的自动化UI测试。Espresso非常适合用来编写白盒测试，其中测试代码的编写是利用了被测试app中程序代码实现细节。</p><p>Espresso测试可运行android 2.3.3(API 10 level)以及更高版本的设备上。使用Espresso的主要好处是,当你运行测试时它提供了自动的同步测试动作与应用程序UI。Espresso会检测你的主线程是否为空闲状态,如果你的没有被利用,这时候他就会抢占主线程运行测试，所以它能够在恰当的时间运行您的测试命令,提高测试的可靠性。这种能力也使您无须添加任何额外的措施,例如在测试代码中加入<code>thread.sleep()</code>。</p><p>Espresso测试框架基于 instrumentation-based API 并且使用 AndroidJUnitRunner测试驱动运行测试。</p><p>Espresso测试框架的关键特性包括：</p><ul><li>[ ] 提供了灵活的API用于匹配目标app中view和adapter。更多的信息，见<a href="https://developer.android.com/topic/libraries/testing-support-library/index.html#espresso-matching" target="_blank" rel="external">View匹配</a></li><li>[ ] 大而全的 行为 api（action APIs） 用于自动化UI交互。更多的信息，见<a href="https://developer.android.com/topic/libraries/testing-support-library/index.html#espresso-actions" target="_blank" rel="external">行为APIs</a></li><li>[ ] UI线程同步来提高测试可靠性。更多信息，<a href="https://developer.android.com/topic/libraries/testing-support-library/index.html#espresso-thread-sync" target="_blank" rel="external">见UI线程同步</a></li></ul><h2 id="版本兼容"><a href="#版本兼容" class="headerlink" title="版本兼容"></a>版本兼容</h2><p>Espresso 支持如下 API：</p><table><thead><tr><th>代号</th><th>API</th></tr></thead><tbody><tr><td>Froyo</td><td>8</td></tr><tr><td>Gingerbread</td><td>10</td></tr><tr><td>  Ice Cream Sandwich</td><td>15</td></tr><tr><td>  Jelly Bean</td><td>16, 17 ,18</td></tr><tr><td>  KitKat</td><td>19</td></tr><tr><td>  Lollipop</td><td>21</td></tr></tbody></table><p>注意：<br>切记 espresso 有版本断层，并不是全版本支持，请注意你设备android系统的版本，以免造成不必要的免费。<br>不过最新的android系统版本 espresso都是支持的。</p><h2 id="配置espresso"><a href="#配置espresso" class="headerlink" title="配置espresso"></a>配置espresso</h2><p>官方文档建议我们在开始配置之前，先看看如何开始测试，我觉得非常有必要，很多新手上来就拿着不知道那找来的例子运行下，就以为自己真的什么都会。这样的真的很不好，官方文档才是最好的老师，让我们一步一步慢慢来。</p><p>android是基于JUnit测试框架,单元测试,您可以运行任意本地的单元测试在JVM或instrumented tests在Android设备上。</p><h3 id="测试类型"><a href="#测试类型" class="headerlink" title="测试类型"></a>测试类型</h3><p>当使用Android studio 编写任何你的测试时,你的测试代码必须进入两个不同的代码目录(源集)。每个模块在您的项目中,Android Studio都包括源集,对应于以下测试类型:</p><h4 id="本地单元测试"><a href="#本地单元测试" class="headerlink" title="本地单元测试"></a>本地单元测试</h4><p>位于 <code>module-name/src/test/java/.</code></p><p>这些测试运行在本地JVM并没有访问Android框架api功能的权限。<br>让我们首先开始如何构建本地单元测试。</p><h3 id="构建本地单元测试"><a href="#构建本地单元测试" class="headerlink" title="构建本地单元测试"></a>构建本地单元测试</h3><p>如果您的单元测试没有依赖或只有简单的依赖Android系统,你应该在本地开发机器上运行您的测试。这种测试方法是有效的,因为它可以帮助你避免加载目标应用程序时的开销以及单元测试需要在一个物理设备或模拟器运行。因此,运行单元测试的时间将大大的减少。使用这种方法,您通常使用mocking 框架,列如Mockito、这可以帮助我们mock测试需要的依赖。</p><h3 id="设置测试环境"><a href="#设置测试环境" class="headerlink" title="设置测试环境"></a>设置测试环境</h3><p>在你的Android Studio项目时,您必须为本地单元测试存储源文件在 module-name/src/test/java/。当你创建一个新项目，这个目录就已经存在。您还需要为您的项目配置测试依赖,因为需要使用JUnit 4的框架提供标准的api。<br>如果您的测试需要与Android依赖关系,包括使用Mockito来简化你的单元测试。更多地使用 mock objects在本地的单元测试中,请查看Mocking Android依赖关系。在你的应用程序的顶层目录的build.gradle文件里,您需要指定这些库的依赖关系:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// Required -- JUnit 4 framework</span></div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="comment">// Optional -- Mockito framework</span></div><div class="line">    testCompile <span class="string">'org.mockito:mockito-core:1.10.19'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="创建本地单元测试类"><a href="#创建本地单元测试类" class="headerlink" title="创建本地单元测试类"></a>创建本地单元测试类</h3><p>你当地的单元测试类应该写成一个JUnit 4测试类。JUnit是最受欢迎和广泛使用为Java单元测试框架。这个框架的最新版本,JUnit4,允许您在一个比之前的版更清洁和更灵活的方法中编写测试。之前的Android单元测试基于JUnit3框架,使用JUnit4,您不需要扩展junit.framework。TestCase类。你也不需要在测试方法名称包含“test”关键字,或者使用junit的任何类在junit.framework或junit.extensions包。</p><p>创建一个基本的JUnit 4测试类,首先需要创建一个Java类,它包含一个或多个测试方法。一个测试方法以@Test annotation标注并且包含代码的实现和验证的代码中包含您想要测试的一个功能组件。</p><p>下面的例子展示了如何实现一个本地的单元测试类。测试方法emailValidator_CorrectEmailSimple_ReturnsTrue验证isValidEmail()方法，应用程序返回正确的结果。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.junit.Test;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.regex.Pattern;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> static org.junit.Assert.assertFalse;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> static org.junit.Assert.assertTrue;</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailValidatorTest</span> </span>&#123;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> emailValidator_CorrectEmailSimple_ReturnsTrue() &#123;</div><div class="line">        assertThat(EmailValidator.isValidEmail(<span class="string">"name@email.com"</span>), <span class="keyword">is</span>(<span class="literal">true</span>));</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试组件在应用程序返回预期的结果,使用junit.Assert方法来执行验证检查(或断言)来对比测试组件的状态和一些期望值。为了使测试具有更好的可读的,您可以使用Hamcrest matchers(如 is()和equalTo()方法)来匹配返回的结果与预期的结果。</p><h3 id="Mock-Android依赖关系"><a href="#Mock-Android依赖关系" class="headerlink" title="Mock Android依赖关系"></a>Mock Android依赖关系</h3><p>默认情况下,Android插件Gradle执行本地的单元测试与修改后的版本的Android.jar库,它不包含任何实际的代码。相反,从你的单元测试方法调用安卓类抛出异常。这确保你的测试代码和不依赖于任何特定的行为的Android平台(你没有显式地mock)。<br>您可以使用模拟框架在代码中存根外部依赖关系，以便轻松测试您的组件是否按照预期的方式与依赖关系交互。 通过用模拟对象替换Android依赖项，您可以将单元测试与Android系统的其余部分隔离，同时验证这些依赖关系中的正确方法是否被调用。 Java的Mockito mocking框架（1.9.5及更高版本）提供了与Android单元测试的兼容性。 使用Mockito，您可以配置模拟对象以在调用时返回一些特定值。</p><p>要使用此框架将mock对象添加到本地单元测试，请遵循以下编程模型：</p><ul><li>在build.gradle文件中包含Mockito库依赖关系，如设置测试环境中所述。</li><li>在单元测试类定义的开始，添加@RunWith（MockitoJUnitRunner.class）注释。 这个注释告诉Mockito测试运行器验证你的框架的使用是正确的，并简化了你的模拟对象的初始化。</li><li>要为Android依赖项创建模拟对象，请在字段声明之前添加@Mock注释。</li><li>要存根依赖关系的行为，可以使用when（）和thenReturn（）方法指定条件并返回值。</li></ul><p>以下示例显示如何创建使用mock上下文对象的单元测试。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> static org.hamcrest.MatcherAssert.assertThat;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> static org.hamcrest.CoreMatchers.*;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> static org.mockito.Mockito.*;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.junit.Test;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.junit.runner.RunWith;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.mockito.Mock;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> org.mockito.runners.MockitoJUnitRunner;</span></div><div class="line"><span class="meta"><span class="meta-keyword">import</span> android.content.SharedPreferences;</span></div><div class="line"></div><div class="line">@RunWith(MockitoJUnitRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnitTestSample</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FAKE_STRING = <span class="string">"HELLO WORLD"</span>;</div><div class="line"></div><div class="line">    @Mock</div><div class="line">    Context mMockContext;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> readStringFromContext_LocalizedString() &#123;</div><div class="line">        <span class="comment">// Given a mocked Context injected into the object under test...</span></div><div class="line">        when(mMockContext.getString(R.string.hello_word))</div><div class="line">                .thenReturn(FAKE_STRING);</div><div class="line">        ClassUnderTest myObjectUnderTest = <span class="keyword">new</span> ClassUnderTest(mMockContext);</div><div class="line"></div><div class="line">        <span class="comment">// ...when the string is returned from the object under test...</span></div><div class="line">        String result = myObjectUnderTest.getHelloWorldString();</div><div class="line"></div><div class="line">        <span class="comment">// ...then the result should be the expected one.</span></div><div class="line">        assertThat(result, <span class="keyword">is</span>(FAKE_STRING));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>要了解有关使用Mockito框架的更多信息，请参阅示例代码中的Mockito API参考和SharedPreferencesHelperTest类。<br>如果Android.jar中的Android API抛出的异常对于测试有问题，您可以更改行为，以使方法通过在项目的顶级build.gradle文件中添加以下配置来返回null或零：<br><code>android {  ...  testOptions {    unitTests.returnDefaultValues = true  }}</code></p><p>警告：将returnDefaultValues属性设置为true应该小心。  null/zero 返回值可以在测试中引入回归，这难以调试，并且可能允许失败的测试通过。 只能使用它作为最后的手段。</p><h3 id="运行本地测试"><a href="#运行本地测试" class="headerlink" title="运行本地测试"></a>运行本地测试</h3><p>要运行本地单元测试，请按照下列步骤操作：</p><ol><li>通过单击工具栏中的 Sync Project，确保您的项目与Gradle同步。</li><li>使用以下方法之一运行测试：</li></ol><ul><li>要运行单个测试，请打开“Project”窗口，然后右键单击测试，然后单击RUN。</li><li>要测试类中的所有方法，请右键单击测试文件中的类或方法，然后单击Run。</li><li>要在目录中运行所有测试，请右键单击目录并选择Run test。<br>Gradle的Android插件编译位于默认目录（src / test / java /）中的本地单元测试代码，构建一个测试应用程序，并使用默认的测试运行器类在本地执行它。 然后，Android Studio将在“运行”窗口中显示结果。</li></ul><h4 id="Instrumented-tests"><a href="#Instrumented-tests" class="headerlink" title="Instrumented tests"></a>Instrumented tests</h4><p>位于module-name/src/androidTest/java/。<br>这些都是必须在Android硬件设备或Android模拟器上运行的测试。</p><p>仪表化测试内置于在测试下的应用旁边的设备上运行的APK。 系统在同一个过程中运行测试APK和您的应用程序，因此您的测试可以调用方法和修改应用程序中的字段，并自动化用户与您的应用程序的互动。</p><p>有关如何创建检测测试的信息，请参阅以下主题：</p><p>构建测试单元测试：使用Android依赖项构建复杂的单元测试，这些测试不能满足模拟对象。<br>自动化用户界面测试：创建测试以验证用户界面在单个应用程序内的用户交互或多个应用程序之间的交互操作正确。<br>测试应用程序组件集成：验证用户不直接与之交互的组件（例如服务或内容提供者）的行为。<br><img src="https://developer.android.com/images/testing/test-types_2x.png" alt=""><br>但是，上述的本地单元测试和instrumented tests只是用于区分在本地JVM上运行的测试和在Android平台（在硬件设备或模拟器上）运行的测试之间的术语。 在构建完整测试套件时应该理解的真实测试类型在下表中描述。</p><table><thead><tr><th>Type</th><th>子类型</th><th>描述</th></tr></thead><tbody><tr><td>Unit tests</td><td>Local Unit Tests</td><td>本地单元测试在Java虚拟机（JVM）上本地运行的单元测试。当您的测试没有Android框架依赖项或者可以模拟Android框架依赖项时，使用这些测试来最小化执行时间。</td></tr><tr><td>Unit tests</td><td>Instrumented unit tests</td><td>测试单元测试在Android设备或模拟器上运行的单元测试。这些测试可以访问Instrumentation信息，例如您要测试的应用程序的上下文。当你的测试有Android依赖，模拟对象不能满足时，使用这些测试。</td></tr><tr><td>Integration Tests</td><td>Components within your app only</td><td>您的应用程序中的组件仅当用户执行特定操作或在其活动中输入特定输入时，此类型的测试验证目标应用程序的行为如预期。例如，它允许您检查目标应用程序返回正确的UI输出，以响应用户在应用程序活动中的互动。 Espresso等UI测试框架允许您以编程方式模拟用户操作并测试复杂的应用内用户交互。</td></tr><tr><td>Integration Tests</td><td>Cross-app Components</td><td>跨应用程序组件此类型的测试验证不同用户应用程序之间或用户应用程序和系统应用程序之间的交互的正确行为。例如，当用户在Android设置菜单中执行操作时，您可能需要测试您的应用是否正确运行。支持跨应用程序交互的UI测试框架（如UI Automator）允许您为这些场景创建测试。</td></tr></tbody></table><h4 id="Test-APIs"><a href="#Test-APIs" class="headerlink" title="Test APIs"></a>Test APIs</h4><p>以下是用于在Android上测试应用的常见API。<br>JUnit<br>您应该将您的单元或集成测试类写为JUnit 4测试类。 该框架提供了一种方便的方法来在测试中执行常见的setup, teardown, and assertion操作。</p><p>基本的JUnit 4测试类是包含一个或多个测试方法的Java类。 测试方法以@Test注释开始，包含练习和验证要测试的组件中的单个功能（即逻辑单元）的代码。</p><p>以下代码段显示了一个示例JUnit 4集成测试，它使用Espresso API对UI元素执行单击操作，然后检查是否显示预期的字符串。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@RunWith</span>(AndroidJUnit4.class)</div><div class="line"><span class="variable">@LargeTest</span></div><div class="line">public class MainActivityInstrumentationTest &#123;</div><div class="line"></div><div class="line">    <span class="variable">@Rule</span></div><div class="line">    public ActivityTestRule mActivityRule = new ActivityTestRule&lt;&gt;(</div><div class="line">            MainActivity.class);</div><div class="line"></div><div class="line">    <span class="variable">@Test</span></div><div class="line">    public void sayHello()&#123;</div><div class="line">        <span class="selector-tag">onView</span>(withText(<span class="string">"Say hello!"</span>))<span class="selector-class">.perform</span>(click());</div><div class="line"></div><div class="line">        <span class="selector-tag">onView</span>(withId(R.id.textView))<span class="selector-class">.check</span>(matches(withText(<span class="string">"Hello, World!"</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在您的JUnit 4测试类中，您可以通过使用以下注释调用测试代码中的部分进行特殊处理：</p><ul><li>@Before：使用此注释来指定包含测试设置操作的代码块。测试类在每次测试之前调用此代码块。你可以有多个@Before方法，但是测试类调用这些方法的顺序不能保证。</li><li>@After：此注释指定一个包含测试拆分操作的代码块。测试类在每个测试方法之后调用这个代码块。您可以在测试代码中定义多个@After操作。使用此注释从内存释放任何资源。</li><li>@Test：使用此注释标记测试方法。单个测试类可以包含多个测试方法，每个测试方法都以此注释作为前缀。</li><li>@Rule：规则允许您以可重用的方式灵活地添加或重新定义每个测试方法的行为。在Android测试中，将此注释与Android测试支持库提供的测试规则类之一一起使用，例如ActivityTestRule或ServiceTestRule。</li><li>@BeforeClass：使用此注释为每个测试类指定仅调用一次的静态方法。此测试步骤对于消耗大的操作（例如连接到数据库）很有用。</li><li>@AfterClass：使用此注释为测试类指定静态方法，仅在类中的所有测试运行后调用。 这个测试步骤对释放在@BeforeClass块中分配的任何资源很有用。</li><li>@Test（timeout =）：一些注释支持传递元素的能力，您可以为其设置值。 例如，您可以为测试指定超时期限。 如果测试开始，但没有在给定的超时期间内完成，它会自动失败。 您必须以毫秒为单位指定超时期限，例如：@Test（timeout = 5000）。<br>使用JUnit Assert类来验证对象状态的正确性。 assert方法将您从测试所期望的值与实际结果进行比较，如果比较失败，则抛出异常。 断言类更详细地描述这些方法。<h4 id="Android测试支持库"><a href="#Android测试支持库" class="headerlink" title="Android测试支持库"></a>Android测试支持库</h4>Android测试支持库提供了一组API，允许您快速构建和运行应用程序的测试代码，包括JUnit 4和功能UI测试。 库包括以下基于工具的API，当您想要自动化测试时，这些API是有用的：</li></ul><p>AndroidJUnitRunner<br>适用于Android的JUnit 4兼容测试运行器。<br>espresso<br>一个UI测试框架; 适用于在应用程序内的功能UI测试。<br>UI automator<br>适用于系统和已安装应用程序之间跨应用程序功能UI测试的UI测试框架。</p><h4 id="断言类"><a href="#断言类" class="headerlink" title="断言类"></a>断言类</h4><p>由于Android测试支持库API扩展JUnit，因此可以使用断言方法显示测试结果。断言方法将测试返回的实际值与预期值进行比较，如果比较测试失败，则抛出AssertionException异常。使用断言比记录更方便，并提供更好的测试性能。</p><p>为了简化测试开发，您应该使用Hamcrest库，它允许您使用Hamcrest匹配器API创建更灵活的测试。</p><p>Monkey 和 monkeyrunner<br>Android SDK包含两个用于功能级应用测试的工具：</p><p>Monkey<br>这是一个命令行工具，用于向设备发送按键，触摸和手势的伪随机流。您使用Android Debug Bridge（adb）工具运行它，并使用它来压力测试您的应用程序，报告所遇到的错误，或通过使用相同的随机数种子多次运行该工具来重复事件流。<br>monkeyrunner<br>此工具是用Python编写的测试程序的API和执行环境。 API包括用于连接到设备，安装和卸载包，截取屏幕截图，比较两个图像以及针对应用运行测试包的功能。使用API​​，您可以编写大量，强大和复杂的测试。您使用monkeyrunner命令行工具运行使用API​​的程序。</p><h4 id="构建Android测试的指南"><a href="#构建Android测试的指南" class="headerlink" title="构建Android测试的指南"></a>构建Android测试的指南</h4><p>以下文档提供了有关如何构建和运行各种测试类型的更多详细信息：</p><p>建立本地单元测试<br>构建单元测试没有依赖或只有简单的依赖，你可以mock，它运行在本地JVM上。<br>建筑仪表单元测试<br>使用Android依赖项构建复杂的单元测试，这对于在硬件设备或模拟器上运行的模拟对象无法满足。<br>自动化用户界面测试<br>创建测试以验证用户界面在单个应用程序内的用户交互或多个应用程序之间的交互正确运行。<br>测试应用程序集成<br>验证用户不直接与之交互的组件（例如服务或内容提供者）的行为。<br>测试显示性能<br>编写测试应用程序UI性能的测试，以确保持续流畅的用户体验。<br>ok 我们已经看完了 怎么开始android测试，我想大家一定有了很深入的了解了吧<br>让我们进入正题 配置espresso<br>在Android应用程序模块的build.gradle文件中，必须为Espresso引入jar依赖：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// Other dependencies ...</span></div><div class="line">    androidTestCompile <span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>关闭测试设备上的动画 - 在测试设备中打开系统动画可能会导致意外的结果，或可能导致测试失败。 通过打开开发者选项并关闭所有以下选项，从设置中关闭动画：</p><ul><li>在设备上的设置-&gt;开发者选项中禁用一下三项设置： &gt; 窗口动画缩放 &gt; 过渡动画缩放 &gt; 动画程序时长缩放</li><li>确保你已经安装了最新的 Extras 下的 Android Support Repository<br>设置junit为测试驱动框架<br>在build.gradle 中 添加<br><code>testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</code><h2 id="完整的build-gradle-示例文件如下"><a href="#完整的build-gradle-示例文件如下" class="headerlink" title="完整的build.gradle 示例文件如下"></a>完整的build.gradle 示例文件如下</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">​android.defaultConfigpply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">24</span></div><div class="line">    buildToolsVersion rootProject.buildToolsVersion</div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.example.android.testing.espresso.BasicSample"</span></div><div class="line">        minSdkVersion <span class="number">10</span></div><div class="line">        targetSdkVersion <span class="number">24</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line"></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">    &#125;</div><div class="line">    lintOptions &#123;</div><div class="line">        abortOnError <span class="keyword">false</span></div><div class="line">    &#125;</div><div class="line">    productFlavors &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// App dependencies</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:support-annotations:'</span> + rootProject.supportLibVersion;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.google.guava:guava:18.0'</span></div><div class="line">    <span class="comment">// Testing-only dependencies</span></div><div class="line">    <span class="comment">// Force usage of support annotations in the test app, since it is internally used by the runner module.</span></div><div class="line">    androidTestCompile <span class="string">'com.android.support:support-annotations:'</span> + rootProject.supportLibVersion;</div><div class="line">    androidTestCompile <span class="string">'com.android.support.test:runner:'</span> + rootProject.runnerVersion;</div><div class="line">    androidTestCompile <span class="string">'com.android.support.test:rules:'</span> + rootProject.rulesVersion;</div><div class="line">    androidTestCompile <span class="string">'com.android.support.test.espresso:espresso-core:'</span> + rootProject.espressoVersion;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>之后我们只需要在命令行中输入gradle就会帮我们下载依赖运行测试了，对了记着要安装gradle到你的系统中.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;espresso是什么？&quot;&gt;&lt;a href=&quot;#espresso是什么？&quot; class=&quot;headerlink&quot; title=&quot;espresso是什么？&quot;&gt;&lt;/a&gt;espresso是什么？&lt;/h2&gt;&lt;p&gt; Espresso 测试框架提供了一系列的API用于构建UI
      
    
    </summary>
    
    
      <category term="android自动化" scheme="http://yoursite.com/tags/android%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
</feed>
